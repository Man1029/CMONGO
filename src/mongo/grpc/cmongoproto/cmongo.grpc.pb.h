// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cmongo/cmongoproto/cmongo.proto
#ifndef GRPC_cmongo_2fcmongoproto_2fcmongo_2eproto__INCLUDED
#define GRPC_cmongo_2fcmongoproto_2fcmongo_2eproto__INCLUDED

#include "mongo/grpc/cmongoproto/cmongo.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace cmongoproto {

class Container final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::cmongoproto::HeartBeatRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::HeartBeatRes>> AsyncHeartBeat(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::HeartBeatRes>>(AsyncHeartBeatRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateContainer(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::cmongoproto::CreateContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CreateContainerRes>> AsyncCreateContainer(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CreateContainerRes>>(AsyncCreateContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyContainer(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::cmongoproto::DestroyContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::DestroyContainerRes>> AsyncDestroyContainer(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::DestroyContainerRes>>(AsyncDestroyContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status InfoContainer(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::cmongoproto::InfoContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::InfoContainerRes>> AsyncInfoContainer(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::InfoContainerRes>>(AsyncInfoContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status StartContainer(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::cmongoproto::StartContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StartContainerRes>> AsyncStartContainer(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StartContainerRes>>(AsyncStartContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status StopContainer(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::cmongoproto::StopContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StopContainerRes>> AsyncStopContainer(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StopContainerRes>>(AsyncStopContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status RSInit(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::cmongoproto::RSInitRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSInitRes>> AsyncRSInit(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSInitRes>>(AsyncRSInitRaw(context, request, cq));
    }
    virtual ::grpc::Status RSStatus(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::cmongoproto::RSStatusRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSStatusRes>> AsyncRSStatus(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSStatusRes>>(AsyncRSStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status RSAdd(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::cmongoproto::RSAddRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSAddRes>> AsyncRSAdd(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSAddRes>>(AsyncRSAddRaw(context, request, cq));
    }
    virtual ::grpc::Status RSRemove(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::cmongoproto::RSRemoveRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSRemoveRes>> AsyncRSRemove(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSRemoveRes>>(AsyncRSRemoveRaw(context, request, cq));
    }
    virtual ::grpc::Status CommandContainer(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::cmongoproto::CommandContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CommandContainerRes>> AsyncCommandContainer(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CommandContainerRes>>(AsyncCommandContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status ResizeContainer(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::cmongoproto::ResizeContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::ResizeContainerRes>> AsyncResizeContainer(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::ResizeContainerRes>>(AsyncResizeContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status UpgradeContainer(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::cmongoproto::UpgradeContainerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpgradeContainerRes>> AsyncUpgradeContainer(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpgradeContainerRes>>(AsyncUpgradeContainerRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateContainerModule(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::cmongoproto::UpdateContainerModuleRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpdateContainerModuleRes>> AsyncUpdateContainerModule(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpdateContainerModuleRes>>(AsyncUpdateContainerModuleRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::HeartBeatRes>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CreateContainerRes>* AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::DestroyContainerRes>* AsyncDestroyContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::InfoContainerRes>* AsyncInfoContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StartContainerRes>* AsyncStartContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::StopContainerRes>* AsyncStopContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSInitRes>* AsyncRSInitRaw(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSStatusRes>* AsyncRSStatusRaw(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSAddRes>* AsyncRSAddRaw(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::RSRemoveRes>* AsyncRSRemoveRaw(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::CommandContainerRes>* AsyncCommandContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::ResizeContainerRes>* AsyncResizeContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpgradeContainerRes>* AsyncUpgradeContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cmongoproto::UpdateContainerModuleRes>* AsyncUpdateContainerModuleRaw(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status HeartBeat(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::cmongoproto::HeartBeatRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::HeartBeatRes>> AsyncHeartBeat(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::HeartBeatRes>>(AsyncHeartBeatRaw(context, request, cq));
    }
    ::grpc::Status CreateContainer(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::cmongoproto::CreateContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::CreateContainerRes>> AsyncCreateContainer(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::CreateContainerRes>>(AsyncCreateContainerRaw(context, request, cq));
    }
    ::grpc::Status DestroyContainer(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::cmongoproto::DestroyContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::DestroyContainerRes>> AsyncDestroyContainer(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::DestroyContainerRes>>(AsyncDestroyContainerRaw(context, request, cq));
    }
    ::grpc::Status InfoContainer(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::cmongoproto::InfoContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::InfoContainerRes>> AsyncInfoContainer(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::InfoContainerRes>>(AsyncInfoContainerRaw(context, request, cq));
    }
    ::grpc::Status StartContainer(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::cmongoproto::StartContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::StartContainerRes>> AsyncStartContainer(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::StartContainerRes>>(AsyncStartContainerRaw(context, request, cq));
    }
    ::grpc::Status StopContainer(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::cmongoproto::StopContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::StopContainerRes>> AsyncStopContainer(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::StopContainerRes>>(AsyncStopContainerRaw(context, request, cq));
    }
    ::grpc::Status RSInit(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::cmongoproto::RSInitRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSInitRes>> AsyncRSInit(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSInitRes>>(AsyncRSInitRaw(context, request, cq));
    }
    ::grpc::Status RSStatus(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::cmongoproto::RSStatusRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSStatusRes>> AsyncRSStatus(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSStatusRes>>(AsyncRSStatusRaw(context, request, cq));
    }
    ::grpc::Status RSAdd(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::cmongoproto::RSAddRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSAddRes>> AsyncRSAdd(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSAddRes>>(AsyncRSAddRaw(context, request, cq));
    }
    ::grpc::Status RSRemove(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::cmongoproto::RSRemoveRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSRemoveRes>> AsyncRSRemove(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSRemoveRes>>(AsyncRSRemoveRaw(context, request, cq));
    }
    ::grpc::Status CommandContainer(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::cmongoproto::CommandContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::CommandContainerRes>> AsyncCommandContainer(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::CommandContainerRes>>(AsyncCommandContainerRaw(context, request, cq));
    }
    ::grpc::Status ResizeContainer(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::cmongoproto::ResizeContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::ResizeContainerRes>> AsyncResizeContainer(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::ResizeContainerRes>>(AsyncResizeContainerRaw(context, request, cq));
    }
    ::grpc::Status UpgradeContainer(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::cmongoproto::UpgradeContainerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpgradeContainerRes>> AsyncUpgradeContainer(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpgradeContainerRes>>(AsyncUpgradeContainerRaw(context, request, cq));
    }
    ::grpc::Status UpdateContainerModule(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::cmongoproto::UpdateContainerModuleRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpdateContainerModuleRes>> AsyncUpdateContainerModule(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpdateContainerModuleRes>>(AsyncUpdateContainerModuleRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::HeartBeatRes>* AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::cmongoproto::HeartBeatReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::CreateContainerRes>* AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::CreateContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::DestroyContainerRes>* AsyncDestroyContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::DestroyContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::InfoContainerRes>* AsyncInfoContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::InfoContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::StartContainerRes>* AsyncStartContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::StartContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::StopContainerRes>* AsyncStopContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::StopContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSInitRes>* AsyncRSInitRaw(::grpc::ClientContext* context, const ::cmongoproto::RSInitReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSStatusRes>* AsyncRSStatusRaw(::grpc::ClientContext* context, const ::cmongoproto::RSStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSAddRes>* AsyncRSAddRaw(::grpc::ClientContext* context, const ::cmongoproto::RSAddReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::RSRemoveRes>* AsyncRSRemoveRaw(::grpc::ClientContext* context, const ::cmongoproto::RSRemoveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::CommandContainerRes>* AsyncCommandContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::CommandContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::ResizeContainerRes>* AsyncResizeContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::ResizeContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpgradeContainerRes>* AsyncUpgradeContainerRaw(::grpc::ClientContext* context, const ::cmongoproto::UpgradeContainerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cmongoproto::UpdateContainerModuleRes>* AsyncUpdateContainerModuleRaw(::grpc::ClientContext* context, const ::cmongoproto::UpdateContainerModuleReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_HeartBeat_;
    const ::grpc::RpcMethod rpcmethod_CreateContainer_;
    const ::grpc::RpcMethod rpcmethod_DestroyContainer_;
    const ::grpc::RpcMethod rpcmethod_InfoContainer_;
    const ::grpc::RpcMethod rpcmethod_StartContainer_;
    const ::grpc::RpcMethod rpcmethod_StopContainer_;
    const ::grpc::RpcMethod rpcmethod_RSInit_;
    const ::grpc::RpcMethod rpcmethod_RSStatus_;
    const ::grpc::RpcMethod rpcmethod_RSAdd_;
    const ::grpc::RpcMethod rpcmethod_RSRemove_;
    const ::grpc::RpcMethod rpcmethod_CommandContainer_;
    const ::grpc::RpcMethod rpcmethod_ResizeContainer_;
    const ::grpc::RpcMethod rpcmethod_UpgradeContainer_;
    const ::grpc::RpcMethod rpcmethod_UpdateContainerModule_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::cmongoproto::HeartBeatReq* request, ::cmongoproto::HeartBeatRes* response);
    virtual ::grpc::Status CreateContainer(::grpc::ServerContext* context, const ::cmongoproto::CreateContainerReq* request, ::cmongoproto::CreateContainerRes* response);
    virtual ::grpc::Status DestroyContainer(::grpc::ServerContext* context, const ::cmongoproto::DestroyContainerReq* request, ::cmongoproto::DestroyContainerRes* response);
    virtual ::grpc::Status InfoContainer(::grpc::ServerContext* context, const ::cmongoproto::InfoContainerReq* request, ::cmongoproto::InfoContainerRes* response);
    virtual ::grpc::Status StartContainer(::grpc::ServerContext* context, const ::cmongoproto::StartContainerReq* request, ::cmongoproto::StartContainerRes* response);
    virtual ::grpc::Status StopContainer(::grpc::ServerContext* context, const ::cmongoproto::StopContainerReq* request, ::cmongoproto::StopContainerRes* response);
    virtual ::grpc::Status RSInit(::grpc::ServerContext* context, const ::cmongoproto::RSInitReq* request, ::cmongoproto::RSInitRes* response);
    virtual ::grpc::Status RSStatus(::grpc::ServerContext* context, const ::cmongoproto::RSStatusReq* request, ::cmongoproto::RSStatusRes* response);
    virtual ::grpc::Status RSAdd(::grpc::ServerContext* context, const ::cmongoproto::RSAddReq* request, ::cmongoproto::RSAddRes* response);
    virtual ::grpc::Status RSRemove(::grpc::ServerContext* context, const ::cmongoproto::RSRemoveReq* request, ::cmongoproto::RSRemoveRes* response);
    virtual ::grpc::Status CommandContainer(::grpc::ServerContext* context, const ::cmongoproto::CommandContainerReq* request, ::cmongoproto::CommandContainerRes* response);
    virtual ::grpc::Status ResizeContainer(::grpc::ServerContext* context, const ::cmongoproto::ResizeContainerReq* request, ::cmongoproto::ResizeContainerRes* response);
    virtual ::grpc::Status UpgradeContainer(::grpc::ServerContext* context, const ::cmongoproto::UpgradeContainerReq* request, ::cmongoproto::UpgradeContainerRes* response);
    virtual ::grpc::Status UpdateContainerModule(::grpc::ServerContext* context, const ::cmongoproto::UpdateContainerModuleReq* request, ::cmongoproto::UpdateContainerModuleRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_HeartBeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::cmongoproto::HeartBeatReq* request, ::cmongoproto::HeartBeatRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartBeat(::grpc::ServerContext* context, ::cmongoproto::HeartBeatReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::HeartBeatRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateContainer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* context, const ::cmongoproto::CreateContainerReq* request, ::cmongoproto::CreateContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateContainer(::grpc::ServerContext* context, ::cmongoproto::CreateContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::CreateContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DestroyContainer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DestroyContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyContainer(::grpc::ServerContext* context, const ::cmongoproto::DestroyContainerReq* request, ::cmongoproto::DestroyContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyContainer(::grpc::ServerContext* context, ::cmongoproto::DestroyContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::DestroyContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InfoContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InfoContainer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_InfoContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InfoContainer(::grpc::ServerContext* context, const ::cmongoproto::InfoContainerReq* request, ::cmongoproto::InfoContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfoContainer(::grpc::ServerContext* context, ::cmongoproto::InfoContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::InfoContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartContainer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* context, const ::cmongoproto::StartContainerReq* request, ::cmongoproto::StartContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartContainer(::grpc::ServerContext* context, ::cmongoproto::StartContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::StartContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopContainer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* context, const ::cmongoproto::StopContainerReq* request, ::cmongoproto::StopContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopContainer(::grpc::ServerContext* context, ::cmongoproto::StopContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::StopContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RSInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RSInit() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RSInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSInit(::grpc::ServerContext* context, const ::cmongoproto::RSInitReq* request, ::cmongoproto::RSInitRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRSInit(::grpc::ServerContext* context, ::cmongoproto::RSInitReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::RSInitRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RSStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RSStatus() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RSStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSStatus(::grpc::ServerContext* context, const ::cmongoproto::RSStatusReq* request, ::cmongoproto::RSStatusRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRSStatus(::grpc::ServerContext* context, ::cmongoproto::RSStatusReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::RSStatusRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RSAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RSAdd() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RSAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSAdd(::grpc::ServerContext* context, const ::cmongoproto::RSAddReq* request, ::cmongoproto::RSAddRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRSAdd(::grpc::ServerContext* context, ::cmongoproto::RSAddReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::RSAddRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RSRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RSRemove() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RSRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSRemove(::grpc::ServerContext* context, const ::cmongoproto::RSRemoveReq* request, ::cmongoproto::RSRemoveRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRSRemove(::grpc::ServerContext* context, ::cmongoproto::RSRemoveReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::RSRemoveRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommandContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CommandContainer() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CommandContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandContainer(::grpc::ServerContext* context, const ::cmongoproto::CommandContainerReq* request, ::cmongoproto::CommandContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommandContainer(::grpc::ServerContext* context, ::cmongoproto::CommandContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::CommandContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResizeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResizeContainer() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ResizeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeContainer(::grpc::ServerContext* context, const ::cmongoproto::ResizeContainerReq* request, ::cmongoproto::ResizeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResizeContainer(::grpc::ServerContext* context, ::cmongoproto::ResizeContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::ResizeContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpgradeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpgradeContainer() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpgradeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradeContainer(::grpc::ServerContext* context, const ::cmongoproto::UpgradeContainerReq* request, ::cmongoproto::UpgradeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradeContainer(::grpc::ServerContext* context, ::cmongoproto::UpgradeContainerReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::UpgradeContainerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateContainerModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateContainerModule() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_UpdateContainerModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateContainerModule(::grpc::ServerContext* context, const ::cmongoproto::UpdateContainerModuleReq* request, ::cmongoproto::UpdateContainerModuleRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateContainerModule(::grpc::ServerContext* context, ::cmongoproto::UpdateContainerModuleReq* request, ::grpc::ServerAsyncResponseWriter< ::cmongoproto::UpdateContainerModuleRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HeartBeat<WithAsyncMethod_CreateContainer<WithAsyncMethod_DestroyContainer<WithAsyncMethod_InfoContainer<WithAsyncMethod_StartContainer<WithAsyncMethod_StopContainer<WithAsyncMethod_RSInit<WithAsyncMethod_RSStatus<WithAsyncMethod_RSAdd<WithAsyncMethod_RSRemove<WithAsyncMethod_CommandContainer<WithAsyncMethod_ResizeContainer<WithAsyncMethod_UpgradeContainer<WithAsyncMethod_UpdateContainerModule<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_HeartBeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::cmongoproto::HeartBeatReq* request, ::cmongoproto::HeartBeatRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateContainer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* context, const ::cmongoproto::CreateContainerReq* request, ::cmongoproto::CreateContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DestroyContainer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DestroyContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyContainer(::grpc::ServerContext* context, const ::cmongoproto::DestroyContainerReq* request, ::cmongoproto::DestroyContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InfoContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InfoContainer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_InfoContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InfoContainer(::grpc::ServerContext* context, const ::cmongoproto::InfoContainerReq* request, ::cmongoproto::InfoContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartContainer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* context, const ::cmongoproto::StartContainerReq* request, ::cmongoproto::StartContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopContainer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* context, const ::cmongoproto::StopContainerReq* request, ::cmongoproto::StopContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RSInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RSInit() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RSInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSInit(::grpc::ServerContext* context, const ::cmongoproto::RSInitReq* request, ::cmongoproto::RSInitRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RSStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RSStatus() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RSStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSStatus(::grpc::ServerContext* context, const ::cmongoproto::RSStatusReq* request, ::cmongoproto::RSStatusRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RSAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RSAdd() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RSAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSAdd(::grpc::ServerContext* context, const ::cmongoproto::RSAddReq* request, ::cmongoproto::RSAddRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RSRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RSRemove() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RSRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RSRemove(::grpc::ServerContext* context, const ::cmongoproto::RSRemoveReq* request, ::cmongoproto::RSRemoveRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommandContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CommandContainer() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CommandContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandContainer(::grpc::ServerContext* context, const ::cmongoproto::CommandContainerReq* request, ::cmongoproto::CommandContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResizeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResizeContainer() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ResizeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResizeContainer(::grpc::ServerContext* context, const ::cmongoproto::ResizeContainerReq* request, ::cmongoproto::ResizeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpgradeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpgradeContainer() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpgradeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradeContainer(::grpc::ServerContext* context, const ::cmongoproto::UpgradeContainerReq* request, ::cmongoproto::UpgradeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateContainerModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateContainerModule() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_UpdateContainerModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateContainerModule(::grpc::ServerContext* context, const ::cmongoproto::UpdateContainerModuleReq* request, ::cmongoproto::UpdateContainerModuleRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_HeartBeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::HeartBeatReq, ::cmongoproto::HeartBeatRes>(std::bind(&WithStreamedUnaryMethod_HeartBeat<BaseClass>::StreamedHeartBeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_HeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HeartBeat(::grpc::ServerContext* context, const ::cmongoproto::HeartBeatReq* request, ::cmongoproto::HeartBeatRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::HeartBeatReq,::cmongoproto::HeartBeatRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateContainer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::CreateContainerReq, ::cmongoproto::CreateContainerRes>(std::bind(&WithStreamedUnaryMethod_CreateContainer<BaseClass>::StreamedCreateContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateContainer(::grpc::ServerContext* context, const ::cmongoproto::CreateContainerReq* request, ::cmongoproto::CreateContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::CreateContainerReq,::cmongoproto::CreateContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DestroyContainer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::DestroyContainerReq, ::cmongoproto::DestroyContainerRes>(std::bind(&WithStreamedUnaryMethod_DestroyContainer<BaseClass>::StreamedDestroyContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DestroyContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyContainer(::grpc::ServerContext* context, const ::cmongoproto::DestroyContainerReq* request, ::cmongoproto::DestroyContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::DestroyContainerReq,::cmongoproto::DestroyContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InfoContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InfoContainer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::InfoContainerReq, ::cmongoproto::InfoContainerRes>(std::bind(&WithStreamedUnaryMethod_InfoContainer<BaseClass>::StreamedInfoContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InfoContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InfoContainer(::grpc::ServerContext* context, const ::cmongoproto::InfoContainerReq* request, ::cmongoproto::InfoContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfoContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::InfoContainerReq,::cmongoproto::InfoContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartContainer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::StartContainerReq, ::cmongoproto::StartContainerRes>(std::bind(&WithStreamedUnaryMethod_StartContainer<BaseClass>::StreamedStartContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartContainer(::grpc::ServerContext* context, const ::cmongoproto::StartContainerReq* request, ::cmongoproto::StartContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::StartContainerReq,::cmongoproto::StartContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopContainer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::StopContainerReq, ::cmongoproto::StopContainerRes>(std::bind(&WithStreamedUnaryMethod_StopContainer<BaseClass>::StreamedStopContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopContainer(::grpc::ServerContext* context, const ::cmongoproto::StopContainerReq* request, ::cmongoproto::StopContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::StopContainerReq,::cmongoproto::StopContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RSInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RSInit() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::RSInitReq, ::cmongoproto::RSInitRes>(std::bind(&WithStreamedUnaryMethod_RSInit<BaseClass>::StreamedRSInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RSInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RSInit(::grpc::ServerContext* context, const ::cmongoproto::RSInitReq* request, ::cmongoproto::RSInitRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRSInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::RSInitReq,::cmongoproto::RSInitRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RSStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RSStatus() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::RSStatusReq, ::cmongoproto::RSStatusRes>(std::bind(&WithStreamedUnaryMethod_RSStatus<BaseClass>::StreamedRSStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RSStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RSStatus(::grpc::ServerContext* context, const ::cmongoproto::RSStatusReq* request, ::cmongoproto::RSStatusRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRSStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::RSStatusReq,::cmongoproto::RSStatusRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RSAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RSAdd() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::RSAddReq, ::cmongoproto::RSAddRes>(std::bind(&WithStreamedUnaryMethod_RSAdd<BaseClass>::StreamedRSAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RSAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RSAdd(::grpc::ServerContext* context, const ::cmongoproto::RSAddReq* request, ::cmongoproto::RSAddRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRSAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::RSAddReq,::cmongoproto::RSAddRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RSRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RSRemove() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::RSRemoveReq, ::cmongoproto::RSRemoveRes>(std::bind(&WithStreamedUnaryMethod_RSRemove<BaseClass>::StreamedRSRemove, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RSRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RSRemove(::grpc::ServerContext* context, const ::cmongoproto::RSRemoveReq* request, ::cmongoproto::RSRemoveRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRSRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::RSRemoveReq,::cmongoproto::RSRemoveRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommandContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CommandContainer() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::CommandContainerReq, ::cmongoproto::CommandContainerRes>(std::bind(&WithStreamedUnaryMethod_CommandContainer<BaseClass>::StreamedCommandContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CommandContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommandContainer(::grpc::ServerContext* context, const ::cmongoproto::CommandContainerReq* request, ::cmongoproto::CommandContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommandContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::CommandContainerReq,::cmongoproto::CommandContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResizeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResizeContainer() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::ResizeContainerReq, ::cmongoproto::ResizeContainerRes>(std::bind(&WithStreamedUnaryMethod_ResizeContainer<BaseClass>::StreamedResizeContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResizeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResizeContainer(::grpc::ServerContext* context, const ::cmongoproto::ResizeContainerReq* request, ::cmongoproto::ResizeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResizeContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::ResizeContainerReq,::cmongoproto::ResizeContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpgradeContainer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpgradeContainer() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::UpgradeContainerReq, ::cmongoproto::UpgradeContainerRes>(std::bind(&WithStreamedUnaryMethod_UpgradeContainer<BaseClass>::StreamedUpgradeContainer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpgradeContainer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpgradeContainer(::grpc::ServerContext* context, const ::cmongoproto::UpgradeContainerReq* request, ::cmongoproto::UpgradeContainerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpgradeContainer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::UpgradeContainerReq,::cmongoproto::UpgradeContainerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateContainerModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateContainerModule() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::StreamedUnaryHandler< ::cmongoproto::UpdateContainerModuleReq, ::cmongoproto::UpdateContainerModuleRes>(std::bind(&WithStreamedUnaryMethod_UpdateContainerModule<BaseClass>::StreamedUpdateContainerModule, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateContainerModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateContainerModule(::grpc::ServerContext* context, const ::cmongoproto::UpdateContainerModuleReq* request, ::cmongoproto::UpdateContainerModuleRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateContainerModule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cmongoproto::UpdateContainerModuleReq,::cmongoproto::UpdateContainerModuleRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HeartBeat<WithStreamedUnaryMethod_CreateContainer<WithStreamedUnaryMethod_DestroyContainer<WithStreamedUnaryMethod_InfoContainer<WithStreamedUnaryMethod_StartContainer<WithStreamedUnaryMethod_StopContainer<WithStreamedUnaryMethod_RSInit<WithStreamedUnaryMethod_RSStatus<WithStreamedUnaryMethod_RSAdd<WithStreamedUnaryMethod_RSRemove<WithStreamedUnaryMethod_CommandContainer<WithStreamedUnaryMethod_ResizeContainer<WithStreamedUnaryMethod_UpgradeContainer<WithStreamedUnaryMethod_UpdateContainerModule<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HeartBeat<WithStreamedUnaryMethod_CreateContainer<WithStreamedUnaryMethod_DestroyContainer<WithStreamedUnaryMethod_InfoContainer<WithStreamedUnaryMethod_StartContainer<WithStreamedUnaryMethod_StopContainer<WithStreamedUnaryMethod_RSInit<WithStreamedUnaryMethod_RSStatus<WithStreamedUnaryMethod_RSAdd<WithStreamedUnaryMethod_RSRemove<WithStreamedUnaryMethod_CommandContainer<WithStreamedUnaryMethod_ResizeContainer<WithStreamedUnaryMethod_UpgradeContainer<WithStreamedUnaryMethod_UpdateContainerModule<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace cmongoproto


#endif  // GRPC_cmongo_2fcmongoproto_2fcmongo_2eproto__INCLUDED
