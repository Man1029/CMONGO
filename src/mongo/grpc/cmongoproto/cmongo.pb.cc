// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmongo/cmongoproto/cmongo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mongo/grpc/cmongoproto/cmongo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cmongoproto {
class ReqHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqHeader> {
} _ReqHeader_default_instance_;
class ResHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResHeader> {
} _ResHeader_default_instance_;
class ResourceDescDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResourceDesc> {
} _ResourceDesc_default_instance_;
class HeartBeatReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatReq> {
} _HeartBeatReq_default_instance_;
class HeartBeatResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatRes> {
} _HeartBeatRes_default_instance_;
class MongoDParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MongoDParam> {
} _MongoDParam_default_instance_;
class ConfigParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigParam> {
} _ConfigParam_default_instance_;
class MongoSParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MongoSParam> {
} _MongoSParam_default_instance_;
class ProxyParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProxyParam> {
} _ProxyParam_default_instance_;
class Proxy2ParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proxy2Param> {
} _Proxy2Param_default_instance_;
class DynamoProxyParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynamoProxyParam> {
} _DynamoProxyParam_default_instance_;
class CreateContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateContainerReq> {
  public:
  const ::cmongoproto::MongoDParam* mongod_params_;
  const ::cmongoproto::MongoSParam* mongos_params_;
  const ::cmongoproto::ConfigParam* config_params_;
  const ::cmongoproto::ProxyParam* proxy_params_;
  const ::cmongoproto::Proxy2Param* proxy2_params_;
  const ::cmongoproto::DynamoProxyParam* dynamo_params_;
} _CreateContainerReq_default_instance_;
class PingReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PingReq> {
} _PingReq_default_instance_;
class PingResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PingRes> {
} _PingRes_default_instance_;
class CreateContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateContainerRes> {
} _CreateContainerRes_default_instance_;
class DestroyContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyContainerReq> {
} _DestroyContainerReq_default_instance_;
class DestroyContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyContainerRes> {
} _DestroyContainerRes_default_instance_;
class InfoContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoContainerReq> {
} _InfoContainerReq_default_instance_;
class InfoContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoContainerRes> {
} _InfoContainerRes_default_instance_;
class StartContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartContainerReq> {
} _StartContainerReq_default_instance_;
class StartContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartContainerRes> {
} _StartContainerRes_default_instance_;
class RSInitReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSInitReq> {
} _RSInitReq_default_instance_;
class RSInitResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSInitRes> {
} _RSInitRes_default_instance_;
class RSStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSStatusReq> {
} _RSStatusReq_default_instance_;
class RSStatusResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSStatusRes> {
} _RSStatusRes_default_instance_;
class RSAddReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSAddReq> {
} _RSAddReq_default_instance_;
class RSAddResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSAddRes> {
} _RSAddRes_default_instance_;
class RSRemoveReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSRemoveReq> {
} _RSRemoveReq_default_instance_;
class RSRemoveResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSRemoveRes> {
} _RSRemoveRes_default_instance_;
class StopContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopContainerReq> {
} _StopContainerReq_default_instance_;
class StopContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopContainerRes> {
} _StopContainerRes_default_instance_;
class CommandContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandContainerReq> {
} _CommandContainerReq_default_instance_;
class CommandContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandContainerRes> {
} _CommandContainerRes_default_instance_;
class ResizeContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeContainerReq> {
} _ResizeContainerReq_default_instance_;
class ResizeContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeContainerRes> {
} _ResizeContainerRes_default_instance_;
class UpgradeContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeContainerReq> {
} _UpgradeContainerReq_default_instance_;
class UpgradeContainerResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeContainerRes> {
} _UpgradeContainerRes_default_instance_;
class UpdateContainerModuleReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateContainerModuleReq> {
} _UpdateContainerModuleReq_default_instance_;
class UpdateContainerModuleResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateContainerModuleRes> {
} _UpdateContainerModuleRes_default_instance_;

namespace protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, reqtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, seqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeader, seqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeader, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeader, cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeader, ret_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDesc, cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDesc, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDesc, disk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDesc, network_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, container_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, machine_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRes, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRes, machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRes, containers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRes, running_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoDParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoDParam, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoDParam, rs_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParam, cluster_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoSParam, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MongoSParam, config_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyParam, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyParam, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyParam, endpoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy2Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy2Param, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy2Param, enable_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy2Param, endpoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamoProxyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamoProxyParam, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamoProxyParam, endpoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, mongo_version_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), mongod_params_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), mongos_params_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), config_params_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), proxy_params_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), proxy2_params_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CreateContainerReq_default_instance_), dynamo_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, dynamo_proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, package_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, user_password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerReq, container_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerRes, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateContainerRes, port_used_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyContainerReq, container_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerReq, container_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerRes, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoContainerRes, using__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartContainerReq, container_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitReq, rs_ips_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSInitRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusReq, container_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusRes, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSStatusRes, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddReq, member_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddReq, member_ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSAddRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveReq, member_ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSRemoveRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopContainerReq, container_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerReq, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerReq, quota_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerReq, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeContainerRes, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, ctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, module_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, restart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, package_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleReq, user_password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerModuleRes, header_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ReqHeader)},
  { 8, -1, sizeof(ResHeader)},
  { 16, -1, sizeof(ResourceDesc)},
  { 24, -1, sizeof(HeartBeatReq)},
  { 31, -1, sizeof(HeartBeatRes)},
  { 39, -1, sizeof(MongoDParam)},
  { 45, -1, sizeof(ConfigParam)},
  { 50, -1, sizeof(MongoSParam)},
  { 56, -1, sizeof(ProxyParam)},
  { 63, -1, sizeof(Proxy2Param)},
  { 70, -1, sizeof(DynamoProxyParam)},
  { 76, -1, sizeof(CreateContainerReq)},
  { 97, -1, sizeof(PingReq)},
  { 102, -1, sizeof(PingRes)},
  { 107, -1, sizeof(CreateContainerRes)},
  { 113, -1, sizeof(DestroyContainerReq)},
  { 119, -1, sizeof(DestroyContainerRes)},
  { 124, -1, sizeof(InfoContainerReq)},
  { 130, -1, sizeof(InfoContainerRes)},
  { 136, -1, sizeof(StartContainerReq)},
  { 142, -1, sizeof(StartContainerRes)},
  { 147, -1, sizeof(RSInitReq)},
  { 155, -1, sizeof(RSInitRes)},
  { 160, -1, sizeof(RSStatusReq)},
  { 166, -1, sizeof(RSStatusRes)},
  { 172, -1, sizeof(RSAddReq)},
  { 180, -1, sizeof(RSAddRes)},
  { 185, -1, sizeof(RSRemoveReq)},
  { 192, -1, sizeof(RSRemoveRes)},
  { 197, -1, sizeof(StopContainerReq)},
  { 203, -1, sizeof(StopContainerRes)},
  { 208, -1, sizeof(CommandContainerReq)},
  { 215, -1, sizeof(CommandContainerRes)},
  { 220, -1, sizeof(ResizeContainerReq)},
  { 227, -1, sizeof(ResizeContainerRes)},
  { 232, -1, sizeof(UpgradeContainerReq)},
  { 239, -1, sizeof(UpgradeContainerRes)},
  { 244, -1, sizeof(UpdateContainerModuleReq)},
  { 255, -1, sizeof(UpdateContainerModuleRes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResourceDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MongoDParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MongoSParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProxyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proxy2Param_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynamoProxyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSInitReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSInitRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSStatusRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSAddReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSAddRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSRemoveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSRemoveRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeContainerRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateContainerModuleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateContainerModuleRes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmongo/cmongoproto/cmongo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
  const ::google::protobuf::Descriptor* HeartBeatRes_ContainersEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[4].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HeartBeatRes_ContainersEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::cmongoproto::ResourceDesc,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HeartBeatRes_ContainersEntry_descriptor));
  const ::google::protobuf::Descriptor* HeartBeatRes_RunningEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[5].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HeartBeatRes_RunningEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                HeartBeatRes_RunningEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _ReqHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ResHeader_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ResourceDesc_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _HeartBeatReq_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _HeartBeatRes_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MongoDParam_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ConfigParam_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MongoSParam_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ProxyParam_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Proxy2Param_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _DynamoProxyParam_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CreateContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PingReq_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PingRes_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CreateContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _DestroyContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _DestroyContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _InfoContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _InfoContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _StartContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _StartContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _RSInitReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _RSInitRes_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _RSStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _RSStatusRes_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _RSAddReq_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _RSAddRes_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _RSRemoveReq_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _RSRemoveRes_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _StopContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _StopContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CommandContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CommandContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ResizeContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ResizeContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _UpgradeContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _UpgradeContainerRes_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _UpdateContainerModuleReq_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _UpdateContainerModuleRes_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReqHeader_default_instance_.DefaultConstruct();
  _ResHeader_default_instance_.DefaultConstruct();
  _ResourceDesc_default_instance_.DefaultConstruct();
  _HeartBeatReq_default_instance_.DefaultConstruct();
  _HeartBeatRes_default_instance_.DefaultConstruct();
  _MongoDParam_default_instance_.DefaultConstruct();
  _ConfigParam_default_instance_.DefaultConstruct();
  _MongoSParam_default_instance_.DefaultConstruct();
  _ProxyParam_default_instance_.DefaultConstruct();
  _Proxy2Param_default_instance_.DefaultConstruct();
  _DynamoProxyParam_default_instance_.DefaultConstruct();
  _CreateContainerReq_default_instance_.DefaultConstruct();
  _PingReq_default_instance_.DefaultConstruct();
  _PingRes_default_instance_.DefaultConstruct();
  _CreateContainerRes_default_instance_.DefaultConstruct();
  _DestroyContainerReq_default_instance_.DefaultConstruct();
  _DestroyContainerRes_default_instance_.DefaultConstruct();
  _InfoContainerReq_default_instance_.DefaultConstruct();
  _InfoContainerRes_default_instance_.DefaultConstruct();
  _StartContainerReq_default_instance_.DefaultConstruct();
  _StartContainerRes_default_instance_.DefaultConstruct();
  _RSInitReq_default_instance_.DefaultConstruct();
  _RSInitRes_default_instance_.DefaultConstruct();
  _RSStatusReq_default_instance_.DefaultConstruct();
  _RSStatusRes_default_instance_.DefaultConstruct();
  _RSAddReq_default_instance_.DefaultConstruct();
  _RSAddRes_default_instance_.DefaultConstruct();
  _RSRemoveReq_default_instance_.DefaultConstruct();
  _RSRemoveRes_default_instance_.DefaultConstruct();
  _StopContainerReq_default_instance_.DefaultConstruct();
  _StopContainerRes_default_instance_.DefaultConstruct();
  _CommandContainerReq_default_instance_.DefaultConstruct();
  _CommandContainerRes_default_instance_.DefaultConstruct();
  _ResizeContainerReq_default_instance_.DefaultConstruct();
  _ResizeContainerRes_default_instance_.DefaultConstruct();
  _UpgradeContainerReq_default_instance_.DefaultConstruct();
  _UpgradeContainerRes_default_instance_.DefaultConstruct();
  _UpdateContainerModuleReq_default_instance_.DefaultConstruct();
  _UpdateContainerModuleRes_default_instance_.DefaultConstruct();
  _HeartBeatReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _HeartBeatRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _HeartBeatRes_default_instance_.get_mutable()->machine_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _CreateContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CreateContainerReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _CreateContainerReq_default_instance_.mongod_params_ = const_cast< ::cmongoproto::MongoDParam*>(
      ::cmongoproto::MongoDParam::internal_default_instance());
  _CreateContainerReq_default_instance_.mongos_params_ = const_cast< ::cmongoproto::MongoSParam*>(
      ::cmongoproto::MongoSParam::internal_default_instance());
  _CreateContainerReq_default_instance_.config_params_ = const_cast< ::cmongoproto::ConfigParam*>(
      ::cmongoproto::ConfigParam::internal_default_instance());
  _CreateContainerReq_default_instance_.proxy_params_ = const_cast< ::cmongoproto::ProxyParam*>(
      ::cmongoproto::ProxyParam::internal_default_instance());
  _CreateContainerReq_default_instance_.proxy2_params_ = const_cast< ::cmongoproto::Proxy2Param*>(
      ::cmongoproto::Proxy2Param::internal_default_instance());
  _CreateContainerReq_default_instance_.dynamo_params_ = const_cast< ::cmongoproto::DynamoProxyParam*>(
      ::cmongoproto::DynamoProxyParam::internal_default_instance());
  _PingReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _PingRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CreateContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DestroyContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DestroyContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _InfoContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _InfoContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _InfoContainerRes_default_instance_.get_mutable()->using__ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _StartContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _StartContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RSInitReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RSInitRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RSStatusReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RSStatusRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RSAddReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RSAddRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RSRemoveReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RSRemoveRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _StopContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _StopContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CommandContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CommandContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ResizeContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ResizeContainerReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _ResizeContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _UpgradeContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _UpgradeContainerRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _UpdateContainerModuleReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _UpdateContainerModuleRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\037cmongo/cmongoproto/cmongo.proto\022\013cmong"
      "oproto\"J\n\tReqHeader\022\017\n\007version\030\001 \001(\005\022\017\n\007"
      "reqtype\030\002 \001(\005\022\r\n\005seqid\030\003 \001(\003\022\014\n\004flag\030\004 \001"
      "(\003\"P\n\tResHeader\022\r\n\005seqid\030\001 \001(\003\022\020\n\010ret_co"
      "de\030\002 \001(\005\022\021\n\tcost_time\030\003 \001(\005\022\017\n\007ret_msg\030\004"
      " \001(\t\"J\n\014ResourceDesc\022\013\n\003cpu\030\001 \001(\005\022\016\n\006mem"
      "ory\030\002 \001(\005\022\014\n\004disk\030\003 \001(\005\022\017\n\007network\030\004 \001(\005"
      "\"f\n\014HeartBeatReq\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ReqHeader\022\025\n\rcontainer_num\030\002 \001(\005\022"
      "\027\n\017machine_version\030\003 \001(\005\"\330\002\n\014HeartBeatRe"
      "s\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeade"
      "r\022*\n\007machine\030\002 \001(\0132\031.cmongoproto.Resourc"
      "eDesc\022=\n\ncontainers\030\003 \003(\0132).cmongoproto."
      "HeartBeatRes.ContainersEntry\0227\n\007running\030"
      "\004 \003(\0132&.cmongoproto.HeartBeatRes.Running"
      "Entry\032L\n\017ContainersEntry\022\013\n\003key\030\001 \001(\005\022(\n"
      "\005value\030\002 \001(\0132\031.cmongoproto.ResourceDesc:"
      "\0028\001\032.\n\014RunningEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
      "e\030\002 \001(\005:\0028\001\"4\n\013MongoDParam\022\024\n\014cluster_na"
      "me\030\001 \001(\t\022\017\n\007rs_name\030\002 \001(\t\"#\n\013ConfigParam"
      "\022\024\n\014cluster_name\030\001 \001(\t\"8\n\013MongoSParam\022\024\n"
      "\014cluster_name\030\001 \001(\t\022\023\n\013config_addr\030\002 \001(\t"
      "\">\n\nProxyParam\022\017\n\007rs_name\030\001 \001(\t\022\014\n\004seed\030"
      "\002 \003(\t\022\021\n\tendPoints\030\003 \003(\t\"L\n\013Proxy2Param\022"
      "\024\n\014cluster_name\030\001 \001(\t\022\024\n\014enable_shard\030\002 "
      "\001(\010\022\021\n\tendPoints\030\003 \003(\t\";\n\020DynamoProxyPar"
      "am\022\024\n\014cluster_name\030\001 \001(\t\022\021\n\tendPoints\030\002 "
      "\003(\t\"\242\005\n\022CreateContainerReq\022&\n\006header\030\001 \001"
      "(\0132\026.cmongoproto.ReqHeader\022\024\n\014container_"
      "id\030\002 \001(\005\022.\n\016container_type\030\003 \001(\0162\026.cmong"
      "oproto.MongoType\022(\n\005quota\030\004 \001(\0132\031.cmongo"
      "proto.ResourceDesc\0220\n\rmongo_version\030\005 \001("
      "\0162\031.cmongoproto.MongoVersion\0221\n\rmongod_p"
      "arams\030\006 \001(\0132\030.cmongoproto.MongoDParamH\000\022"
      "1\n\rmongos_params\030\007 \001(\0132\030.cmongoproto.Mon"
      "goSParamH\000\0221\n\rconfig_params\030\010 \001(\0132\030.cmon"
      "goproto.ConfigParamH\000\022/\n\014proxy_params\030\t "
      "\001(\0132\027.cmongoproto.ProxyParamH\000\0221\n\rproxy2"
      "_params\030\n \001(\0132\030.cmongoproto.Proxy2ParamH"
      "\000\0226\n\rdynamo_params\030\013 \001(\0132\035.cmongoproto.D"
      "ynamoProxyParamH\000\022\025\n\rproxy_version\030\022 \001(\t"
      "\022\031\n\021mongod_subversion\030\023 \001(\t\022\034\n\024dynamo_pr"
      "oxy_version\030\024 \001(\t\022\023\n\013package_url\030\025 \001(\t\022\025"
      "\n\ruser_password\030\026 \001(\tB\021\n\017container_param"
      "\"1\n\007PingReq\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ReqHeader\"1\n\007PingRes\022&\n\006header\030\001 \001(\0132\026"
      ".cmongoproto.ResHeader\"O\n\022CreateContaine"
      "rRes\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHe"
      "ader\022\021\n\tport_used\030\002 \001(\005\"S\n\023DestroyContai"
      "nerReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Req"
      "Header\022\024\n\014container_id\030\002 \001(\005\"=\n\023DestroyC"
      "ontainerRes\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ResHeader\"P\n\020InfoContainerReq\022&\n\006heade"
      "r\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n\014conta"
      "iner_id\030\002 \001(\005\"d\n\020InfoContainerRes\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ResHeader\022(\n\005usi"
      "ng\030\002 \001(\0132\031.cmongoproto.ResourceDesc\"Q\n\021S"
      "tartContainerReq\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ReqHeader\022\024\n\014container_id\030\002 \001(\005\";"
      "\n\021StartContainerRes\022&\n\006header\030\001 \001(\0132\026.cm"
      "ongoproto.ResHeader\"j\n\tRSInitReq\022&\n\006head"
      "er\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n\014cont"
      "ainer_id\030\002 \001(\005\022\017\n\007rs_name\030\003 \001(\t\022\016\n\006rs_ip"
      "s\030\004 \003(\t\"3\n\tRSInitRes\022&\n\006header\030\001 \001(\0132\026.c"
      "mongoproto.ResHeader\"K\n\013RSStatusReq\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n\014c"
      "ontainer_id\030\002 \001(\005\"E\n\013RSStatusRes\022&\n\006head"
      "er\030\001 \001(\0132\026.cmongoproto.ResHeader\022\016\n\006resu"
      "lt\030\002 \001(\t\"\211\001\n\010RSAddReq\022&\n\006header\030\001 \001(\0132\026."
      "cmongoproto.ReqHeader\022\024\n\014container_id\030\002 "
      "\001(\005\022,\n\013member_type\030\003 \001(\0162\027.cmongoproto.M"
      "emberType\022\021\n\tmember_ip\030\004 \001(\t\"2\n\010RSAddRes"
      "\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader"
      "\"^\n\013RSRemoveReq\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ReqHeader\022\024\n\014container_id\030\002 \001(\005\022\021\n"
      "\tmember_ip\030\003 \001(\t\"5\n\013RSRemoveRes\022&\n\006heade"
      "r\030\001 \001(\0132\026.cmongoproto.ResHeader\"P\n\020StopC"
      "ontainerReq\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ReqHeader\022\024\n\014container_id\030\002 \001(\005\":\n\020Sto"
      "pContainerRes\022&\n\006header\030\001 \001(\0132\026.cmongopr"
      "oto.ResHeader\"d\n\023CommandContainerReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n\014"
      "container_id\030\002 \001(\005\022\017\n\007command\030\003 \001(\t\"=\n\023C"
      "ommandContainerRes\022&\n\006header\030\001 \001(\0132\026.cmo"
      "ngoproto.ResHeader\"|\n\022ResizeContainerReq"
      "\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader"
      "\022\024\n\014container_id\030\002 \001(\005\022(\n\005quota\030\003 \001(\0132\031."
      "cmongoproto.ResourceDesc\"<\n\022ResizeContai"
      "nerRes\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Res"
      "Header\"a\n\023UpgradeContainerReq\022&\n\006header\030"
      "\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n\014contain"
      "er_id\030\002 \001(\005\022\014\n\004conf\030\003 \001(\t\"=\n\023UpgradeCont"
      "ainerRes\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "esHeader\"\324\001\n\030UpdateContainerModuleReq\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\024\n"
      "\014container_id\030\002 \001(\005\022%\n\005ctype\030\003 \001(\0162\026.cmo"
      "ngoproto.MongoType\022\026\n\016module_version\030\004 \001"
      "(\t\022\017\n\007restart\030\005 \001(\005\022\023\n\013package_url\030\006 \001(\t"
      "\022\025\n\ruser_password\030\007 \001(\t\"B\n\030UpdateContain"
      "erModuleRes\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ResHeader*P\n\014MongoVersion\022\013\n\007MONGO_2\020\000"
      "\022\020\n\014MONGO_3_MMAP\020\001\022\016\n\nMONGO_3_WT\020\002\022\021\n\rMO"
      "NGO_3_ROCKS\020\003*W\n\tMongoType\022\n\n\006MONGOD\020\000\022\n"
      "\n\006MONGOS\020\001\022\n\n\006CONFIG\020\002\022\t\n\005PROXY\020\003\022\n\n\006PRO"
      "XY2\020\004\022\017\n\013DYNAMOPROXY\020\005*/\n\nMemberType\022\t\n\005"
      "SLAVE\020\000\022\013\n\007ARBITER\020\001\022\t\n\005DELAY\020\0022\342\010\n\tCont"
      "ainer\022A\n\tHeartBeat\022\031.cmongoproto.HeartBe"
      "atReq\032\031.cmongoproto.HeartBeatRes\022U\n\017Crea"
      "teContainer\022\037.cmongoproto.CreateContaine"
      "rReq\032\037.cmongoproto.CreateContainerRes\"\000\022"
      "X\n\020DestroyContainer\022 .cmongoproto.Destro"
      "yContainerReq\032 .cmongoproto.DestroyConta"
      "inerRes\"\000\022O\n\rInfoContainer\022\035.cmongoproto"
      ".InfoContainerReq\032\035.cmongoproto.InfoCont"
      "ainerRes\"\000\022R\n\016StartContainer\022\036.cmongopro"
      "to.StartContainerReq\032\036.cmongoproto.Start"
      "ContainerRes\"\000\022O\n\rStopContainer\022\035.cmongo"
      "proto.StopContainerReq\032\035.cmongoproto.Sto"
      "pContainerRes\"\000\022:\n\006RSInit\022\026.cmongoproto."
      "RSInitReq\032\026.cmongoproto.RSInitRes\"\000\022@\n\010R"
      "SStatus\022\030.cmongoproto.RSStatusReq\032\030.cmon"
      "goproto.RSStatusRes\"\000\0227\n\005RSAdd\022\025.cmongop"
      "roto.RSAddReq\032\025.cmongoproto.RSAddRes\"\000\022@"
      "\n\010RSRemove\022\030.cmongoproto.RSRemoveReq\032\030.c"
      "mongoproto.RSRemoveRes\"\000\022X\n\020CommandConta"
      "iner\022 .cmongoproto.CommandContainerReq\032 "
      ".cmongoproto.CommandContainerRes\"\000\022U\n\017Re"
      "sizeContainer\022\037.cmongoproto.ResizeContai"
      "nerReq\032\037.cmongoproto.ResizeContainerRes\""
      "\000\022X\n\020UpgradeContainer\022 .cmongoproto.Upgr"
      "adeContainerReq\032 .cmongoproto.UpgradeCon"
      "tainerRes\"\000\022g\n\025UpdateContainerModule\022%.c"
      "mongoproto.UpdateContainerModuleReq\032%.cm"
      "ongoproto.UpdateContainerModuleRes\"\000b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmongo/cmongoproto/cmongo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto

const ::google::protobuf::EnumDescriptor* MongoVersion_descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_enum_descriptors[0];
}
bool MongoVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MongoType_descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_enum_descriptors[1];
}
bool MongoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MemberType_descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_enum_descriptors[2];
}
bool MemberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeader::kVersionFieldNumber;
const int ReqHeader::kReqtypeFieldNumber;
const int ReqHeader::kSeqidFieldNumber;
const int ReqHeader::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeader::ReqHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ReqHeader)
}
ReqHeader::ReqHeader(const ReqHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&version_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ReqHeader)
}

void ReqHeader::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&version_) + sizeof(flag_));
  _cached_size_ = 0;
}

ReqHeader::~ReqHeader() {
  // @@protoc_insertion_point(destructor:cmongoproto.ReqHeader)
  SharedDtor();
}

void ReqHeader::SharedDtor() {
}

void ReqHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeader::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[0].descriptor;
}

const ReqHeader& ReqHeader::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqHeader* ReqHeader::New(::google::protobuf::Arena* arena) const {
  ReqHeader* n = new ReqHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ReqHeader)
  ::memset(&version_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&version_) + sizeof(flag_));
}

bool ReqHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ReqHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reqtype = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seqid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 flag = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ReqHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ReqHeader)
  return false;
#undef DO_
}

void ReqHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ReqHeader)
  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // int32 reqtype = 2;
  if (this->reqtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reqtype(), output);
  }

  // int64 seqid = 3;
  if (this->seqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seqid(), output);
  }

  // int64 flag = 4;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->flag(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ReqHeader)
}

::google::protobuf::uint8* ReqHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ReqHeader)
  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // int32 reqtype = 2;
  if (this->reqtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reqtype(), target);
  }

  // int64 seqid = 3;
  if (this->seqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seqid(), target);
  }

  // int64 flag = 4;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->flag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ReqHeader)
  return target;
}

size_t ReqHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ReqHeader)
  size_t total_size = 0;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 reqtype = 2;
  if (this->reqtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reqtype());
  }

  // int64 seqid = 3;
  if (this->seqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqid());
  }

  // int64 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ReqHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ReqHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ReqHeader)
    MergeFrom(*source);
  }
}

void ReqHeader::MergeFrom(const ReqHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ReqHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.reqtype() != 0) {
    set_reqtype(from.reqtype());
  }
  if (from.seqid() != 0) {
    set_seqid(from.seqid());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void ReqHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ReqHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeader::CopyFrom(const ReqHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ReqHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeader::IsInitialized() const {
  return true;
}

void ReqHeader::Swap(ReqHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeader::InternalSwap(ReqHeader* other) {
  std::swap(version_, other->version_);
  std::swap(reqtype_, other->reqtype_);
  std::swap(seqid_, other->seqid_);
  std::swap(flag_, other->flag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeader::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHeader

// int32 version = 1;
void ReqHeader::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 ReqHeader::version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ReqHeader.version)
  return version_;
}
void ReqHeader::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ReqHeader.version)
}

// int32 reqtype = 2;
void ReqHeader::clear_reqtype() {
  reqtype_ = 0;
}
::google::protobuf::int32 ReqHeader::reqtype() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ReqHeader.reqtype)
  return reqtype_;
}
void ReqHeader::set_reqtype(::google::protobuf::int32 value) {
  
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ReqHeader.reqtype)
}

// int64 seqid = 3;
void ReqHeader::clear_seqid() {
  seqid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqHeader::seqid() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ReqHeader.seqid)
  return seqid_;
}
void ReqHeader::set_seqid(::google::protobuf::int64 value) {
  
  seqid_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ReqHeader.seqid)
}

// int64 flag = 4;
void ReqHeader::clear_flag() {
  flag_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqHeader::flag() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ReqHeader.flag)
  return flag_;
}
void ReqHeader::set_flag(::google::protobuf::int64 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ReqHeader.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResHeader::kSeqidFieldNumber;
const int ResHeader::kRetCodeFieldNumber;
const int ResHeader::kCostTimeFieldNumber;
const int ResHeader::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResHeader::ResHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ResHeader)
}
ResHeader::ResHeader(const ResHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret_msg().size() > 0) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  ::memcpy(&seqid_, &from.seqid_,
    reinterpret_cast<char*>(&cost_time_) -
    reinterpret_cast<char*>(&seqid_) + sizeof(cost_time_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ResHeader)
}

void ResHeader::SharedCtor() {
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqid_, 0, reinterpret_cast<char*>(&cost_time_) -
    reinterpret_cast<char*>(&seqid_) + sizeof(cost_time_));
  _cached_size_ = 0;
}

ResHeader::~ResHeader() {
  // @@protoc_insertion_point(destructor:cmongoproto.ResHeader)
  SharedDtor();
}

void ResHeader::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResHeader::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[1].descriptor;
}

const ResHeader& ResHeader::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResHeader* ResHeader::New(::google::protobuf::Arena* arena) const {
  ResHeader* n = new ResHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ResHeader)
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqid_, 0, reinterpret_cast<char*>(&cost_time_) -
    reinterpret_cast<char*>(&seqid_) + sizeof(cost_time_));
}

bool ResHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ResHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 seqid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ret_code = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cost_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret_msg = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.ResHeader.ret_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ResHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ResHeader)
  return false;
#undef DO_
}

void ResHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ResHeader)
  // int64 seqid = 1;
  if (this->seqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seqid(), output);
  }

  // int32 ret_code = 2;
  if (this->ret_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // int32 cost_time = 3;
  if (this->cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_time(), output);
  }

  // string ret_msg = 4;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ResHeader.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ret_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ResHeader)
}

::google::protobuf::uint8* ResHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ResHeader)
  // int64 seqid = 1;
  if (this->seqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seqid(), target);
  }

  // int32 ret_code = 2;
  if (this->ret_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // int32 cost_time = 3;
  if (this->cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_time(), target);
  }

  // string ret_msg = 4;
  if (this->ret_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ResHeader.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ret_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ResHeader)
  return target;
}

size_t ResHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ResHeader)
  size_t total_size = 0;

  // string ret_msg = 4;
  if (this->ret_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret_msg());
  }

  // int64 seqid = 1;
  if (this->seqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqid());
  }

  // int32 ret_code = 2;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  // int32 cost_time = 3;
  if (this->cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ResHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ResHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ResHeader)
    MergeFrom(*source);
  }
}

void ResHeader::MergeFrom(const ResHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ResHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ret_msg().size() > 0) {

    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.seqid() != 0) {
    set_seqid(from.seqid());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
  if (from.cost_time() != 0) {
    set_cost_time(from.cost_time());
  }
}

void ResHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ResHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHeader::CopyFrom(const ResHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ResHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeader::IsInitialized() const {
  return true;
}

void ResHeader::Swap(ResHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResHeader::InternalSwap(ResHeader* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(seqid_, other->seqid_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(cost_time_, other->cost_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResHeader::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResHeader

// int64 seqid = 1;
void ResHeader::clear_seqid() {
  seqid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResHeader::seqid() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResHeader.seqid)
  return seqid_;
}
void ResHeader::set_seqid(::google::protobuf::int64 value) {
  
  seqid_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResHeader.seqid)
}

// int32 ret_code = 2;
void ResHeader::clear_ret_code() {
  ret_code_ = 0;
}
::google::protobuf::int32 ResHeader::ret_code() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResHeader.ret_code)
  return ret_code_;
}
void ResHeader::set_ret_code(::google::protobuf::int32 value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResHeader.ret_code)
}

// int32 cost_time = 3;
void ResHeader::clear_cost_time() {
  cost_time_ = 0;
}
::google::protobuf::int32 ResHeader::cost_time() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResHeader.cost_time)
  return cost_time_;
}
void ResHeader::set_cost_time(::google::protobuf::int32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResHeader.cost_time)
}

// string ret_msg = 4;
void ResHeader::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResHeader::ret_msg() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResHeader.ret_msg)
  return ret_msg_.GetNoArena();
}
void ResHeader::set_ret_msg(const ::std::string& value) {
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.ResHeader.ret_msg)
}
#if LANG_CXX11
void ResHeader::set_ret_msg(::std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.ResHeader.ret_msg)
}
#endif
void ResHeader::set_ret_msg(const char* value) {
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.ResHeader.ret_msg)
}
void ResHeader::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.ResHeader.ret_msg)
}
::std::string* ResHeader::mutable_ret_msg() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.ResHeader.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResHeader::release_ret_msg() {
  // @@protoc_insertion_point(field_release:cmongoproto.ResHeader.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResHeader::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ResHeader.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceDesc::kCpuFieldNumber;
const int ResourceDesc::kMemoryFieldNumber;
const int ResourceDesc::kDiskFieldNumber;
const int ResourceDesc::kNetworkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceDesc::ResourceDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ResourceDesc)
}
ResourceDesc::ResourceDesc(const ResourceDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    reinterpret_cast<char*>(&network_) -
    reinterpret_cast<char*>(&cpu_) + sizeof(network_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ResourceDesc)
}

void ResourceDesc::SharedCtor() {
  ::memset(&cpu_, 0, reinterpret_cast<char*>(&network_) -
    reinterpret_cast<char*>(&cpu_) + sizeof(network_));
  _cached_size_ = 0;
}

ResourceDesc::~ResourceDesc() {
  // @@protoc_insertion_point(destructor:cmongoproto.ResourceDesc)
  SharedDtor();
}

void ResourceDesc::SharedDtor() {
}

void ResourceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceDesc::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[2].descriptor;
}

const ResourceDesc& ResourceDesc::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResourceDesc* ResourceDesc::New(::google::protobuf::Arena* arena) const {
  ResourceDesc* n = new ResourceDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ResourceDesc)
  ::memset(&cpu_, 0, reinterpret_cast<char*>(&network_) -
    reinterpret_cast<char*>(&cpu_) + sizeof(network_));
}

bool ResourceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ResourceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cpu = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memory = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 disk = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 network = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ResourceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ResourceDesc)
  return false;
#undef DO_
}

void ResourceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ResourceDesc)
  // int32 cpu = 1;
  if (this->cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cpu(), output);
  }

  // int32 memory = 2;
  if (this->memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->memory(), output);
  }

  // int32 disk = 3;
  if (this->disk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->disk(), output);
  }

  // int32 network = 4;
  if (this->network() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->network(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ResourceDesc)
}

::google::protobuf::uint8* ResourceDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ResourceDesc)
  // int32 cpu = 1;
  if (this->cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cpu(), target);
  }

  // int32 memory = 2;
  if (this->memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->memory(), target);
  }

  // int32 disk = 3;
  if (this->disk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->disk(), target);
  }

  // int32 network = 4;
  if (this->network() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->network(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ResourceDesc)
  return target;
}

size_t ResourceDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ResourceDesc)
  size_t total_size = 0;

  // int32 cpu = 1;
  if (this->cpu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu());
  }

  // int32 memory = 2;
  if (this->memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memory());
  }

  // int32 disk = 3;
  if (this->disk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk());
  }

  // int32 network = 4;
  if (this->network() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->network());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ResourceDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ResourceDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ResourceDesc)
    MergeFrom(*source);
  }
}

void ResourceDesc::MergeFrom(const ResourceDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ResourceDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cpu() != 0) {
    set_cpu(from.cpu());
  }
  if (from.memory() != 0) {
    set_memory(from.memory());
  }
  if (from.disk() != 0) {
    set_disk(from.disk());
  }
  if (from.network() != 0) {
    set_network(from.network());
  }
}

void ResourceDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ResourceDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDesc::CopyFrom(const ResourceDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ResourceDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDesc::IsInitialized() const {
  return true;
}

void ResourceDesc::Swap(ResourceDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceDesc::InternalSwap(ResourceDesc* other) {
  std::swap(cpu_, other->cpu_);
  std::swap(memory_, other->memory_);
  std::swap(disk_, other->disk_);
  std::swap(network_, other->network_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceDesc::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDesc

// int32 cpu = 1;
void ResourceDesc::clear_cpu() {
  cpu_ = 0;
}
::google::protobuf::int32 ResourceDesc::cpu() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResourceDesc.cpu)
  return cpu_;
}
void ResourceDesc::set_cpu(::google::protobuf::int32 value) {
  
  cpu_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResourceDesc.cpu)
}

// int32 memory = 2;
void ResourceDesc::clear_memory() {
  memory_ = 0;
}
::google::protobuf::int32 ResourceDesc::memory() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResourceDesc.memory)
  return memory_;
}
void ResourceDesc::set_memory(::google::protobuf::int32 value) {
  
  memory_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResourceDesc.memory)
}

// int32 disk = 3;
void ResourceDesc::clear_disk() {
  disk_ = 0;
}
::google::protobuf::int32 ResourceDesc::disk() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResourceDesc.disk)
  return disk_;
}
void ResourceDesc::set_disk(::google::protobuf::int32 value) {
  
  disk_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResourceDesc.disk)
}

// int32 network = 4;
void ResourceDesc::clear_network() {
  network_ = 0;
}
::google::protobuf::int32 ResourceDesc::network() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResourceDesc.network)
  return network_;
}
void ResourceDesc::set_network(::google::protobuf::int32 value) {
  
  network_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResourceDesc.network)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatReq::kHeaderFieldNumber;
const int HeartBeatReq::kContainerNumFieldNumber;
const int HeartBeatReq::kMachineVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatReq::HeartBeatReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.HeartBeatReq)
}
HeartBeatReq::HeartBeatReq(const HeartBeatReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&container_num_, &from.container_num_,
    reinterpret_cast<char*>(&machine_version_) -
    reinterpret_cast<char*>(&container_num_) + sizeof(machine_version_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.HeartBeatReq)
}

void HeartBeatReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&machine_version_) -
    reinterpret_cast<char*>(&header_) + sizeof(machine_version_));
  _cached_size_ = 0;
}

HeartBeatReq::~HeartBeatReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.HeartBeatReq)
  SharedDtor();
}

void HeartBeatReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void HeartBeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[3].descriptor;
}

const HeartBeatReq& HeartBeatReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatReq* HeartBeatReq::New(::google::protobuf::Arena* arena) const {
  HeartBeatReq* n = new HeartBeatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.HeartBeatReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&container_num_, 0, reinterpret_cast<char*>(&machine_version_) -
    reinterpret_cast<char*>(&container_num_) + sizeof(machine_version_));
}

bool HeartBeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.HeartBeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_num = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 machine_version = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.HeartBeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.HeartBeatReq)
  return false;
#undef DO_
}

void HeartBeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.HeartBeatReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_num = 2;
  if (this->container_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_num(), output);
  }

  // int32 machine_version = 3;
  if (this->machine_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->machine_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.HeartBeatReq)
}

::google::protobuf::uint8* HeartBeatReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.HeartBeatReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_num = 2;
  if (this->container_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_num(), target);
  }

  // int32 machine_version = 3;
  if (this->machine_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->machine_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.HeartBeatReq)
  return target;
}

size_t HeartBeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.HeartBeatReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_num = 2;
  if (this->container_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_num());
  }

  // int32 machine_version = 3;
  if (this->machine_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.HeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.HeartBeatReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.HeartBeatReq)
    MergeFrom(*source);
  }
}

void HeartBeatReq::MergeFrom(const HeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.HeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_num() != 0) {
    set_container_num(from.container_num());
  }
  if (from.machine_version() != 0) {
    set_machine_version(from.machine_version());
  }
}

void HeartBeatReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.HeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatReq::CopyFrom(const HeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.HeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReq::IsInitialized() const {
  return true;
}

void HeartBeatReq::Swap(HeartBeatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatReq::InternalSwap(HeartBeatReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_num_, other->container_num_);
  std::swap(machine_version_, other->machine_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatReq

// .cmongoproto.ReqHeader header = 1;
bool HeartBeatReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void HeartBeatReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& HeartBeatReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.HeartBeatReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* HeartBeatReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.HeartBeatReq.header)
  return header_;
}
::cmongoproto::ReqHeader* HeartBeatReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.HeartBeatReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void HeartBeatReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.HeartBeatReq.header)
}

// int32 container_num = 2;
void HeartBeatReq::clear_container_num() {
  container_num_ = 0;
}
::google::protobuf::int32 HeartBeatReq::container_num() const {
  // @@protoc_insertion_point(field_get:cmongoproto.HeartBeatReq.container_num)
  return container_num_;
}
void HeartBeatReq::set_container_num(::google::protobuf::int32 value) {
  
  container_num_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.HeartBeatReq.container_num)
}

// int32 machine_version = 3;
void HeartBeatReq::clear_machine_version() {
  machine_version_ = 0;
}
::google::protobuf::int32 HeartBeatReq::machine_version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.HeartBeatReq.machine_version)
  return machine_version_;
}
void HeartBeatReq::set_machine_version(::google::protobuf::int32 value) {
  
  machine_version_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.HeartBeatReq.machine_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatRes::kHeaderFieldNumber;
const int HeartBeatRes::kMachineFieldNumber;
const int HeartBeatRes::kContainersFieldNumber;
const int HeartBeatRes::kRunningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatRes::HeartBeatRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.HeartBeatRes)
}
HeartBeatRes::HeartBeatRes(const HeartBeatRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& HeartBeatRes_ContainersEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[4].descriptor;
  const ::google::protobuf::Descriptor*& HeartBeatRes_RunningEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[5].descriptor;
  containers_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce);
  containers_.SetEntryDescriptor(
      &HeartBeatRes_ContainersEntry_descriptor);
  containers_.MergeFrom(from.containers_);
  running_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce);
  running_.SetEntryDescriptor(
      &HeartBeatRes_RunningEntry_descriptor);
  running_.MergeFrom(from.running_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_machine()) {
    machine_ = new ::cmongoproto::ResourceDesc(*from.machine_);
  } else {
    machine_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.HeartBeatRes)
}

void HeartBeatRes::SharedCtor() {
  const ::google::protobuf::Descriptor*& HeartBeatRes_ContainersEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[4].descriptor;
  const ::google::protobuf::Descriptor*& HeartBeatRes_RunningEntry_descriptor = protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[5].descriptor;
  containers_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce);
  containers_.SetEntryDescriptor(
      &HeartBeatRes_ContainersEntry_descriptor);
  running_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce);
  running_.SetEntryDescriptor(
      &HeartBeatRes_RunningEntry_descriptor);
  ::memset(&header_, 0, reinterpret_cast<char*>(&machine_) -
    reinterpret_cast<char*>(&header_) + sizeof(machine_));
  _cached_size_ = 0;
}

HeartBeatRes::~HeartBeatRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.HeartBeatRes)
  SharedDtor();
}

void HeartBeatRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete machine_;
  }
}

void HeartBeatRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[6].descriptor;
}

const HeartBeatRes& HeartBeatRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatRes* HeartBeatRes::New(::google::protobuf::Arena* arena) const {
  HeartBeatRes* n = new HeartBeatRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.HeartBeatRes)
  containers_.Clear();
  running_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && machine_ != NULL) {
    delete machine_;
  }
  machine_ = NULL;
}

bool HeartBeatRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.HeartBeatRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc machine = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .cmongoproto.ResourceDesc> containers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          HeartBeatRes_ContainersEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::cmongoproto::ResourceDesc,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc > > parser(&containers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int32> running = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          HeartBeatRes_RunningEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&running_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.HeartBeatRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.HeartBeatRes)
  return false;
#undef DO_
}

void HeartBeatRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.HeartBeatRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .cmongoproto.ResourceDesc machine = 2;
  if (this->has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->machine_, output);
  }

  // map<int32, .cmongoproto.ResourceDesc> containers = 3;
  if (!this->containers().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->containers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->containers().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_iterator
          it = this->containers().begin();
          it != this->containers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HeartBeatRes_ContainersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(containers_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<HeartBeatRes_ContainersEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_iterator
          it = this->containers().begin();
          it != this->containers().end(); ++it) {
        entry.reset(containers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<int32, int32> running = 4;
  if (!this->running().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->running().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->running().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->running().begin();
          it != this->running().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HeartBeatRes_RunningEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(running_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<HeartBeatRes_RunningEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->running().begin();
          it != this->running().end(); ++it) {
        entry.reset(running_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.HeartBeatRes)
}

::google::protobuf::uint8* HeartBeatRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.HeartBeatRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .cmongoproto.ResourceDesc machine = 2;
  if (this->has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->machine_, false, target);
  }

  // map<int32, .cmongoproto.ResourceDesc> containers = 3;
  if (!this->containers().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->containers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->containers().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_iterator
          it = this->containers().begin();
          it != this->containers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HeartBeatRes_ContainersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(containers_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<HeartBeatRes_ContainersEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_iterator
          it = this->containers().begin();
          it != this->containers().end(); ++it) {
        entry.reset(containers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int32> running = 4;
  if (!this->running().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->running().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->running().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->running().begin();
          it != this->running().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HeartBeatRes_RunningEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(running_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<HeartBeatRes_RunningEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->running().begin();
          it != this->running().end(); ++it) {
        entry.reset(running_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.HeartBeatRes)
  return target;
}

size_t HeartBeatRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.HeartBeatRes)
  size_t total_size = 0;

  // map<int32, .cmongoproto.ResourceDesc> containers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->containers_size());
  {
    ::google::protobuf::scoped_ptr<HeartBeatRes_ContainersEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >::const_iterator
        it = this->containers().begin();
        it != this->containers().end(); ++it) {
      entry.reset(containers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int32> running = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->running_size());
  {
    ::google::protobuf::scoped_ptr<HeartBeatRes_RunningEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->running().begin();
        it != this->running().end(); ++it) {
      entry.reset(running_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc machine = 2;
  if (this->has_machine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->machine_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.HeartBeatRes)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.HeartBeatRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.HeartBeatRes)
    MergeFrom(*source);
  }
}

void HeartBeatRes::MergeFrom(const HeartBeatRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.HeartBeatRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  containers_.MergeFrom(from.containers_);
  running_.MergeFrom(from.running_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_machine()) {
    mutable_machine()->::cmongoproto::ResourceDesc::MergeFrom(from.machine());
  }
}

void HeartBeatRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.HeartBeatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRes::CopyFrom(const HeartBeatRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.HeartBeatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRes::IsInitialized() const {
  return true;
}

void HeartBeatRes::Swap(HeartBeatRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatRes::InternalSwap(HeartBeatRes* other) {
  containers_.Swap(&other->containers_);
  running_.Swap(&other->running_);
  std::swap(header_, other->header_);
  std::swap(machine_, other->machine_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatRes

// .cmongoproto.ResHeader header = 1;
bool HeartBeatRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void HeartBeatRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& HeartBeatRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.HeartBeatRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* HeartBeatRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.HeartBeatRes.header)
  return header_;
}
::cmongoproto::ResHeader* HeartBeatRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.HeartBeatRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void HeartBeatRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.HeartBeatRes.header)
}

// .cmongoproto.ResourceDesc machine = 2;
bool HeartBeatRes::has_machine() const {
  return this != internal_default_instance() && machine_ != NULL;
}
void HeartBeatRes::clear_machine() {
  if (GetArenaNoVirtual() == NULL && machine_ != NULL) delete machine_;
  machine_ = NULL;
}
const ::cmongoproto::ResourceDesc& HeartBeatRes::machine() const {
  // @@protoc_insertion_point(field_get:cmongoproto.HeartBeatRes.machine)
  return machine_ != NULL ? *machine_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* HeartBeatRes::mutable_machine() {
  
  if (machine_ == NULL) {
    machine_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.HeartBeatRes.machine)
  return machine_;
}
::cmongoproto::ResourceDesc* HeartBeatRes::release_machine() {
  // @@protoc_insertion_point(field_release:cmongoproto.HeartBeatRes.machine)
  
  ::cmongoproto::ResourceDesc* temp = machine_;
  machine_ = NULL;
  return temp;
}
void HeartBeatRes::set_allocated_machine(::cmongoproto::ResourceDesc* machine) {
  delete machine_;
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.HeartBeatRes.machine)
}

// map<int32, .cmongoproto.ResourceDesc> containers = 3;
int HeartBeatRes::containers_size() const {
  return containers_.size();
}
void HeartBeatRes::clear_containers() {
  containers_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >&
HeartBeatRes::containers() const {
  // @@protoc_insertion_point(field_map:cmongoproto.HeartBeatRes.containers)
  return containers_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::cmongoproto::ResourceDesc >*
HeartBeatRes::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_map:cmongoproto.HeartBeatRes.containers)
  return containers_.MutableMap();
}

// map<int32, int32> running = 4;
int HeartBeatRes::running_size() const {
  return running_.size();
}
void HeartBeatRes::clear_running() {
  running_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
HeartBeatRes::running() const {
  // @@protoc_insertion_point(field_map:cmongoproto.HeartBeatRes.running)
  return running_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
HeartBeatRes::mutable_running() {
  // @@protoc_insertion_point(field_mutable_map:cmongoproto.HeartBeatRes.running)
  return running_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoDParam::kClusterNameFieldNumber;
const int MongoDParam::kRsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoDParam::MongoDParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.MongoDParam)
}
MongoDParam::MongoDParam(const MongoDParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.MongoDParam)
}

void MongoDParam::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MongoDParam::~MongoDParam() {
  // @@protoc_insertion_point(destructor:cmongoproto.MongoDParam)
  SharedDtor();
}

void MongoDParam::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MongoDParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoDParam::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[7].descriptor;
}

const MongoDParam& MongoDParam::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

MongoDParam* MongoDParam::New(::google::protobuf::Arena* arena) const {
  MongoDParam* n = new MongoDParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MongoDParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.MongoDParam)
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MongoDParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.MongoDParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.MongoDParam.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.MongoDParam.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.MongoDParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.MongoDParam)
  return false;
#undef DO_
}

void MongoDParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.MongoDParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoDParam.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // string rs_name = 2;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoDParam.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rs_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.MongoDParam)
}

::google::protobuf::uint8* MongoDParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.MongoDParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoDParam.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // string rs_name = 2;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoDParam.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rs_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.MongoDParam)
  return target;
}

size_t MongoDParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.MongoDParam)
  size_t total_size = 0;

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string rs_name = 2;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoDParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.MongoDParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoDParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoDParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.MongoDParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.MongoDParam)
    MergeFrom(*source);
  }
}

void MongoDParam::MergeFrom(const MongoDParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.MongoDParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
}

void MongoDParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.MongoDParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoDParam::CopyFrom(const MongoDParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.MongoDParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoDParam::IsInitialized() const {
  return true;
}

void MongoDParam::Swap(MongoDParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoDParam::InternalSwap(MongoDParam* other) {
  cluster_name_.Swap(&other->cluster_name_);
  rs_name_.Swap(&other->rs_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MongoDParam::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MongoDParam

// string cluster_name = 1;
void MongoDParam::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MongoDParam::cluster_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.MongoDParam.cluster_name)
  return cluster_name_.GetNoArena();
}
void MongoDParam::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.MongoDParam.cluster_name)
}
#if LANG_CXX11
void MongoDParam::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.MongoDParam.cluster_name)
}
#endif
void MongoDParam::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.MongoDParam.cluster_name)
}
void MongoDParam::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.MongoDParam.cluster_name)
}
::std::string* MongoDParam::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.MongoDParam.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MongoDParam::release_cluster_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.MongoDParam.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MongoDParam::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.MongoDParam.cluster_name)
}

// string rs_name = 2;
void MongoDParam::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MongoDParam::rs_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.MongoDParam.rs_name)
  return rs_name_.GetNoArena();
}
void MongoDParam::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.MongoDParam.rs_name)
}
#if LANG_CXX11
void MongoDParam::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.MongoDParam.rs_name)
}
#endif
void MongoDParam::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.MongoDParam.rs_name)
}
void MongoDParam::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.MongoDParam.rs_name)
}
::std::string* MongoDParam::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.MongoDParam.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MongoDParam::release_rs_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.MongoDParam.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MongoDParam::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.MongoDParam.rs_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigParam::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigParam::ConfigParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ConfigParam)
}
ConfigParam::ConfigParam(const ConfigParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ConfigParam)
}

void ConfigParam::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigParam::~ConfigParam() {
  // @@protoc_insertion_point(destructor:cmongoproto.ConfigParam)
  SharedDtor();
}

void ConfigParam::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigParam::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[8].descriptor;
}

const ConfigParam& ConfigParam::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigParam* ConfigParam::New(::google::protobuf::Arena* arena) const {
  ConfigParam* n = new ConfigParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ConfigParam)
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ConfigParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.ConfigParam.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ConfigParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ConfigParam)
  return false;
#undef DO_
}

void ConfigParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ConfigParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ConfigParam.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ConfigParam)
}

::google::protobuf::uint8* ConfigParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ConfigParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ConfigParam.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ConfigParam)
  return target;
}

size_t ConfigParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ConfigParam)
  size_t total_size = 0;

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ConfigParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ConfigParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ConfigParam)
    MergeFrom(*source);
  }
}

void ConfigParam::MergeFrom(const ConfigParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ConfigParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
}

void ConfigParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ConfigParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigParam::CopyFrom(const ConfigParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ConfigParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigParam::IsInitialized() const {
  return true;
}

void ConfigParam::Swap(ConfigParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigParam::InternalSwap(ConfigParam* other) {
  cluster_name_.Swap(&other->cluster_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigParam::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigParam

// string cluster_name = 1;
void ConfigParam::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigParam::cluster_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ConfigParam.cluster_name)
  return cluster_name_.GetNoArena();
}
void ConfigParam::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.ConfigParam.cluster_name)
}
#if LANG_CXX11
void ConfigParam::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.ConfigParam.cluster_name)
}
#endif
void ConfigParam::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.ConfigParam.cluster_name)
}
void ConfigParam::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.ConfigParam.cluster_name)
}
::std::string* ConfigParam::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.ConfigParam.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigParam::release_cluster_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.ConfigParam.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigParam::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ConfigParam.cluster_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoSParam::kClusterNameFieldNumber;
const int MongoSParam::kConfigAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoSParam::MongoSParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.MongoSParam)
}
MongoSParam::MongoSParam(const MongoSParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  config_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_addr().size() > 0) {
    config_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.MongoSParam)
}

void MongoSParam::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MongoSParam::~MongoSParam() {
  // @@protoc_insertion_point(destructor:cmongoproto.MongoSParam)
  SharedDtor();
}

void MongoSParam::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MongoSParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MongoSParam::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[9].descriptor;
}

const MongoSParam& MongoSParam::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

MongoSParam* MongoSParam::New(::google::protobuf::Arena* arena) const {
  MongoSParam* n = new MongoSParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MongoSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.MongoSParam)
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MongoSParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.MongoSParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.MongoSParam.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_addr().data(), this->config_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.MongoSParam.config_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.MongoSParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.MongoSParam)
  return false;
#undef DO_
}

void MongoSParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.MongoSParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoSParam.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // string config_addr = 2;
  if (this->config_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_addr().data(), this->config_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoSParam.config_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_addr(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.MongoSParam)
}

::google::protobuf::uint8* MongoSParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.MongoSParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoSParam.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // string config_addr = 2;
  if (this->config_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_addr().data(), this->config_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.MongoSParam.config_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config_addr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.MongoSParam)
  return target;
}

size_t MongoSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.MongoSParam)
  size_t total_size = 0;

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string config_addr = 2;
  if (this->config_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MongoSParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.MongoSParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoSParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoSParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.MongoSParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.MongoSParam)
    MergeFrom(*source);
  }
}

void MongoSParam::MergeFrom(const MongoSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.MongoSParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.config_addr().size() > 0) {

    config_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_addr_);
  }
}

void MongoSParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.MongoSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoSParam::CopyFrom(const MongoSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.MongoSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoSParam::IsInitialized() const {
  return true;
}

void MongoSParam::Swap(MongoSParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoSParam::InternalSwap(MongoSParam* other) {
  cluster_name_.Swap(&other->cluster_name_);
  config_addr_.Swap(&other->config_addr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MongoSParam::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MongoSParam

// string cluster_name = 1;
void MongoSParam::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MongoSParam::cluster_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.MongoSParam.cluster_name)
  return cluster_name_.GetNoArena();
}
void MongoSParam::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.MongoSParam.cluster_name)
}
#if LANG_CXX11
void MongoSParam::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.MongoSParam.cluster_name)
}
#endif
void MongoSParam::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.MongoSParam.cluster_name)
}
void MongoSParam::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.MongoSParam.cluster_name)
}
::std::string* MongoSParam::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.MongoSParam.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MongoSParam::release_cluster_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.MongoSParam.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MongoSParam::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.MongoSParam.cluster_name)
}

// string config_addr = 2;
void MongoSParam::clear_config_addr() {
  config_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MongoSParam::config_addr() const {
  // @@protoc_insertion_point(field_get:cmongoproto.MongoSParam.config_addr)
  return config_addr_.GetNoArena();
}
void MongoSParam::set_config_addr(const ::std::string& value) {
  
  config_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.MongoSParam.config_addr)
}
#if LANG_CXX11
void MongoSParam::set_config_addr(::std::string&& value) {
  
  config_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.MongoSParam.config_addr)
}
#endif
void MongoSParam::set_config_addr(const char* value) {
  
  config_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.MongoSParam.config_addr)
}
void MongoSParam::set_config_addr(const char* value, size_t size) {
  
  config_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.MongoSParam.config_addr)
}
::std::string* MongoSParam::mutable_config_addr() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.MongoSParam.config_addr)
  return config_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MongoSParam::release_config_addr() {
  // @@protoc_insertion_point(field_release:cmongoproto.MongoSParam.config_addr)
  
  return config_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MongoSParam::set_allocated_config_addr(::std::string* config_addr) {
  if (config_addr != NULL) {
    
  } else {
    
  }
  config_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_addr);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.MongoSParam.config_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProxyParam::kRsNameFieldNumber;
const int ProxyParam::kSeedFieldNumber;
const int ProxyParam::kEndPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProxyParam::ProxyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ProxyParam)
}
ProxyParam::ProxyParam(const ProxyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      seed_(from.seed_),
      endpoints_(from.endpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ProxyParam)
}

void ProxyParam::SharedCtor() {
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProxyParam::~ProxyParam() {
  // @@protoc_insertion_point(destructor:cmongoproto.ProxyParam)
  SharedDtor();
}

void ProxyParam::SharedDtor() {
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProxyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyParam::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[10].descriptor;
}

const ProxyParam& ProxyParam::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProxyParam* ProxyParam::New(::google::protobuf::Arena* arena) const {
  ProxyParam* n = new ProxyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProxyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ProxyParam)
  seed_.Clear();
  endpoints_.Clear();
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProxyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ProxyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rs_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.ProxyParam.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string seed = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_seed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seed(this->seed_size() - 1).data(),
            this->seed(this->seed_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.ProxyParam.seed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string endPoints = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endpoints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoints(this->endpoints_size() - 1).data(),
            this->endpoints(this->endpoints_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.ProxyParam.endPoints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ProxyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ProxyParam)
  return false;
#undef DO_
}

void ProxyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ProxyParam)
  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rs_name(), output);
  }

  // repeated string seed = 2;
  for (int i = 0; i < this->seed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seed(i).data(), this->seed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.seed");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seed(i), output);
  }

  // repeated string endPoints = 3;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.endPoints");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ProxyParam)
}

::google::protobuf::uint8* ProxyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ProxyParam)
  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rs_name(), target);
  }

  // repeated string seed = 2;
  for (int i = 0; i < this->seed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seed(i).data(), this->seed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.seed");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->seed(i), target);
  }

  // repeated string endPoints = 3;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.ProxyParam.endPoints");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->endpoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ProxyParam)
  return target;
}

size_t ProxyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ProxyParam)
  size_t total_size = 0;

  // repeated string seed = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->seed_size());
  for (int i = 0; i < this->seed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->seed(i));
  }

  // repeated string endPoints = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->endpoints_size());
  for (int i = 0; i < this->endpoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endpoints(i));
  }

  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ProxyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProxyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ProxyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ProxyParam)
    MergeFrom(*source);
  }
}

void ProxyParam::MergeFrom(const ProxyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ProxyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seed_.MergeFrom(from.seed_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
}

void ProxyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ProxyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyParam::CopyFrom(const ProxyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ProxyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyParam::IsInitialized() const {
  return true;
}

void ProxyParam::Swap(ProxyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProxyParam::InternalSwap(ProxyParam* other) {
  seed_.UnsafeArenaSwap(&other->seed_);
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  rs_name_.Swap(&other->rs_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProxyParam::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyParam

// string rs_name = 1;
void ProxyParam::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyParam::rs_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ProxyParam.rs_name)
  return rs_name_.GetNoArena();
}
void ProxyParam::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.ProxyParam.rs_name)
}
#if LANG_CXX11
void ProxyParam::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.ProxyParam.rs_name)
}
#endif
void ProxyParam::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.ProxyParam.rs_name)
}
void ProxyParam::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.ProxyParam.rs_name)
}
::std::string* ProxyParam::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.ProxyParam.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyParam::release_rs_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.ProxyParam.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyParam::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ProxyParam.rs_name)
}

// repeated string seed = 2;
int ProxyParam::seed_size() const {
  return seed_.size();
}
void ProxyParam::clear_seed() {
  seed_.Clear();
}
const ::std::string& ProxyParam::seed(int index) const {
  // @@protoc_insertion_point(field_get:cmongoproto.ProxyParam.seed)
  return seed_.Get(index);
}
::std::string* ProxyParam::mutable_seed(int index) {
  // @@protoc_insertion_point(field_mutable:cmongoproto.ProxyParam.seed)
  return seed_.Mutable(index);
}
void ProxyParam::set_seed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmongoproto.ProxyParam.seed)
  seed_.Mutable(index)->assign(value);
}
void ProxyParam::set_seed(int index, const char* value) {
  seed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmongoproto.ProxyParam.seed)
}
void ProxyParam::set_seed(int index, const char* value, size_t size) {
  seed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.ProxyParam.seed)
}
::std::string* ProxyParam::add_seed() {
  // @@protoc_insertion_point(field_add_mutable:cmongoproto.ProxyParam.seed)
  return seed_.Add();
}
void ProxyParam::add_seed(const ::std::string& value) {
  seed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmongoproto.ProxyParam.seed)
}
void ProxyParam::add_seed(const char* value) {
  seed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmongoproto.ProxyParam.seed)
}
void ProxyParam::add_seed(const char* value, size_t size) {
  seed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmongoproto.ProxyParam.seed)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProxyParam::seed() const {
  // @@protoc_insertion_point(field_list:cmongoproto.ProxyParam.seed)
  return seed_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProxyParam::mutable_seed() {
  // @@protoc_insertion_point(field_mutable_list:cmongoproto.ProxyParam.seed)
  return &seed_;
}

// repeated string endPoints = 3;
int ProxyParam::endpoints_size() const {
  return endpoints_.size();
}
void ProxyParam::clear_endpoints() {
  endpoints_.Clear();
}
const ::std::string& ProxyParam::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:cmongoproto.ProxyParam.endPoints)
  return endpoints_.Get(index);
}
::std::string* ProxyParam::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:cmongoproto.ProxyParam.endPoints)
  return endpoints_.Mutable(index);
}
void ProxyParam::set_endpoints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmongoproto.ProxyParam.endPoints)
  endpoints_.Mutable(index)->assign(value);
}
void ProxyParam::set_endpoints(int index, const char* value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmongoproto.ProxyParam.endPoints)
}
void ProxyParam::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.ProxyParam.endPoints)
}
::std::string* ProxyParam::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:cmongoproto.ProxyParam.endPoints)
  return endpoints_.Add();
}
void ProxyParam::add_endpoints(const ::std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmongoproto.ProxyParam.endPoints)
}
void ProxyParam::add_endpoints(const char* value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmongoproto.ProxyParam.endPoints)
}
void ProxyParam::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmongoproto.ProxyParam.endPoints)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProxyParam::endpoints() const {
  // @@protoc_insertion_point(field_list:cmongoproto.ProxyParam.endPoints)
  return endpoints_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProxyParam::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:cmongoproto.ProxyParam.endPoints)
  return &endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proxy2Param::kClusterNameFieldNumber;
const int Proxy2Param::kEnableShardFieldNumber;
const int Proxy2Param::kEndPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proxy2Param::Proxy2Param()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.Proxy2Param)
}
Proxy2Param::Proxy2Param(const Proxy2Param& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      endpoints_(from.endpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  enable_shard_ = from.enable_shard_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.Proxy2Param)
}

void Proxy2Param::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_shard_ = false;
  _cached_size_ = 0;
}

Proxy2Param::~Proxy2Param() {
  // @@protoc_insertion_point(destructor:cmongoproto.Proxy2Param)
  SharedDtor();
}

void Proxy2Param::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Proxy2Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proxy2Param::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[11].descriptor;
}

const Proxy2Param& Proxy2Param::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proxy2Param* Proxy2Param::New(::google::protobuf::Arena* arena) const {
  Proxy2Param* n = new Proxy2Param;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proxy2Param::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.Proxy2Param)
  endpoints_.Clear();
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_shard_ = false;
}

bool Proxy2Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.Proxy2Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.Proxy2Param.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_shard = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string endPoints = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endpoints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoints(this->endpoints_size() - 1).data(),
            this->endpoints(this->endpoints_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.Proxy2Param.endPoints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.Proxy2Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.Proxy2Param)
  return false;
#undef DO_
}

void Proxy2Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.Proxy2Param)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.Proxy2Param.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // bool enable_shard = 2;
  if (this->enable_shard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_shard(), output);
  }

  // repeated string endPoints = 3;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.Proxy2Param.endPoints");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.Proxy2Param)
}

::google::protobuf::uint8* Proxy2Param::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.Proxy2Param)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.Proxy2Param.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // bool enable_shard = 2;
  if (this->enable_shard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_shard(), target);
  }

  // repeated string endPoints = 3;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.Proxy2Param.endPoints");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->endpoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.Proxy2Param)
  return target;
}

size_t Proxy2Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.Proxy2Param)
  size_t total_size = 0;

  // repeated string endPoints = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->endpoints_size());
  for (int i = 0; i < this->endpoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endpoints(i));
  }

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // bool enable_shard = 2;
  if (this->enable_shard() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proxy2Param::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.Proxy2Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Proxy2Param* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proxy2Param>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.Proxy2Param)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.Proxy2Param)
    MergeFrom(*source);
  }
}

void Proxy2Param::MergeFrom(const Proxy2Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.Proxy2Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.enable_shard() != 0) {
    set_enable_shard(from.enable_shard());
  }
}

void Proxy2Param::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.Proxy2Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proxy2Param::CopyFrom(const Proxy2Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.Proxy2Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proxy2Param::IsInitialized() const {
  return true;
}

void Proxy2Param::Swap(Proxy2Param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proxy2Param::InternalSwap(Proxy2Param* other) {
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  cluster_name_.Swap(&other->cluster_name_);
  std::swap(enable_shard_, other->enable_shard_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proxy2Param::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proxy2Param

// string cluster_name = 1;
void Proxy2Param::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Proxy2Param::cluster_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.Proxy2Param.cluster_name)
  return cluster_name_.GetNoArena();
}
void Proxy2Param::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.Proxy2Param.cluster_name)
}
#if LANG_CXX11
void Proxy2Param::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.Proxy2Param.cluster_name)
}
#endif
void Proxy2Param::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.Proxy2Param.cluster_name)
}
void Proxy2Param::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.Proxy2Param.cluster_name)
}
::std::string* Proxy2Param::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.Proxy2Param.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Proxy2Param::release_cluster_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.Proxy2Param.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Proxy2Param::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.Proxy2Param.cluster_name)
}

// bool enable_shard = 2;
void Proxy2Param::clear_enable_shard() {
  enable_shard_ = false;
}
bool Proxy2Param::enable_shard() const {
  // @@protoc_insertion_point(field_get:cmongoproto.Proxy2Param.enable_shard)
  return enable_shard_;
}
void Proxy2Param::set_enable_shard(bool value) {
  
  enable_shard_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.Proxy2Param.enable_shard)
}

// repeated string endPoints = 3;
int Proxy2Param::endpoints_size() const {
  return endpoints_.size();
}
void Proxy2Param::clear_endpoints() {
  endpoints_.Clear();
}
const ::std::string& Proxy2Param::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:cmongoproto.Proxy2Param.endPoints)
  return endpoints_.Get(index);
}
::std::string* Proxy2Param::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:cmongoproto.Proxy2Param.endPoints)
  return endpoints_.Mutable(index);
}
void Proxy2Param::set_endpoints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmongoproto.Proxy2Param.endPoints)
  endpoints_.Mutable(index)->assign(value);
}
void Proxy2Param::set_endpoints(int index, const char* value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmongoproto.Proxy2Param.endPoints)
}
void Proxy2Param::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.Proxy2Param.endPoints)
}
::std::string* Proxy2Param::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:cmongoproto.Proxy2Param.endPoints)
  return endpoints_.Add();
}
void Proxy2Param::add_endpoints(const ::std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmongoproto.Proxy2Param.endPoints)
}
void Proxy2Param::add_endpoints(const char* value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmongoproto.Proxy2Param.endPoints)
}
void Proxy2Param::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmongoproto.Proxy2Param.endPoints)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Proxy2Param::endpoints() const {
  // @@protoc_insertion_point(field_list:cmongoproto.Proxy2Param.endPoints)
  return endpoints_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Proxy2Param::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:cmongoproto.Proxy2Param.endPoints)
  return &endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamoProxyParam::kClusterNameFieldNumber;
const int DynamoProxyParam::kEndPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamoProxyParam::DynamoProxyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.DynamoProxyParam)
}
DynamoProxyParam::DynamoProxyParam(const DynamoProxyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      endpoints_(from.endpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.DynamoProxyParam)
}

void DynamoProxyParam::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DynamoProxyParam::~DynamoProxyParam() {
  // @@protoc_insertion_point(destructor:cmongoproto.DynamoProxyParam)
  SharedDtor();
}

void DynamoProxyParam::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DynamoProxyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamoProxyParam::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[12].descriptor;
}

const DynamoProxyParam& DynamoProxyParam::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynamoProxyParam* DynamoProxyParam::New(::google::protobuf::Arena* arena) const {
  DynamoProxyParam* n = new DynamoProxyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamoProxyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.DynamoProxyParam)
  endpoints_.Clear();
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DynamoProxyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.DynamoProxyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.DynamoProxyParam.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string endPoints = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endpoints()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoints(this->endpoints_size() - 1).data(),
            this->endpoints(this->endpoints_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.DynamoProxyParam.endPoints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.DynamoProxyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.DynamoProxyParam)
  return false;
#undef DO_
}

void DynamoProxyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.DynamoProxyParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.DynamoProxyParam.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // repeated string endPoints = 2;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.DynamoProxyParam.endPoints");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.DynamoProxyParam)
}

::google::protobuf::uint8* DynamoProxyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.DynamoProxyParam)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.DynamoProxyParam.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // repeated string endPoints = 2;
  for (int i = 0; i < this->endpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoints(i).data(), this->endpoints(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.DynamoProxyParam.endPoints");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->endpoints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.DynamoProxyParam)
  return target;
}

size_t DynamoProxyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.DynamoProxyParam)
  size_t total_size = 0;

  // repeated string endPoints = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->endpoints_size());
  for (int i = 0; i < this->endpoints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endpoints(i));
  }

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamoProxyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.DynamoProxyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamoProxyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamoProxyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.DynamoProxyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.DynamoProxyParam)
    MergeFrom(*source);
  }
}

void DynamoProxyParam::MergeFrom(const DynamoProxyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.DynamoProxyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
}

void DynamoProxyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.DynamoProxyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamoProxyParam::CopyFrom(const DynamoProxyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.DynamoProxyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamoProxyParam::IsInitialized() const {
  return true;
}

void DynamoProxyParam::Swap(DynamoProxyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamoProxyParam::InternalSwap(DynamoProxyParam* other) {
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  cluster_name_.Swap(&other->cluster_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamoProxyParam::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamoProxyParam

// string cluster_name = 1;
void DynamoProxyParam::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DynamoProxyParam::cluster_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.DynamoProxyParam.cluster_name)
  return cluster_name_.GetNoArena();
}
void DynamoProxyParam::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.DynamoProxyParam.cluster_name)
}
#if LANG_CXX11
void DynamoProxyParam::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.DynamoProxyParam.cluster_name)
}
#endif
void DynamoProxyParam::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.DynamoProxyParam.cluster_name)
}
void DynamoProxyParam::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.DynamoProxyParam.cluster_name)
}
::std::string* DynamoProxyParam::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.DynamoProxyParam.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DynamoProxyParam::release_cluster_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.DynamoProxyParam.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DynamoProxyParam::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.DynamoProxyParam.cluster_name)
}

// repeated string endPoints = 2;
int DynamoProxyParam::endpoints_size() const {
  return endpoints_.size();
}
void DynamoProxyParam::clear_endpoints() {
  endpoints_.Clear();
}
const ::std::string& DynamoProxyParam::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:cmongoproto.DynamoProxyParam.endPoints)
  return endpoints_.Get(index);
}
::std::string* DynamoProxyParam::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:cmongoproto.DynamoProxyParam.endPoints)
  return endpoints_.Mutable(index);
}
void DynamoProxyParam::set_endpoints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmongoproto.DynamoProxyParam.endPoints)
  endpoints_.Mutable(index)->assign(value);
}
void DynamoProxyParam::set_endpoints(int index, const char* value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmongoproto.DynamoProxyParam.endPoints)
}
void DynamoProxyParam::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.DynamoProxyParam.endPoints)
}
::std::string* DynamoProxyParam::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:cmongoproto.DynamoProxyParam.endPoints)
  return endpoints_.Add();
}
void DynamoProxyParam::add_endpoints(const ::std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmongoproto.DynamoProxyParam.endPoints)
}
void DynamoProxyParam::add_endpoints(const char* value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmongoproto.DynamoProxyParam.endPoints)
}
void DynamoProxyParam::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmongoproto.DynamoProxyParam.endPoints)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DynamoProxyParam::endpoints() const {
  // @@protoc_insertion_point(field_list:cmongoproto.DynamoProxyParam.endPoints)
  return endpoints_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DynamoProxyParam::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:cmongoproto.DynamoProxyParam.endPoints)
  return &endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateContainerReq::kHeaderFieldNumber;
const int CreateContainerReq::kContainerIdFieldNumber;
const int CreateContainerReq::kContainerTypeFieldNumber;
const int CreateContainerReq::kQuotaFieldNumber;
const int CreateContainerReq::kMongoVersionFieldNumber;
const int CreateContainerReq::kMongodParamsFieldNumber;
const int CreateContainerReq::kMongosParamsFieldNumber;
const int CreateContainerReq::kConfigParamsFieldNumber;
const int CreateContainerReq::kProxyParamsFieldNumber;
const int CreateContainerReq::kProxy2ParamsFieldNumber;
const int CreateContainerReq::kDynamoParamsFieldNumber;
const int CreateContainerReq::kProxyVersionFieldNumber;
const int CreateContainerReq::kMongodSubversionFieldNumber;
const int CreateContainerReq::kDynamoProxyVersionFieldNumber;
const int CreateContainerReq::kPackageUrlFieldNumber;
const int CreateContainerReq::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateContainerReq::CreateContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.CreateContainerReq)
}
CreateContainerReq::CreateContainerReq(const CreateContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  package_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.package_url().size() > 0) {
    package_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_url_);
  }
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_password().size() > 0) {
    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&container_id_, &from.container_id_,
    reinterpret_cast<char*>(&mongo_version_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(mongo_version_));
  clear_has_container_param();
  switch (from.container_param_case()) {
    case kMongodParams: {
      mutable_mongod_params()->::cmongoproto::MongoDParam::MergeFrom(from.mongod_params());
      break;
    }
    case kMongosParams: {
      mutable_mongos_params()->::cmongoproto::MongoSParam::MergeFrom(from.mongos_params());
      break;
    }
    case kConfigParams: {
      mutable_config_params()->::cmongoproto::ConfigParam::MergeFrom(from.config_params());
      break;
    }
    case kProxyParams: {
      mutable_proxy_params()->::cmongoproto::ProxyParam::MergeFrom(from.proxy_params());
      break;
    }
    case kProxy2Params: {
      mutable_proxy2_params()->::cmongoproto::Proxy2Param::MergeFrom(from.proxy2_params());
      break;
    }
    case kDynamoParams: {
      mutable_dynamo_params()->::cmongoproto::DynamoProxyParam::MergeFrom(from.dynamo_params());
      break;
    }
    case CONTAINER_PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.CreateContainerReq)
}

void CreateContainerReq::SharedCtor() {
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&mongo_version_) -
    reinterpret_cast<char*>(&header_) + sizeof(mongo_version_));
  clear_has_container_param();
  _cached_size_ = 0;
}

CreateContainerReq::~CreateContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.CreateContainerReq)
  SharedDtor();
}

void CreateContainerReq::SharedDtor() {
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
  if (has_container_param()) {
    clear_container_param();
  }
}

void CreateContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[13].descriptor;
}

const CreateContainerReq& CreateContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateContainerReq* CreateContainerReq::New(::google::protobuf::Arena* arena) const {
  CreateContainerReq* n = new CreateContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateContainerReq::clear_container_param() {
// @@protoc_insertion_point(one_of_clear_start:cmongoproto.CreateContainerReq)
  switch (container_param_case()) {
    case kMongodParams: {
      delete container_param_.mongod_params_;
      break;
    }
    case kMongosParams: {
      delete container_param_.mongos_params_;
      break;
    }
    case kConfigParams: {
      delete container_param_.config_params_;
      break;
    }
    case kProxyParams: {
      delete container_param_.proxy_params_;
      break;
    }
    case kProxy2Params: {
      delete container_param_.proxy2_params_;
      break;
    }
    case kDynamoParams: {
      delete container_param_.dynamo_params_;
      break;
    }
    case CONTAINER_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTAINER_PARAM_NOT_SET;
}


void CreateContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.CreateContainerReq)
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&container_id_, 0, reinterpret_cast<char*>(&mongo_version_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(mongo_version_));
  clear_container_param();
}

bool CreateContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.CreateContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoVersion mongo_version = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mongo_version(static_cast< ::cmongoproto::MongoVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoDParam mongod_params = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mongod_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoSParam mongos_params = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mongos_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ConfigParam config_params = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ProxyParam proxy_params = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.Proxy2Param proxy2_params = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy2_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.DynamoProxyParam dynamo_params = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamo_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CreateContainerReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CreateContainerReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CreateContainerReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package_url = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_url().data(), this->package_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CreateContainerReq.package_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_password = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CreateContainerReq.user_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.CreateContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.CreateContainerReq)
  return false;
#undef DO_
}

void CreateContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.CreateContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->container_type(), output);
  }

  // .cmongoproto.ResourceDesc quota = 4;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quota_, output);
  }

  // .cmongoproto.MongoVersion mongo_version = 5;
  if (this->mongo_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mongo_version(), output);
  }

  // .cmongoproto.MongoDParam mongod_params = 6;
  if (has_mongod_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *container_param_.mongod_params_, output);
  }

  // .cmongoproto.MongoSParam mongos_params = 7;
  if (has_mongos_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *container_param_.mongos_params_, output);
  }

  // .cmongoproto.ConfigParam config_params = 8;
  if (has_config_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *container_param_.config_params_, output);
  }

  // .cmongoproto.ProxyParam proxy_params = 9;
  if (has_proxy_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *container_param_.proxy_params_, output);
  }

  // .cmongoproto.Proxy2Param proxy2_params = 10;
  if (has_proxy2_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *container_param_.proxy2_params_, output);
  }

  // .cmongoproto.DynamoProxyParam dynamo_params = 11;
  if (has_dynamo_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *container_param_.dynamo_params_, output);
  }

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->proxy_version(), output);
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->dynamo_proxy_version(), output);
  }

  // string package_url = 21;
  if (this->package_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_url().data(), this->package_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.package_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->package_url(), output);
  }

  // string user_password = 22;
  if (this->user_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->user_password(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.CreateContainerReq)
}

::google::protobuf::uint8* CreateContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.CreateContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->container_type(), target);
  }

  // .cmongoproto.ResourceDesc quota = 4;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quota_, false, target);
  }

  // .cmongoproto.MongoVersion mongo_version = 5;
  if (this->mongo_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mongo_version(), target);
  }

  // .cmongoproto.MongoDParam mongod_params = 6;
  if (has_mongod_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *container_param_.mongod_params_, false, target);
  }

  // .cmongoproto.MongoSParam mongos_params = 7;
  if (has_mongos_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *container_param_.mongos_params_, false, target);
  }

  // .cmongoproto.ConfigParam config_params = 8;
  if (has_config_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *container_param_.config_params_, false, target);
  }

  // .cmongoproto.ProxyParam proxy_params = 9;
  if (has_proxy_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *container_param_.proxy_params_, false, target);
  }

  // .cmongoproto.Proxy2Param proxy2_params = 10;
  if (has_proxy2_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *container_param_.proxy2_params_, false, target);
  }

  // .cmongoproto.DynamoProxyParam dynamo_params = 11;
  if (has_dynamo_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *container_param_.dynamo_params_, false, target);
  }

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->proxy_version(), target);
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->dynamo_proxy_version(), target);
  }

  // string package_url = 21;
  if (this->package_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_url().data(), this->package_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.package_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->package_url(), target);
  }

  // string user_password = 22;
  if (this->user_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CreateContainerReq.user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->user_password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.CreateContainerReq)
  return target;
}

size_t CreateContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.CreateContainerReq)
  size_t total_size = 0;

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // string package_url = 21;
  if (this->package_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_url());
  }

  // string user_password = 22;
  if (this->user_password().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_password());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 4;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  // .cmongoproto.MongoVersion mongo_version = 5;
  if (this->mongo_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mongo_version());
  }

  switch (container_param_case()) {
    // .cmongoproto.MongoDParam mongod_params = 6;
    case kMongodParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.mongod_params_);
      break;
    }
    // .cmongoproto.MongoSParam mongos_params = 7;
    case kMongosParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.mongos_params_);
      break;
    }
    // .cmongoproto.ConfigParam config_params = 8;
    case kConfigParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.config_params_);
      break;
    }
    // .cmongoproto.ProxyParam proxy_params = 9;
    case kProxyParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.proxy_params_);
      break;
    }
    // .cmongoproto.Proxy2Param proxy2_params = 10;
    case kProxy2Params: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.proxy2_params_);
      break;
    }
    // .cmongoproto.DynamoProxyParam dynamo_params = 11;
    case kDynamoParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *container_param_.dynamo_params_);
      break;
    }
    case CONTAINER_PARAM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.CreateContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.CreateContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.CreateContainerReq)
    MergeFrom(*source);
  }
}

void CreateContainerReq::MergeFrom(const CreateContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.CreateContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.package_url().size() > 0) {

    package_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_url_);
  }
  if (from.user_password().size() > 0) {

    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
  if (from.mongo_version() != 0) {
    set_mongo_version(from.mongo_version());
  }
  switch (from.container_param_case()) {
    case kMongodParams: {
      mutable_mongod_params()->::cmongoproto::MongoDParam::MergeFrom(from.mongod_params());
      break;
    }
    case kMongosParams: {
      mutable_mongos_params()->::cmongoproto::MongoSParam::MergeFrom(from.mongos_params());
      break;
    }
    case kConfigParams: {
      mutable_config_params()->::cmongoproto::ConfigParam::MergeFrom(from.config_params());
      break;
    }
    case kProxyParams: {
      mutable_proxy_params()->::cmongoproto::ProxyParam::MergeFrom(from.proxy_params());
      break;
    }
    case kProxy2Params: {
      mutable_proxy2_params()->::cmongoproto::Proxy2Param::MergeFrom(from.proxy2_params());
      break;
    }
    case kDynamoParams: {
      mutable_dynamo_params()->::cmongoproto::DynamoProxyParam::MergeFrom(from.dynamo_params());
      break;
    }
    case CONTAINER_PARAM_NOT_SET: {
      break;
    }
  }
}

void CreateContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.CreateContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContainerReq::CopyFrom(const CreateContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.CreateContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerReq::IsInitialized() const {
  return true;
}

void CreateContainerReq::Swap(CreateContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateContainerReq::InternalSwap(CreateContainerReq* other) {
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  package_url_.Swap(&other->package_url_);
  user_password_.Swap(&other->user_password_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(container_id_, other->container_id_);
  std::swap(container_type_, other->container_type_);
  std::swap(mongo_version_, other->mongo_version_);
  std::swap(container_param_, other->container_param_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateContainerReq

// .cmongoproto.ReqHeader header = 1;
bool CreateContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CreateContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CreateContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CreateContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.header)
}

// int32 container_id = 2;
void CreateContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 CreateContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.container_id)
  return container_id_;
}
void CreateContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.container_id)
}

// .cmongoproto.MongoType container_type = 3;
void CreateContainerReq::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType CreateContainerReq::container_type() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void CreateContainerReq::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.container_type)
}

// .cmongoproto.ResourceDesc quota = 4;
bool CreateContainerReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void CreateContainerReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& CreateContainerReq::quota() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* CreateContainerReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* CreateContainerReq::release_quota() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void CreateContainerReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.quota)
}

// .cmongoproto.MongoVersion mongo_version = 5;
void CreateContainerReq::clear_mongo_version() {
  mongo_version_ = 0;
}
::cmongoproto::MongoVersion CreateContainerReq::mongo_version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.mongo_version)
  return static_cast< ::cmongoproto::MongoVersion >(mongo_version_);
}
void CreateContainerReq::set_mongo_version(::cmongoproto::MongoVersion value) {
  
  mongo_version_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.mongo_version)
}

// .cmongoproto.MongoDParam mongod_params = 6;
bool CreateContainerReq::has_mongod_params() const {
  return container_param_case() == kMongodParams;
}
void CreateContainerReq::set_has_mongod_params() {
  _oneof_case_[0] = kMongodParams;
}
void CreateContainerReq::clear_mongod_params() {
  if (has_mongod_params()) {
    delete container_param_.mongod_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::MongoDParam& CreateContainerReq::mongod_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.mongod_params)
  return has_mongod_params()
      ? *container_param_.mongod_params_
      : ::cmongoproto::MongoDParam::default_instance();
}
::cmongoproto::MongoDParam* CreateContainerReq::mutable_mongod_params() {
  if (!has_mongod_params()) {
    clear_container_param();
    set_has_mongod_params();
    container_param_.mongod_params_ = new ::cmongoproto::MongoDParam;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.mongod_params)
  return container_param_.mongod_params_;
}
::cmongoproto::MongoDParam* CreateContainerReq::release_mongod_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.mongod_params)
  if (has_mongod_params()) {
    clear_has_container_param();
    ::cmongoproto::MongoDParam* temp = container_param_.mongod_params_;
    container_param_.mongod_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_mongod_params(::cmongoproto::MongoDParam* mongod_params) {
  clear_container_param();
  if (mongod_params) {
    set_has_mongod_params();
    container_param_.mongod_params_ = mongod_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.mongod_params)
}

// .cmongoproto.MongoSParam mongos_params = 7;
bool CreateContainerReq::has_mongos_params() const {
  return container_param_case() == kMongosParams;
}
void CreateContainerReq::set_has_mongos_params() {
  _oneof_case_[0] = kMongosParams;
}
void CreateContainerReq::clear_mongos_params() {
  if (has_mongos_params()) {
    delete container_param_.mongos_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::MongoSParam& CreateContainerReq::mongos_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.mongos_params)
  return has_mongos_params()
      ? *container_param_.mongos_params_
      : ::cmongoproto::MongoSParam::default_instance();
}
::cmongoproto::MongoSParam* CreateContainerReq::mutable_mongos_params() {
  if (!has_mongos_params()) {
    clear_container_param();
    set_has_mongos_params();
    container_param_.mongos_params_ = new ::cmongoproto::MongoSParam;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.mongos_params)
  return container_param_.mongos_params_;
}
::cmongoproto::MongoSParam* CreateContainerReq::release_mongos_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.mongos_params)
  if (has_mongos_params()) {
    clear_has_container_param();
    ::cmongoproto::MongoSParam* temp = container_param_.mongos_params_;
    container_param_.mongos_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_mongos_params(::cmongoproto::MongoSParam* mongos_params) {
  clear_container_param();
  if (mongos_params) {
    set_has_mongos_params();
    container_param_.mongos_params_ = mongos_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.mongos_params)
}

// .cmongoproto.ConfigParam config_params = 8;
bool CreateContainerReq::has_config_params() const {
  return container_param_case() == kConfigParams;
}
void CreateContainerReq::set_has_config_params() {
  _oneof_case_[0] = kConfigParams;
}
void CreateContainerReq::clear_config_params() {
  if (has_config_params()) {
    delete container_param_.config_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::ConfigParam& CreateContainerReq::config_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.config_params)
  return has_config_params()
      ? *container_param_.config_params_
      : ::cmongoproto::ConfigParam::default_instance();
}
::cmongoproto::ConfigParam* CreateContainerReq::mutable_config_params() {
  if (!has_config_params()) {
    clear_container_param();
    set_has_config_params();
    container_param_.config_params_ = new ::cmongoproto::ConfigParam;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.config_params)
  return container_param_.config_params_;
}
::cmongoproto::ConfigParam* CreateContainerReq::release_config_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.config_params)
  if (has_config_params()) {
    clear_has_container_param();
    ::cmongoproto::ConfigParam* temp = container_param_.config_params_;
    container_param_.config_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_config_params(::cmongoproto::ConfigParam* config_params) {
  clear_container_param();
  if (config_params) {
    set_has_config_params();
    container_param_.config_params_ = config_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.config_params)
}

// .cmongoproto.ProxyParam proxy_params = 9;
bool CreateContainerReq::has_proxy_params() const {
  return container_param_case() == kProxyParams;
}
void CreateContainerReq::set_has_proxy_params() {
  _oneof_case_[0] = kProxyParams;
}
void CreateContainerReq::clear_proxy_params() {
  if (has_proxy_params()) {
    delete container_param_.proxy_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::ProxyParam& CreateContainerReq::proxy_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.proxy_params)
  return has_proxy_params()
      ? *container_param_.proxy_params_
      : ::cmongoproto::ProxyParam::default_instance();
}
::cmongoproto::ProxyParam* CreateContainerReq::mutable_proxy_params() {
  if (!has_proxy_params()) {
    clear_container_param();
    set_has_proxy_params();
    container_param_.proxy_params_ = new ::cmongoproto::ProxyParam;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.proxy_params)
  return container_param_.proxy_params_;
}
::cmongoproto::ProxyParam* CreateContainerReq::release_proxy_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.proxy_params)
  if (has_proxy_params()) {
    clear_has_container_param();
    ::cmongoproto::ProxyParam* temp = container_param_.proxy_params_;
    container_param_.proxy_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_proxy_params(::cmongoproto::ProxyParam* proxy_params) {
  clear_container_param();
  if (proxy_params) {
    set_has_proxy_params();
    container_param_.proxy_params_ = proxy_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.proxy_params)
}

// .cmongoproto.Proxy2Param proxy2_params = 10;
bool CreateContainerReq::has_proxy2_params() const {
  return container_param_case() == kProxy2Params;
}
void CreateContainerReq::set_has_proxy2_params() {
  _oneof_case_[0] = kProxy2Params;
}
void CreateContainerReq::clear_proxy2_params() {
  if (has_proxy2_params()) {
    delete container_param_.proxy2_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::Proxy2Param& CreateContainerReq::proxy2_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.proxy2_params)
  return has_proxy2_params()
      ? *container_param_.proxy2_params_
      : ::cmongoproto::Proxy2Param::default_instance();
}
::cmongoproto::Proxy2Param* CreateContainerReq::mutable_proxy2_params() {
  if (!has_proxy2_params()) {
    clear_container_param();
    set_has_proxy2_params();
    container_param_.proxy2_params_ = new ::cmongoproto::Proxy2Param;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.proxy2_params)
  return container_param_.proxy2_params_;
}
::cmongoproto::Proxy2Param* CreateContainerReq::release_proxy2_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.proxy2_params)
  if (has_proxy2_params()) {
    clear_has_container_param();
    ::cmongoproto::Proxy2Param* temp = container_param_.proxy2_params_;
    container_param_.proxy2_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_proxy2_params(::cmongoproto::Proxy2Param* proxy2_params) {
  clear_container_param();
  if (proxy2_params) {
    set_has_proxy2_params();
    container_param_.proxy2_params_ = proxy2_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.proxy2_params)
}

// .cmongoproto.DynamoProxyParam dynamo_params = 11;
bool CreateContainerReq::has_dynamo_params() const {
  return container_param_case() == kDynamoParams;
}
void CreateContainerReq::set_has_dynamo_params() {
  _oneof_case_[0] = kDynamoParams;
}
void CreateContainerReq::clear_dynamo_params() {
  if (has_dynamo_params()) {
    delete container_param_.dynamo_params_;
    clear_has_container_param();
  }
}
 const ::cmongoproto::DynamoProxyParam& CreateContainerReq::dynamo_params() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.dynamo_params)
  return has_dynamo_params()
      ? *container_param_.dynamo_params_
      : ::cmongoproto::DynamoProxyParam::default_instance();
}
::cmongoproto::DynamoProxyParam* CreateContainerReq::mutable_dynamo_params() {
  if (!has_dynamo_params()) {
    clear_container_param();
    set_has_dynamo_params();
    container_param_.dynamo_params_ = new ::cmongoproto::DynamoProxyParam;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.dynamo_params)
  return container_param_.dynamo_params_;
}
::cmongoproto::DynamoProxyParam* CreateContainerReq::release_dynamo_params() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.dynamo_params)
  if (has_dynamo_params()) {
    clear_has_container_param();
    ::cmongoproto::DynamoProxyParam* temp = container_param_.dynamo_params_;
    container_param_.dynamo_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CreateContainerReq::set_allocated_dynamo_params(::cmongoproto::DynamoProxyParam* dynamo_params) {
  clear_container_param();
  if (dynamo_params) {
    set_has_dynamo_params();
    container_param_.dynamo_params_ = dynamo_params;
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.dynamo_params)
}

// string proxy_version = 18;
void CreateContainerReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateContainerReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void CreateContainerReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.proxy_version)
}
#if LANG_CXX11
void CreateContainerReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CreateContainerReq.proxy_version)
}
#endif
void CreateContainerReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CreateContainerReq.proxy_version)
}
void CreateContainerReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CreateContainerReq.proxy_version)
}
::std::string* CreateContainerReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateContainerReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateContainerReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.proxy_version)
}

// string mongod_subversion = 19;
void CreateContainerReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateContainerReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void CreateContainerReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.mongod_subversion)
}
#if LANG_CXX11
void CreateContainerReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CreateContainerReq.mongod_subversion)
}
#endif
void CreateContainerReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CreateContainerReq.mongod_subversion)
}
void CreateContainerReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CreateContainerReq.mongod_subversion)
}
::std::string* CreateContainerReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateContainerReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateContainerReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.mongod_subversion)
}

// string dynamo_proxy_version = 20;
void CreateContainerReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateContainerReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void CreateContainerReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.dynamo_proxy_version)
}
#if LANG_CXX11
void CreateContainerReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CreateContainerReq.dynamo_proxy_version)
}
#endif
void CreateContainerReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CreateContainerReq.dynamo_proxy_version)
}
void CreateContainerReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CreateContainerReq.dynamo_proxy_version)
}
::std::string* CreateContainerReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateContainerReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateContainerReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.dynamo_proxy_version)
}

// string package_url = 21;
void CreateContainerReq::clear_package_url() {
  package_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateContainerReq::package_url() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.package_url)
  return package_url_.GetNoArena();
}
void CreateContainerReq::set_package_url(const ::std::string& value) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.package_url)
}
#if LANG_CXX11
void CreateContainerReq::set_package_url(::std::string&& value) {
  
  package_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CreateContainerReq.package_url)
}
#endif
void CreateContainerReq::set_package_url(const char* value) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CreateContainerReq.package_url)
}
void CreateContainerReq::set_package_url(const char* value, size_t size) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CreateContainerReq.package_url)
}
::std::string* CreateContainerReq::mutable_package_url() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.package_url)
  return package_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateContainerReq::release_package_url() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.package_url)
  
  return package_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateContainerReq::set_allocated_package_url(::std::string* package_url) {
  if (package_url != NULL) {
    
  } else {
    
  }
  package_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_url);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.package_url)
}

// string user_password = 22;
void CreateContainerReq::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateContainerReq::user_password() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerReq.user_password)
  return user_password_.GetNoArena();
}
void CreateContainerReq::set_user_password(const ::std::string& value) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerReq.user_password)
}
#if LANG_CXX11
void CreateContainerReq::set_user_password(::std::string&& value) {
  
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CreateContainerReq.user_password)
}
#endif
void CreateContainerReq::set_user_password(const char* value) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CreateContainerReq.user_password)
}
void CreateContainerReq::set_user_password(const char* value, size_t size) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CreateContainerReq.user_password)
}
::std::string* CreateContainerReq::mutable_user_password() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerReq.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateContainerReq::release_user_password() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerReq.user_password)
  
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateContainerReq::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    
  } else {
    
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerReq.user_password)
}

bool CreateContainerReq::has_container_param() const {
  return container_param_case() != CONTAINER_PARAM_NOT_SET;
}
void CreateContainerReq::clear_has_container_param() {
  _oneof_case_[0] = CONTAINER_PARAM_NOT_SET;
}
CreateContainerReq::ContainerParamCase CreateContainerReq::container_param_case() const {
  return CreateContainerReq::ContainerParamCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingReq::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingReq::PingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.PingReq)
}
PingReq::PingReq(const PingReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.PingReq)
}

void PingReq::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.PingReq)
  SharedDtor();
}

void PingReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void PingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[14].descriptor;
}

const PingReq& PingReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingReq* PingReq::New(::google::protobuf::Arena* arena) const {
  PingReq* n = new PingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.PingReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool PingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.PingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.PingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.PingReq)
  return false;
#undef DO_
}

void PingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.PingReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.PingReq)
}

::google::protobuf::uint8* PingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.PingReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.PingReq)
  return target;
}

size_t PingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.PingReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.PingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PingReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.PingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.PingReq)
    MergeFrom(*source);
  }
}

void PingReq::MergeFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.PingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void PingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReq::CopyFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {
  return true;
}

void PingReq::Swap(PingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingReq::InternalSwap(PingReq* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingReq

// .cmongoproto.ReqHeader header = 1;
bool PingReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PingReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& PingReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.PingReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* PingReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.PingReq.header)
  return header_;
}
::cmongoproto::ReqHeader* PingReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.PingReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PingReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.PingReq.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRes::PingRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.PingRes)
}
PingRes::PingRes(const PingRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.PingRes)
}

void PingRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

PingRes::~PingRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.PingRes)
  SharedDtor();
}

void PingRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void PingRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[15].descriptor;
}

const PingRes& PingRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingRes* PingRes::New(::google::protobuf::Arena* arena) const {
  PingRes* n = new PingRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.PingRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool PingRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.PingRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.PingRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.PingRes)
  return false;
#undef DO_
}

void PingRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.PingRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.PingRes)
}

::google::protobuf::uint8* PingRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.PingRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.PingRes)
  return target;
}

size_t PingRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.PingRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.PingRes)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.PingRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.PingRes)
    MergeFrom(*source);
  }
}

void PingRes::MergeFrom(const PingRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.PingRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void PingRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.PingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRes::CopyFrom(const PingRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.PingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRes::IsInitialized() const {
  return true;
}

void PingRes::Swap(PingRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRes::InternalSwap(PingRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRes

// .cmongoproto.ResHeader header = 1;
bool PingRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PingRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& PingRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.PingRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* PingRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.PingRes.header)
  return header_;
}
::cmongoproto::ResHeader* PingRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.PingRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PingRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.PingRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateContainerRes::kHeaderFieldNumber;
const int CreateContainerRes::kPortUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateContainerRes::CreateContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.CreateContainerRes)
}
CreateContainerRes::CreateContainerRes(const CreateContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  port_used_ = from.port_used_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.CreateContainerRes)
}

void CreateContainerRes::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&port_used_) -
    reinterpret_cast<char*>(&header_) + sizeof(port_used_));
  _cached_size_ = 0;
}

CreateContainerRes::~CreateContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.CreateContainerRes)
  SharedDtor();
}

void CreateContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[16].descriptor;
}

const CreateContainerRes& CreateContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateContainerRes* CreateContainerRes::New(::google::protobuf::Arena* arena) const {
  CreateContainerRes* n = new CreateContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.CreateContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  port_used_ = 0;
}

bool CreateContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.CreateContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port_used = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.CreateContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.CreateContainerRes)
  return false;
#undef DO_
}

void CreateContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.CreateContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 port_used = 2;
  if (this->port_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port_used(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.CreateContainerRes)
}

::google::protobuf::uint8* CreateContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.CreateContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 port_used = 2;
  if (this->port_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port_used(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.CreateContainerRes)
  return target;
}

size_t CreateContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.CreateContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 port_used = 2;
  if (this->port_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port_used());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.CreateContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.CreateContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.CreateContainerRes)
    MergeFrom(*source);
  }
}

void CreateContainerRes::MergeFrom(const CreateContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.CreateContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.port_used() != 0) {
    set_port_used(from.port_used());
  }
}

void CreateContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.CreateContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContainerRes::CopyFrom(const CreateContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.CreateContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContainerRes::IsInitialized() const {
  return true;
}

void CreateContainerRes::Swap(CreateContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateContainerRes::InternalSwap(CreateContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(port_used_, other->port_used_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateContainerRes

// .cmongoproto.ResHeader header = 1;
bool CreateContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CreateContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CreateContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CreateContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* CreateContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.CreateContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CreateContainerRes.header)
}

// int32 port_used = 2;
void CreateContainerRes::clear_port_used() {
  port_used_ = 0;
}
::google::protobuf::int32 CreateContainerRes::port_used() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CreateContainerRes.port_used)
  return port_used_;
}
void CreateContainerRes::set_port_used(::google::protobuf::int32 value) {
  
  port_used_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.CreateContainerRes.port_used)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyContainerReq::kHeaderFieldNumber;
const int DestroyContainerReq::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyContainerReq::DestroyContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.DestroyContainerReq)
}
DestroyContainerReq::DestroyContainerReq(const DestroyContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.DestroyContainerReq)
}

void DestroyContainerReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

DestroyContainerReq::~DestroyContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.DestroyContainerReq)
  SharedDtor();
}

void DestroyContainerReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DestroyContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[17].descriptor;
}

const DestroyContainerReq& DestroyContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyContainerReq* DestroyContainerReq::New(::google::protobuf::Arena* arena) const {
  DestroyContainerReq* n = new DestroyContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.DestroyContainerReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool DestroyContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.DestroyContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.DestroyContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.DestroyContainerReq)
  return false;
#undef DO_
}

void DestroyContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.DestroyContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.DestroyContainerReq)
}

::google::protobuf::uint8* DestroyContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.DestroyContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.DestroyContainerReq)
  return target;
}

size_t DestroyContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.DestroyContainerReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.DestroyContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.DestroyContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.DestroyContainerReq)
    MergeFrom(*source);
  }
}

void DestroyContainerReq::MergeFrom(const DestroyContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.DestroyContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void DestroyContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.DestroyContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyContainerReq::CopyFrom(const DestroyContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.DestroyContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyContainerReq::IsInitialized() const {
  return true;
}

void DestroyContainerReq::Swap(DestroyContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyContainerReq::InternalSwap(DestroyContainerReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyContainerReq

// .cmongoproto.ReqHeader header = 1;
bool DestroyContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DestroyContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DestroyContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.DestroyContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DestroyContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.DestroyContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DestroyContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.DestroyContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DestroyContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.DestroyContainerReq.header)
}

// int32 container_id = 2;
void DestroyContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 DestroyContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.DestroyContainerReq.container_id)
  return container_id_;
}
void DestroyContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.DestroyContainerReq.container_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyContainerRes::DestroyContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.DestroyContainerRes)
}
DestroyContainerRes::DestroyContainerRes(const DestroyContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.DestroyContainerRes)
}

void DestroyContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DestroyContainerRes::~DestroyContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.DestroyContainerRes)
  SharedDtor();
}

void DestroyContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DestroyContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[18].descriptor;
}

const DestroyContainerRes& DestroyContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyContainerRes* DestroyContainerRes::New(::google::protobuf::Arena* arena) const {
  DestroyContainerRes* n = new DestroyContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.DestroyContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DestroyContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.DestroyContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.DestroyContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.DestroyContainerRes)
  return false;
#undef DO_
}

void DestroyContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.DestroyContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.DestroyContainerRes)
}

::google::protobuf::uint8* DestroyContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.DestroyContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.DestroyContainerRes)
  return target;
}

size_t DestroyContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.DestroyContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.DestroyContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.DestroyContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.DestroyContainerRes)
    MergeFrom(*source);
  }
}

void DestroyContainerRes::MergeFrom(const DestroyContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.DestroyContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DestroyContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.DestroyContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyContainerRes::CopyFrom(const DestroyContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.DestroyContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyContainerRes::IsInitialized() const {
  return true;
}

void DestroyContainerRes::Swap(DestroyContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyContainerRes::InternalSwap(DestroyContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyContainerRes

// .cmongoproto.ResHeader header = 1;
bool DestroyContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DestroyContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DestroyContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.DestroyContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DestroyContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.DestroyContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* DestroyContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.DestroyContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DestroyContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.DestroyContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoContainerReq::kHeaderFieldNumber;
const int InfoContainerReq::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoContainerReq::InfoContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.InfoContainerReq)
}
InfoContainerReq::InfoContainerReq(const InfoContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.InfoContainerReq)
}

void InfoContainerReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

InfoContainerReq::~InfoContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.InfoContainerReq)
  SharedDtor();
}

void InfoContainerReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void InfoContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[19].descriptor;
}

const InfoContainerReq& InfoContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoContainerReq* InfoContainerReq::New(::google::protobuf::Arena* arena) const {
  InfoContainerReq* n = new InfoContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.InfoContainerReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool InfoContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.InfoContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.InfoContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.InfoContainerReq)
  return false;
#undef DO_
}

void InfoContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.InfoContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.InfoContainerReq)
}

::google::protobuf::uint8* InfoContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.InfoContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.InfoContainerReq)
  return target;
}

size_t InfoContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.InfoContainerReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.InfoContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.InfoContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.InfoContainerReq)
    MergeFrom(*source);
  }
}

void InfoContainerReq::MergeFrom(const InfoContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.InfoContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void InfoContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.InfoContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoContainerReq::CopyFrom(const InfoContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.InfoContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoContainerReq::IsInitialized() const {
  return true;
}

void InfoContainerReq::Swap(InfoContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoContainerReq::InternalSwap(InfoContainerReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoContainerReq

// .cmongoproto.ReqHeader header = 1;
bool InfoContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void InfoContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& InfoContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.InfoContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* InfoContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.InfoContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* InfoContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.InfoContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void InfoContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.InfoContainerReq.header)
}

// int32 container_id = 2;
void InfoContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 InfoContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.InfoContainerReq.container_id)
  return container_id_;
}
void InfoContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.InfoContainerReq.container_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoContainerRes::kHeaderFieldNumber;
const int InfoContainerRes::kUsingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoContainerRes::InfoContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.InfoContainerRes)
}
InfoContainerRes::InfoContainerRes(const InfoContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_using_()) {
    using__ = new ::cmongoproto::ResourceDesc(*from.using__);
  } else {
    using__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.InfoContainerRes)
}

void InfoContainerRes::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&using__) -
    reinterpret_cast<char*>(&header_) + sizeof(using__));
  _cached_size_ = 0;
}

InfoContainerRes::~InfoContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.InfoContainerRes)
  SharedDtor();
}

void InfoContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete using__;
  }
}

void InfoContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[20].descriptor;
}

const InfoContainerRes& InfoContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoContainerRes* InfoContainerRes::New(::google::protobuf::Arena* arena) const {
  InfoContainerRes* n = new InfoContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.InfoContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && using__ != NULL) {
    delete using__;
  }
  using__ = NULL;
}

bool InfoContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.InfoContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc using = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_using_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.InfoContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.InfoContainerRes)
  return false;
#undef DO_
}

void InfoContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.InfoContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .cmongoproto.ResourceDesc using = 2;
  if (this->has_using_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->using__, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.InfoContainerRes)
}

::google::protobuf::uint8* InfoContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.InfoContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .cmongoproto.ResourceDesc using = 2;
  if (this->has_using_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->using__, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.InfoContainerRes)
  return target;
}

size_t InfoContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.InfoContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc using = 2;
  if (this->has_using_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->using__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.InfoContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.InfoContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.InfoContainerRes)
    MergeFrom(*source);
  }
}

void InfoContainerRes::MergeFrom(const InfoContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.InfoContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_using_()) {
    mutable_using_()->::cmongoproto::ResourceDesc::MergeFrom(from.using_());
  }
}

void InfoContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.InfoContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoContainerRes::CopyFrom(const InfoContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.InfoContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoContainerRes::IsInitialized() const {
  return true;
}

void InfoContainerRes::Swap(InfoContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoContainerRes::InternalSwap(InfoContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(using__, other->using__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoContainerRes

// .cmongoproto.ResHeader header = 1;
bool InfoContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void InfoContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& InfoContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.InfoContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* InfoContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.InfoContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* InfoContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.InfoContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void InfoContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.InfoContainerRes.header)
}

// .cmongoproto.ResourceDesc using = 2;
bool InfoContainerRes::has_using_() const {
  return this != internal_default_instance() && using__ != NULL;
}
void InfoContainerRes::clear_using_() {
  if (GetArenaNoVirtual() == NULL && using__ != NULL) delete using__;
  using__ = NULL;
}
const ::cmongoproto::ResourceDesc& InfoContainerRes::using_() const {
  // @@protoc_insertion_point(field_get:cmongoproto.InfoContainerRes.using)
  return using__ != NULL ? *using__
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* InfoContainerRes::mutable_using_() {
  
  if (using__ == NULL) {
    using__ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.InfoContainerRes.using)
  return using__;
}
::cmongoproto::ResourceDesc* InfoContainerRes::release_using_() {
  // @@protoc_insertion_point(field_release:cmongoproto.InfoContainerRes.using)
  
  ::cmongoproto::ResourceDesc* temp = using__;
  using__ = NULL;
  return temp;
}
void InfoContainerRes::set_allocated_using_(::cmongoproto::ResourceDesc* using_) {
  delete using__;
  using__ = using_;
  if (using_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.InfoContainerRes.using)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartContainerReq::kHeaderFieldNumber;
const int StartContainerReq::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartContainerReq::StartContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.StartContainerReq)
}
StartContainerReq::StartContainerReq(const StartContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.StartContainerReq)
}

void StartContainerReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

StartContainerReq::~StartContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.StartContainerReq)
  SharedDtor();
}

void StartContainerReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StartContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[21].descriptor;
}

const StartContainerReq& StartContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartContainerReq* StartContainerReq::New(::google::protobuf::Arena* arena) const {
  StartContainerReq* n = new StartContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.StartContainerReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool StartContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.StartContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.StartContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.StartContainerReq)
  return false;
#undef DO_
}

void StartContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.StartContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.StartContainerReq)
}

::google::protobuf::uint8* StartContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.StartContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.StartContainerReq)
  return target;
}

size_t StartContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.StartContainerReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.StartContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StartContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.StartContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.StartContainerReq)
    MergeFrom(*source);
  }
}

void StartContainerReq::MergeFrom(const StartContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.StartContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void StartContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.StartContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartContainerReq::CopyFrom(const StartContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.StartContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartContainerReq::IsInitialized() const {
  return true;
}

void StartContainerReq::Swap(StartContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartContainerReq::InternalSwap(StartContainerReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartContainerReq

// .cmongoproto.ReqHeader header = 1;
bool StartContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StartContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& StartContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StartContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* StartContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.StartContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* StartContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.StartContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StartContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.StartContainerReq.header)
}

// int32 container_id = 2;
void StartContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 StartContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StartContainerReq.container_id)
  return container_id_;
}
void StartContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.StartContainerReq.container_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartContainerRes::StartContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.StartContainerRes)
}
StartContainerRes::StartContainerRes(const StartContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.StartContainerRes)
}

void StartContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

StartContainerRes::~StartContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.StartContainerRes)
  SharedDtor();
}

void StartContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StartContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[22].descriptor;
}

const StartContainerRes& StartContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartContainerRes* StartContainerRes::New(::google::protobuf::Arena* arena) const {
  StartContainerRes* n = new StartContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.StartContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool StartContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.StartContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.StartContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.StartContainerRes)
  return false;
#undef DO_
}

void StartContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.StartContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.StartContainerRes)
}

::google::protobuf::uint8* StartContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.StartContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.StartContainerRes)
  return target;
}

size_t StartContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.StartContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.StartContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StartContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.StartContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.StartContainerRes)
    MergeFrom(*source);
  }
}

void StartContainerRes::MergeFrom(const StartContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.StartContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void StartContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.StartContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartContainerRes::CopyFrom(const StartContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.StartContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartContainerRes::IsInitialized() const {
  return true;
}

void StartContainerRes::Swap(StartContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartContainerRes::InternalSwap(StartContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartContainerRes

// .cmongoproto.ResHeader header = 1;
bool StartContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StartContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& StartContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StartContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* StartContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.StartContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* StartContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.StartContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StartContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.StartContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSInitReq::kHeaderFieldNumber;
const int RSInitReq::kContainerIdFieldNumber;
const int RSInitReq::kRsNameFieldNumber;
const int RSInitReq::kRsIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSInitReq::RSInitReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSInitReq)
}
RSInitReq::RSInitReq(const RSInitReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rs_ips_(from.rs_ips_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSInitReq)
}

void RSInitReq::SharedCtor() {
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

RSInitReq::~RSInitReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSInitReq)
  SharedDtor();
}

void RSInitReq::SharedDtor() {
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSInitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSInitReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[23].descriptor;
}

const RSInitReq& RSInitReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSInitReq* RSInitReq::New(::google::protobuf::Arena* arena) const {
  RSInitReq* n = new RSInitReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSInitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSInitReq)
  rs_ips_.Clear();
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool RSInitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSInitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.RSInitReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string rs_ips = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rs_ips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_ips(this->rs_ips_size() - 1).data(),
            this->rs_ips(this->rs_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.RSInitReq.rs_ips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSInitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSInitReq)
  return false;
#undef DO_
}

void RSInitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSInitReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSInitReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rs_name(), output);
  }

  // repeated string rs_ips = 4;
  for (int i = 0; i < this->rs_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_ips(i).data(), this->rs_ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSInitReq.rs_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rs_ips(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSInitReq)
}

::google::protobuf::uint8* RSInitReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSInitReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSInitReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rs_name(), target);
  }

  // repeated string rs_ips = 4;
  for (int i = 0; i < this->rs_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_ips(i).data(), this->rs_ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSInitReq.rs_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->rs_ips(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSInitReq)
  return target;
}

size_t RSInitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSInitReq)
  size_t total_size = 0;

  // repeated string rs_ips = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rs_ips_size());
  for (int i = 0; i < this->rs_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rs_ips(i));
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSInitReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSInitReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RSInitReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSInitReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSInitReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSInitReq)
    MergeFrom(*source);
  }
}

void RSInitReq::MergeFrom(const RSInitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSInitReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rs_ips_.MergeFrom(from.rs_ips_);
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void RSInitReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSInitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSInitReq::CopyFrom(const RSInitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSInitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSInitReq::IsInitialized() const {
  return true;
}

void RSInitReq::Swap(RSInitReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSInitReq::InternalSwap(RSInitReq* other) {
  rs_ips_.UnsafeArenaSwap(&other->rs_ips_);
  rs_name_.Swap(&other->rs_name_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSInitReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSInitReq

// .cmongoproto.ReqHeader header = 1;
bool RSInitReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSInitReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RSInitReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSInitReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RSInitReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSInitReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RSInitReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSInitReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSInitReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSInitReq.header)
}

// int32 container_id = 2;
void RSInitReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 RSInitReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSInitReq.container_id)
  return container_id_;
}
void RSInitReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.RSInitReq.container_id)
}

// string rs_name = 3;
void RSInitReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSInitReq::rs_name() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSInitReq.rs_name)
  return rs_name_.GetNoArena();
}
void RSInitReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.RSInitReq.rs_name)
}
#if LANG_CXX11
void RSInitReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.RSInitReq.rs_name)
}
#endif
void RSInitReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.RSInitReq.rs_name)
}
void RSInitReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.RSInitReq.rs_name)
}
::std::string* RSInitReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSInitReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSInitReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSInitReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSInitReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSInitReq.rs_name)
}

// repeated string rs_ips = 4;
int RSInitReq::rs_ips_size() const {
  return rs_ips_.size();
}
void RSInitReq::clear_rs_ips() {
  rs_ips_.Clear();
}
const ::std::string& RSInitReq::rs_ips(int index) const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSInitReq.rs_ips)
  return rs_ips_.Get(index);
}
::std::string* RSInitReq::mutable_rs_ips(int index) {
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSInitReq.rs_ips)
  return rs_ips_.Mutable(index);
}
void RSInitReq::set_rs_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cmongoproto.RSInitReq.rs_ips)
  rs_ips_.Mutable(index)->assign(value);
}
void RSInitReq::set_rs_ips(int index, const char* value) {
  rs_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cmongoproto.RSInitReq.rs_ips)
}
void RSInitReq::set_rs_ips(int index, const char* value, size_t size) {
  rs_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.RSInitReq.rs_ips)
}
::std::string* RSInitReq::add_rs_ips() {
  // @@protoc_insertion_point(field_add_mutable:cmongoproto.RSInitReq.rs_ips)
  return rs_ips_.Add();
}
void RSInitReq::add_rs_ips(const ::std::string& value) {
  rs_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cmongoproto.RSInitReq.rs_ips)
}
void RSInitReq::add_rs_ips(const char* value) {
  rs_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cmongoproto.RSInitReq.rs_ips)
}
void RSInitReq::add_rs_ips(const char* value, size_t size) {
  rs_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cmongoproto.RSInitReq.rs_ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RSInitReq::rs_ips() const {
  // @@protoc_insertion_point(field_list:cmongoproto.RSInitReq.rs_ips)
  return rs_ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RSInitReq::mutable_rs_ips() {
  // @@protoc_insertion_point(field_mutable_list:cmongoproto.RSInitReq.rs_ips)
  return &rs_ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSInitRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSInitRes::RSInitRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSInitRes)
}
RSInitRes::RSInitRes(const RSInitRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSInitRes)
}

void RSInitRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RSInitRes::~RSInitRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSInitRes)
  SharedDtor();
}

void RSInitRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSInitRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSInitRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[24].descriptor;
}

const RSInitRes& RSInitRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSInitRes* RSInitRes::New(::google::protobuf::Arena* arena) const {
  RSInitRes* n = new RSInitRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSInitRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSInitRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RSInitRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSInitRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSInitRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSInitRes)
  return false;
#undef DO_
}

void RSInitRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSInitRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSInitRes)
}

::google::protobuf::uint8* RSInitRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSInitRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSInitRes)
  return target;
}

size_t RSInitRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSInitRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSInitRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSInitRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RSInitRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSInitRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSInitRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSInitRes)
    MergeFrom(*source);
  }
}

void RSInitRes::MergeFrom(const RSInitRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSInitRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RSInitRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSInitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSInitRes::CopyFrom(const RSInitRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSInitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSInitRes::IsInitialized() const {
  return true;
}

void RSInitRes::Swap(RSInitRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSInitRes::InternalSwap(RSInitRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSInitRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSInitRes

// .cmongoproto.ResHeader header = 1;
bool RSInitRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSInitRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RSInitRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSInitRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RSInitRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSInitRes.header)
  return header_;
}
::cmongoproto::ResHeader* RSInitRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSInitRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSInitRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSInitRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSStatusReq::kHeaderFieldNumber;
const int RSStatusReq::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSStatusReq::RSStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSStatusReq)
}
RSStatusReq::RSStatusReq(const RSStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSStatusReq)
}

void RSStatusReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

RSStatusReq::~RSStatusReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSStatusReq)
  SharedDtor();
}

void RSStatusReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSStatusReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[25].descriptor;
}

const RSStatusReq& RSStatusReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSStatusReq* RSStatusReq::New(::google::protobuf::Arena* arena) const {
  RSStatusReq* n = new RSStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSStatusReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool RSStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSStatusReq)
  return false;
#undef DO_
}

void RSStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSStatusReq)
}

::google::protobuf::uint8* RSStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSStatusReq)
  return target;
}

size_t RSStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSStatusReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RSStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSStatusReq)
    MergeFrom(*source);
  }
}

void RSStatusReq::MergeFrom(const RSStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void RSStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSStatusReq::CopyFrom(const RSStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSStatusReq::IsInitialized() const {
  return true;
}

void RSStatusReq::Swap(RSStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSStatusReq::InternalSwap(RSStatusReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSStatusReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSStatusReq

// .cmongoproto.ReqHeader header = 1;
bool RSStatusReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSStatusReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RSStatusReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSStatusReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RSStatusReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSStatusReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RSStatusReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSStatusReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSStatusReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSStatusReq.header)
}

// int32 container_id = 2;
void RSStatusReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 RSStatusReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSStatusReq.container_id)
  return container_id_;
}
void RSStatusReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.RSStatusReq.container_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSStatusRes::kHeaderFieldNumber;
const int RSStatusRes::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSStatusRes::RSStatusRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSStatusRes)
}
RSStatusRes::RSStatusRes(const RSStatusRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSStatusRes)
}

void RSStatusRes::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

RSStatusRes::~RSStatusRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSStatusRes)
  SharedDtor();
}

void RSStatusRes::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSStatusRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSStatusRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[26].descriptor;
}

const RSStatusRes& RSStatusRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSStatusRes* RSStatusRes::New(::google::protobuf::Arena* arena) const {
  RSStatusRes* n = new RSStatusRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSStatusRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSStatusRes)
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RSStatusRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSStatusRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.RSStatusRes.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSStatusRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSStatusRes)
  return false;
#undef DO_
}

void RSStatusRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSStatusRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSStatusRes.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSStatusRes)
}

::google::protobuf::uint8* RSStatusRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSStatusRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSStatusRes.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSStatusRes)
  return target;
}

size_t RSStatusRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSStatusRes)
  size_t total_size = 0;

  // string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSStatusRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSStatusRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RSStatusRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSStatusRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSStatusRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSStatusRes)
    MergeFrom(*source);
  }
}

void RSStatusRes::MergeFrom(const RSStatusRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSStatusRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RSStatusRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSStatusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSStatusRes::CopyFrom(const RSStatusRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSStatusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSStatusRes::IsInitialized() const {
  return true;
}

void RSStatusRes::Swap(RSStatusRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSStatusRes::InternalSwap(RSStatusRes* other) {
  result_.Swap(&other->result_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSStatusRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSStatusRes

// .cmongoproto.ResHeader header = 1;
bool RSStatusRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSStatusRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RSStatusRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSStatusRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RSStatusRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSStatusRes.header)
  return header_;
}
::cmongoproto::ResHeader* RSStatusRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSStatusRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSStatusRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSStatusRes.header)
}

// string result = 2;
void RSStatusRes::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSStatusRes::result() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSStatusRes.result)
  return result_.GetNoArena();
}
void RSStatusRes::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.RSStatusRes.result)
}
#if LANG_CXX11
void RSStatusRes::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.RSStatusRes.result)
}
#endif
void RSStatusRes::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.RSStatusRes.result)
}
void RSStatusRes::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.RSStatusRes.result)
}
::std::string* RSStatusRes::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSStatusRes.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSStatusRes::release_result() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSStatusRes.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSStatusRes::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSStatusRes.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSAddReq::kHeaderFieldNumber;
const int RSAddReq::kContainerIdFieldNumber;
const int RSAddReq::kMemberTypeFieldNumber;
const int RSAddReq::kMemberIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSAddReq::RSAddReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSAddReq)
}
RSAddReq::RSAddReq(const RSAddReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.member_ip().size() > 0) {
    member_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&container_id_, &from.container_id_,
    reinterpret_cast<char*>(&member_type_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(member_type_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSAddReq)
}

void RSAddReq::SharedCtor() {
  member_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&member_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(member_type_));
  _cached_size_ = 0;
}

RSAddReq::~RSAddReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSAddReq)
  SharedDtor();
}

void RSAddReq::SharedDtor() {
  member_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSAddReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[27].descriptor;
}

const RSAddReq& RSAddReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSAddReq* RSAddReq::New(::google::protobuf::Arena* arena) const {
  RSAddReq* n = new RSAddReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSAddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSAddReq)
  member_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&container_id_, 0, reinterpret_cast<char*>(&member_type_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(member_type_));
}

bool RSAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSAddReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MemberType member_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_member_type(static_cast< ::cmongoproto::MemberType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string member_ip = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member_ip().data(), this->member_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.RSAddReq.member_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSAddReq)
  return false;
#undef DO_
}

void RSAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSAddReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // .cmongoproto.MemberType member_type = 3;
  if (this->member_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->member_type(), output);
  }

  // string member_ip = 4;
  if (this->member_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_ip().data(), this->member_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSAddReq.member_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->member_ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSAddReq)
}

::google::protobuf::uint8* RSAddReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSAddReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // .cmongoproto.MemberType member_type = 3;
  if (this->member_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->member_type(), target);
  }

  // string member_ip = 4;
  if (this->member_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_ip().data(), this->member_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSAddReq.member_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->member_ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSAddReq)
  return target;
}

size_t RSAddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSAddReq)
  size_t total_size = 0;

  // string member_ip = 4;
  if (this->member_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->member_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  // .cmongoproto.MemberType member_type = 3;
  if (this->member_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->member_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSAddReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RSAddReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSAddReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSAddReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSAddReq)
    MergeFrom(*source);
  }
}

void RSAddReq::MergeFrom(const RSAddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.member_ip().size() > 0) {

    member_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
  if (from.member_type() != 0) {
    set_member_type(from.member_type());
  }
}

void RSAddReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSAddReq::CopyFrom(const RSAddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSAddReq::IsInitialized() const {
  return true;
}

void RSAddReq::Swap(RSAddReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSAddReq::InternalSwap(RSAddReq* other) {
  member_ip_.Swap(&other->member_ip_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(member_type_, other->member_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSAddReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSAddReq

// .cmongoproto.ReqHeader header = 1;
bool RSAddReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSAddReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RSAddReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSAddReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RSAddReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSAddReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RSAddReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSAddReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSAddReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSAddReq.header)
}

// int32 container_id = 2;
void RSAddReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 RSAddReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSAddReq.container_id)
  return container_id_;
}
void RSAddReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.RSAddReq.container_id)
}

// .cmongoproto.MemberType member_type = 3;
void RSAddReq::clear_member_type() {
  member_type_ = 0;
}
::cmongoproto::MemberType RSAddReq::member_type() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSAddReq.member_type)
  return static_cast< ::cmongoproto::MemberType >(member_type_);
}
void RSAddReq::set_member_type(::cmongoproto::MemberType value) {
  
  member_type_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.RSAddReq.member_type)
}

// string member_ip = 4;
void RSAddReq::clear_member_ip() {
  member_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSAddReq::member_ip() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSAddReq.member_ip)
  return member_ip_.GetNoArena();
}
void RSAddReq::set_member_ip(const ::std::string& value) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.RSAddReq.member_ip)
}
#if LANG_CXX11
void RSAddReq::set_member_ip(::std::string&& value) {
  
  member_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.RSAddReq.member_ip)
}
#endif
void RSAddReq::set_member_ip(const char* value) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.RSAddReq.member_ip)
}
void RSAddReq::set_member_ip(const char* value, size_t size) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.RSAddReq.member_ip)
}
::std::string* RSAddReq::mutable_member_ip() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSAddReq.member_ip)
  return member_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSAddReq::release_member_ip() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSAddReq.member_ip)
  
  return member_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSAddReq::set_allocated_member_ip(::std::string* member_ip) {
  if (member_ip != NULL) {
    
  } else {
    
  }
  member_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), member_ip);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSAddReq.member_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSAddRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSAddRes::RSAddRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSAddRes)
}
RSAddRes::RSAddRes(const RSAddRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSAddRes)
}

void RSAddRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RSAddRes::~RSAddRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSAddRes)
  SharedDtor();
}

void RSAddRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSAddRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSAddRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[28].descriptor;
}

const RSAddRes& RSAddRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSAddRes* RSAddRes::New(::google::protobuf::Arena* arena) const {
  RSAddRes* n = new RSAddRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSAddRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSAddRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RSAddRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSAddRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSAddRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSAddRes)
  return false;
#undef DO_
}

void RSAddRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSAddRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSAddRes)
}

::google::protobuf::uint8* RSAddRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSAddRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSAddRes)
  return target;
}

size_t RSAddRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSAddRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSAddRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSAddRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RSAddRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSAddRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSAddRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSAddRes)
    MergeFrom(*source);
  }
}

void RSAddRes::MergeFrom(const RSAddRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSAddRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RSAddRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSAddRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSAddRes::CopyFrom(const RSAddRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSAddRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSAddRes::IsInitialized() const {
  return true;
}

void RSAddRes::Swap(RSAddRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSAddRes::InternalSwap(RSAddRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSAddRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSAddRes

// .cmongoproto.ResHeader header = 1;
bool RSAddRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSAddRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RSAddRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSAddRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RSAddRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSAddRes.header)
  return header_;
}
::cmongoproto::ResHeader* RSAddRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSAddRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSAddRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSAddRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSRemoveReq::kHeaderFieldNumber;
const int RSRemoveReq::kContainerIdFieldNumber;
const int RSRemoveReq::kMemberIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSRemoveReq::RSRemoveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSRemoveReq)
}
RSRemoveReq::RSRemoveReq(const RSRemoveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.member_ip().size() > 0) {
    member_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSRemoveReq)
}

void RSRemoveReq::SharedCtor() {
  member_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

RSRemoveReq::~RSRemoveReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSRemoveReq)
  SharedDtor();
}

void RSRemoveReq::SharedDtor() {
  member_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSRemoveReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[29].descriptor;
}

const RSRemoveReq& RSRemoveReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSRemoveReq* RSRemoveReq::New(::google::protobuf::Arena* arena) const {
  RSRemoveReq* n = new RSRemoveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSRemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSRemoveReq)
  member_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool RSRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSRemoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string member_ip = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member_ip().data(), this->member_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.RSRemoveReq.member_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSRemoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSRemoveReq)
  return false;
#undef DO_
}

void RSRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSRemoveReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // string member_ip = 3;
  if (this->member_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_ip().data(), this->member_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSRemoveReq.member_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->member_ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSRemoveReq)
}

::google::protobuf::uint8* RSRemoveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSRemoveReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // string member_ip = 3;
  if (this->member_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member_ip().data(), this->member_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.RSRemoveReq.member_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->member_ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSRemoveReq)
  return target;
}

size_t RSRemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSRemoveReq)
  size_t total_size = 0;

  // string member_ip = 3;
  if (this->member_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->member_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RSRemoveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSRemoveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSRemoveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSRemoveReq)
    MergeFrom(*source);
  }
}

void RSRemoveReq::MergeFrom(const RSRemoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.member_ip().size() > 0) {

    member_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void RSRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSRemoveReq::CopyFrom(const RSRemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSRemoveReq::IsInitialized() const {
  return true;
}

void RSRemoveReq::Swap(RSRemoveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSRemoveReq::InternalSwap(RSRemoveReq* other) {
  member_ip_.Swap(&other->member_ip_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSRemoveReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSRemoveReq

// .cmongoproto.ReqHeader header = 1;
bool RSRemoveReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSRemoveReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RSRemoveReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSRemoveReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RSRemoveReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSRemoveReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RSRemoveReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSRemoveReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSRemoveReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSRemoveReq.header)
}

// int32 container_id = 2;
void RSRemoveReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 RSRemoveReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSRemoveReq.container_id)
  return container_id_;
}
void RSRemoveReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.RSRemoveReq.container_id)
}

// string member_ip = 3;
void RSRemoveReq::clear_member_ip() {
  member_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSRemoveReq::member_ip() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSRemoveReq.member_ip)
  return member_ip_.GetNoArena();
}
void RSRemoveReq::set_member_ip(const ::std::string& value) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.RSRemoveReq.member_ip)
}
#if LANG_CXX11
void RSRemoveReq::set_member_ip(::std::string&& value) {
  
  member_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.RSRemoveReq.member_ip)
}
#endif
void RSRemoveReq::set_member_ip(const char* value) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.RSRemoveReq.member_ip)
}
void RSRemoveReq::set_member_ip(const char* value, size_t size) {
  
  member_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.RSRemoveReq.member_ip)
}
::std::string* RSRemoveReq::mutable_member_ip() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSRemoveReq.member_ip)
  return member_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSRemoveReq::release_member_ip() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSRemoveReq.member_ip)
  
  return member_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSRemoveReq::set_allocated_member_ip(::std::string* member_ip) {
  if (member_ip != NULL) {
    
  } else {
    
  }
  member_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), member_ip);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSRemoveReq.member_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSRemoveRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSRemoveRes::RSRemoveRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.RSRemoveRes)
}
RSRemoveRes::RSRemoveRes(const RSRemoveRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.RSRemoveRes)
}

void RSRemoveRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RSRemoveRes::~RSRemoveRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.RSRemoveRes)
  SharedDtor();
}

void RSRemoveRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RSRemoveRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSRemoveRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[30].descriptor;
}

const RSRemoveRes& RSRemoveRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSRemoveRes* RSRemoveRes::New(::google::protobuf::Arena* arena) const {
  RSRemoveRes* n = new RSRemoveRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSRemoveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.RSRemoveRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RSRemoveRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.RSRemoveRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.RSRemoveRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.RSRemoveRes)
  return false;
#undef DO_
}

void RSRemoveRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.RSRemoveRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.RSRemoveRes)
}

::google::protobuf::uint8* RSRemoveRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.RSRemoveRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.RSRemoveRes)
  return target;
}

size_t RSRemoveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.RSRemoveRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSRemoveRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.RSRemoveRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RSRemoveRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSRemoveRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.RSRemoveRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.RSRemoveRes)
    MergeFrom(*source);
  }
}

void RSRemoveRes::MergeFrom(const RSRemoveRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.RSRemoveRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RSRemoveRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.RSRemoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSRemoveRes::CopyFrom(const RSRemoveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.RSRemoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSRemoveRes::IsInitialized() const {
  return true;
}

void RSRemoveRes::Swap(RSRemoveRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSRemoveRes::InternalSwap(RSRemoveRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSRemoveRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSRemoveRes

// .cmongoproto.ResHeader header = 1;
bool RSRemoveRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RSRemoveRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RSRemoveRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.RSRemoveRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RSRemoveRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.RSRemoveRes.header)
  return header_;
}
::cmongoproto::ResHeader* RSRemoveRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.RSRemoveRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RSRemoveRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.RSRemoveRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopContainerReq::kHeaderFieldNumber;
const int StopContainerReq::kContainerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopContainerReq::StopContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.StopContainerReq)
}
StopContainerReq::StopContainerReq(const StopContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.StopContainerReq)
}

void StopContainerReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

StopContainerReq::~StopContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.StopContainerReq)
  SharedDtor();
}

void StopContainerReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StopContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[31].descriptor;
}

const StopContainerReq& StopContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopContainerReq* StopContainerReq::New(::google::protobuf::Arena* arena) const {
  StopContainerReq* n = new StopContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.StopContainerReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool StopContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.StopContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.StopContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.StopContainerReq)
  return false;
#undef DO_
}

void StopContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.StopContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.StopContainerReq)
}

::google::protobuf::uint8* StopContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.StopContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.StopContainerReq)
  return target;
}

size_t StopContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.StopContainerReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.StopContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StopContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.StopContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.StopContainerReq)
    MergeFrom(*source);
  }
}

void StopContainerReq::MergeFrom(const StopContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.StopContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void StopContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.StopContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopContainerReq::CopyFrom(const StopContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.StopContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainerReq::IsInitialized() const {
  return true;
}

void StopContainerReq::Swap(StopContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopContainerReq::InternalSwap(StopContainerReq* other) {
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopContainerReq

// .cmongoproto.ReqHeader header = 1;
bool StopContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StopContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& StopContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StopContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* StopContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.StopContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* StopContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.StopContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StopContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.StopContainerReq.header)
}

// int32 container_id = 2;
void StopContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 StopContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StopContainerReq.container_id)
  return container_id_;
}
void StopContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.StopContainerReq.container_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopContainerRes::StopContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.StopContainerRes)
}
StopContainerRes::StopContainerRes(const StopContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.StopContainerRes)
}

void StopContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

StopContainerRes::~StopContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.StopContainerRes)
  SharedDtor();
}

void StopContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void StopContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[32].descriptor;
}

const StopContainerRes& StopContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopContainerRes* StopContainerRes::New(::google::protobuf::Arena* arena) const {
  StopContainerRes* n = new StopContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.StopContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool StopContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.StopContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.StopContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.StopContainerRes)
  return false;
#undef DO_
}

void StopContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.StopContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.StopContainerRes)
}

::google::protobuf::uint8* StopContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.StopContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.StopContainerRes)
  return target;
}

size_t StopContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.StopContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.StopContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StopContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.StopContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.StopContainerRes)
    MergeFrom(*source);
  }
}

void StopContainerRes::MergeFrom(const StopContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.StopContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void StopContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.StopContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopContainerRes::CopyFrom(const StopContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.StopContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopContainerRes::IsInitialized() const {
  return true;
}

void StopContainerRes::Swap(StopContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopContainerRes::InternalSwap(StopContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopContainerRes

// .cmongoproto.ResHeader header = 1;
bool StopContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StopContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& StopContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.StopContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* StopContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.StopContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* StopContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.StopContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StopContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.StopContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandContainerReq::kHeaderFieldNumber;
const int CommandContainerReq::kContainerIdFieldNumber;
const int CommandContainerReq::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandContainerReq::CommandContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.CommandContainerReq)
}
CommandContainerReq::CommandContainerReq(const CommandContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.CommandContainerReq)
}

void CommandContainerReq::SharedCtor() {
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

CommandContainerReq::~CommandContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.CommandContainerReq)
  SharedDtor();
}

void CommandContainerReq::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CommandContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[33].descriptor;
}

const CommandContainerReq& CommandContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandContainerReq* CommandContainerReq::New(::google::protobuf::Arena* arena) const {
  CommandContainerReq* n = new CommandContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.CommandContainerReq)
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool CommandContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.CommandContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string command = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.CommandContainerReq.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.CommandContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.CommandContainerReq)
  return false;
#undef DO_
}

void CommandContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.CommandContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // string command = 3;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CommandContainerReq.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.CommandContainerReq)
}

::google::protobuf::uint8* CommandContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.CommandContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // string command = 3;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.CommandContainerReq.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.CommandContainerReq)
  return target;
}

size_t CommandContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.CommandContainerReq)
  size_t total_size = 0;

  // string command = 3;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.CommandContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.CommandContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.CommandContainerReq)
    MergeFrom(*source);
  }
}

void CommandContainerReq::MergeFrom(const CommandContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.CommandContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void CommandContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.CommandContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandContainerReq::CopyFrom(const CommandContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.CommandContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandContainerReq::IsInitialized() const {
  return true;
}

void CommandContainerReq::Swap(CommandContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandContainerReq::InternalSwap(CommandContainerReq* other) {
  command_.Swap(&other->command_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandContainerReq

// .cmongoproto.ReqHeader header = 1;
bool CommandContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CommandContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CommandContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CommandContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CommandContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CommandContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CommandContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.CommandContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CommandContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CommandContainerReq.header)
}

// int32 container_id = 2;
void CommandContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 CommandContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CommandContainerReq.container_id)
  return container_id_;
}
void CommandContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.CommandContainerReq.container_id)
}

// string command = 3;
void CommandContainerReq::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommandContainerReq::command() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CommandContainerReq.command)
  return command_.GetNoArena();
}
void CommandContainerReq::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.CommandContainerReq.command)
}
#if LANG_CXX11
void CommandContainerReq::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.CommandContainerReq.command)
}
#endif
void CommandContainerReq::set_command(const char* value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.CommandContainerReq.command)
}
void CommandContainerReq::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.CommandContainerReq.command)
}
::std::string* CommandContainerReq::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.CommandContainerReq.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommandContainerReq::release_command() {
  // @@protoc_insertion_point(field_release:cmongoproto.CommandContainerReq.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommandContainerReq::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CommandContainerReq.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandContainerRes::CommandContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.CommandContainerRes)
}
CommandContainerRes::CommandContainerRes(const CommandContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.CommandContainerRes)
}

void CommandContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CommandContainerRes::~CommandContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.CommandContainerRes)
  SharedDtor();
}

void CommandContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CommandContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[34].descriptor;
}

const CommandContainerRes& CommandContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandContainerRes* CommandContainerRes::New(::google::protobuf::Arena* arena) const {
  CommandContainerRes* n = new CommandContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.CommandContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CommandContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.CommandContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.CommandContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.CommandContainerRes)
  return false;
#undef DO_
}

void CommandContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.CommandContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.CommandContainerRes)
}

::google::protobuf::uint8* CommandContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.CommandContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.CommandContainerRes)
  return target;
}

size_t CommandContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.CommandContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.CommandContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.CommandContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.CommandContainerRes)
    MergeFrom(*source);
  }
}

void CommandContainerRes::MergeFrom(const CommandContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.CommandContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void CommandContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.CommandContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandContainerRes::CopyFrom(const CommandContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.CommandContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandContainerRes::IsInitialized() const {
  return true;
}

void CommandContainerRes::Swap(CommandContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandContainerRes::InternalSwap(CommandContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandContainerRes

// .cmongoproto.ResHeader header = 1;
bool CommandContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CommandContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CommandContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.CommandContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CommandContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.CommandContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* CommandContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.CommandContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CommandContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.CommandContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeContainerReq::kHeaderFieldNumber;
const int ResizeContainerReq::kContainerIdFieldNumber;
const int ResizeContainerReq::kQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeContainerReq::ResizeContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ResizeContainerReq)
}
ResizeContainerReq::ResizeContainerReq(const ResizeContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ResizeContainerReq)
}

void ResizeContainerReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

ResizeContainerReq::~ResizeContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.ResizeContainerReq)
  SharedDtor();
}

void ResizeContainerReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void ResizeContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[35].descriptor;
}

const ResizeContainerReq& ResizeContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeContainerReq* ResizeContainerReq::New(::google::protobuf::Arena* arena) const {
  ResizeContainerReq* n = new ResizeContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ResizeContainerReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  container_id_ = 0;
}

bool ResizeContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ResizeContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ResizeContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ResizeContainerReq)
  return false;
#undef DO_
}

void ResizeContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ResizeContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // .cmongoproto.ResourceDesc quota = 3;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->quota_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ResizeContainerReq)
}

::google::protobuf::uint8* ResizeContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ResizeContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // .cmongoproto.ResourceDesc quota = 3;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->quota_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ResizeContainerReq)
  return target;
}

size_t ResizeContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ResizeContainerReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 3;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ResizeContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ResizeContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ResizeContainerReq)
    MergeFrom(*source);
  }
}

void ResizeContainerReq::MergeFrom(const ResizeContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ResizeContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void ResizeContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ResizeContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeContainerReq::CopyFrom(const ResizeContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ResizeContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeContainerReq::IsInitialized() const {
  return true;
}

void ResizeContainerReq::Swap(ResizeContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeContainerReq::InternalSwap(ResizeContainerReq* other) {
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeContainerReq

// .cmongoproto.ReqHeader header = 1;
bool ResizeContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ResizeContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResizeContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ResizeContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.ResizeContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ResizeContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.ResizeContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ResizeContainerReq.header)
}

// int32 container_id = 2;
void ResizeContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 ResizeContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResizeContainerReq.container_id)
  return container_id_;
}
void ResizeContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.ResizeContainerReq.container_id)
}

// .cmongoproto.ResourceDesc quota = 3;
bool ResizeContainerReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void ResizeContainerReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& ResizeContainerReq::quota() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResizeContainerReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* ResizeContainerReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.ResizeContainerReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* ResizeContainerReq::release_quota() {
  // @@protoc_insertion_point(field_release:cmongoproto.ResizeContainerReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void ResizeContainerReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ResizeContainerReq.quota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeContainerRes::ResizeContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.ResizeContainerRes)
}
ResizeContainerRes::ResizeContainerRes(const ResizeContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.ResizeContainerRes)
}

void ResizeContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ResizeContainerRes::~ResizeContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.ResizeContainerRes)
  SharedDtor();
}

void ResizeContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ResizeContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[36].descriptor;
}

const ResizeContainerRes& ResizeContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeContainerRes* ResizeContainerRes::New(::google::protobuf::Arena* arena) const {
  ResizeContainerRes* n = new ResizeContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.ResizeContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ResizeContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.ResizeContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.ResizeContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.ResizeContainerRes)
  return false;
#undef DO_
}

void ResizeContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.ResizeContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.ResizeContainerRes)
}

::google::protobuf::uint8* ResizeContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.ResizeContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.ResizeContainerRes)
  return target;
}

size_t ResizeContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.ResizeContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.ResizeContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.ResizeContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.ResizeContainerRes)
    MergeFrom(*source);
  }
}

void ResizeContainerRes::MergeFrom(const ResizeContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.ResizeContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ResizeContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.ResizeContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeContainerRes::CopyFrom(const ResizeContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.ResizeContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeContainerRes::IsInitialized() const {
  return true;
}

void ResizeContainerRes::Swap(ResizeContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeContainerRes::InternalSwap(ResizeContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeContainerRes

// .cmongoproto.ResHeader header = 1;
bool ResizeContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ResizeContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.ResizeContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ResizeContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.ResizeContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* ResizeContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.ResizeContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.ResizeContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeContainerReq::kHeaderFieldNumber;
const int UpgradeContainerReq::kContainerIdFieldNumber;
const int UpgradeContainerReq::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeContainerReq::UpgradeContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.UpgradeContainerReq)
}
UpgradeContainerReq::UpgradeContainerReq(const UpgradeContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conf().size() > 0) {
    conf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conf_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_id_ = from.container_id_;
  // @@protoc_insertion_point(copy_constructor:cmongoproto.UpgradeContainerReq)
}

void UpgradeContainerReq::SharedCtor() {
  conf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_id_));
  _cached_size_ = 0;
}

UpgradeContainerReq::~UpgradeContainerReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.UpgradeContainerReq)
  SharedDtor();
}

void UpgradeContainerReq::SharedDtor() {
  conf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpgradeContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeContainerReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[37].descriptor;
}

const UpgradeContainerReq& UpgradeContainerReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeContainerReq* UpgradeContainerReq::New(::google::protobuf::Arena* arena) const {
  UpgradeContainerReq* n = new UpgradeContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.UpgradeContainerReq)
  conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_id_ = 0;
}

bool UpgradeContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.UpgradeContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string conf = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->conf().data(), this->conf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.UpgradeContainerReq.conf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.UpgradeContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.UpgradeContainerReq)
  return false;
#undef DO_
}

void UpgradeContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.UpgradeContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // string conf = 3;
  if (this->conf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conf().data(), this->conf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpgradeContainerReq.conf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->conf(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.UpgradeContainerReq)
}

::google::protobuf::uint8* UpgradeContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.UpgradeContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // string conf = 3;
  if (this->conf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->conf().data(), this->conf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpgradeContainerReq.conf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->conf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.UpgradeContainerReq)
  return target;
}

size_t UpgradeContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.UpgradeContainerReq)
  size_t total_size = 0;

  // string conf = 3;
  if (this->conf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conf());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.UpgradeContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.UpgradeContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.UpgradeContainerReq)
    MergeFrom(*source);
  }
}

void UpgradeContainerReq::MergeFrom(const UpgradeContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.UpgradeContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.conf().size() > 0) {

    conf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conf_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
}

void UpgradeContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.UpgradeContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeContainerReq::CopyFrom(const UpgradeContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.UpgradeContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeContainerReq::IsInitialized() const {
  return true;
}

void UpgradeContainerReq::Swap(UpgradeContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeContainerReq::InternalSwap(UpgradeContainerReq* other) {
  conf_.Swap(&other->conf_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeContainerReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeContainerReq

// .cmongoproto.ReqHeader header = 1;
bool UpgradeContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpgradeContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& UpgradeContainerReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpgradeContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* UpgradeContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpgradeContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* UpgradeContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpgradeContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpgradeContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpgradeContainerReq.header)
}

// int32 container_id = 2;
void UpgradeContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 UpgradeContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpgradeContainerReq.container_id)
  return container_id_;
}
void UpgradeContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.UpgradeContainerReq.container_id)
}

// string conf = 3;
void UpgradeContainerReq::clear_conf() {
  conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpgradeContainerReq::conf() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpgradeContainerReq.conf)
  return conf_.GetNoArena();
}
void UpgradeContainerReq::set_conf(const ::std::string& value) {
  
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.UpgradeContainerReq.conf)
}
#if LANG_CXX11
void UpgradeContainerReq::set_conf(::std::string&& value) {
  
  conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.UpgradeContainerReq.conf)
}
#endif
void UpgradeContainerReq::set_conf(const char* value) {
  
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.UpgradeContainerReq.conf)
}
void UpgradeContainerReq::set_conf(const char* value, size_t size) {
  
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.UpgradeContainerReq.conf)
}
::std::string* UpgradeContainerReq::mutable_conf() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpgradeContainerReq.conf)
  return conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeContainerReq::release_conf() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpgradeContainerReq.conf)
  
  return conf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeContainerReq::set_allocated_conf(::std::string* conf) {
  if (conf != NULL) {
    
  } else {
    
  }
  conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conf);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpgradeContainerReq.conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeContainerRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeContainerRes::UpgradeContainerRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.UpgradeContainerRes)
}
UpgradeContainerRes::UpgradeContainerRes(const UpgradeContainerRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.UpgradeContainerRes)
}

void UpgradeContainerRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

UpgradeContainerRes::~UpgradeContainerRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.UpgradeContainerRes)
  SharedDtor();
}

void UpgradeContainerRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpgradeContainerRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeContainerRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[38].descriptor;
}

const UpgradeContainerRes& UpgradeContainerRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeContainerRes* UpgradeContainerRes::New(::google::protobuf::Arena* arena) const {
  UpgradeContainerRes* n = new UpgradeContainerRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeContainerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.UpgradeContainerRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool UpgradeContainerRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.UpgradeContainerRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.UpgradeContainerRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.UpgradeContainerRes)
  return false;
#undef DO_
}

void UpgradeContainerRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.UpgradeContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.UpgradeContainerRes)
}

::google::protobuf::uint8* UpgradeContainerRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.UpgradeContainerRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.UpgradeContainerRes)
  return target;
}

size_t UpgradeContainerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.UpgradeContainerRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeContainerRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.UpgradeContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeContainerRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeContainerRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.UpgradeContainerRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.UpgradeContainerRes)
    MergeFrom(*source);
  }
}

void UpgradeContainerRes::MergeFrom(const UpgradeContainerRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.UpgradeContainerRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void UpgradeContainerRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.UpgradeContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeContainerRes::CopyFrom(const UpgradeContainerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.UpgradeContainerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeContainerRes::IsInitialized() const {
  return true;
}

void UpgradeContainerRes::Swap(UpgradeContainerRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeContainerRes::InternalSwap(UpgradeContainerRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeContainerRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeContainerRes

// .cmongoproto.ResHeader header = 1;
bool UpgradeContainerRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpgradeContainerRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& UpgradeContainerRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpgradeContainerRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* UpgradeContainerRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpgradeContainerRes.header)
  return header_;
}
::cmongoproto::ResHeader* UpgradeContainerRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpgradeContainerRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpgradeContainerRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpgradeContainerRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContainerModuleReq::kHeaderFieldNumber;
const int UpdateContainerModuleReq::kContainerIdFieldNumber;
const int UpdateContainerModuleReq::kCtypeFieldNumber;
const int UpdateContainerModuleReq::kModuleVersionFieldNumber;
const int UpdateContainerModuleReq::kRestartFieldNumber;
const int UpdateContainerModuleReq::kPackageUrlFieldNumber;
const int UpdateContainerModuleReq::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContainerModuleReq::UpdateContainerModuleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.UpdateContainerModuleReq)
}
UpdateContainerModuleReq::UpdateContainerModuleReq(const UpdateContainerModuleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_version().size() > 0) {
    module_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_version_);
  }
  package_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.package_url().size() > 0) {
    package_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_url_);
  }
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_password().size() > 0) {
    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&container_id_, &from.container_id_,
    reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(restart_));
  // @@protoc_insertion_point(copy_constructor:cmongoproto.UpdateContainerModuleReq)
}

void UpdateContainerModuleReq::SharedCtor() {
  module_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&header_) + sizeof(restart_));
  _cached_size_ = 0;
}

UpdateContainerModuleReq::~UpdateContainerModuleReq() {
  // @@protoc_insertion_point(destructor:cmongoproto.UpdateContainerModuleReq)
  SharedDtor();
}

void UpdateContainerModuleReq::SharedDtor() {
  module_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpdateContainerModuleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContainerModuleReq::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[39].descriptor;
}

const UpdateContainerModuleReq& UpdateContainerModuleReq::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateContainerModuleReq* UpdateContainerModuleReq::New(::google::protobuf::Arena* arena) const {
  UpdateContainerModuleReq* n = new UpdateContainerModuleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateContainerModuleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.UpdateContainerModuleReq)
  module_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&container_id_, 0, reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(restart_));
}

bool UpdateContainerModuleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.UpdateContainerModuleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType ctype = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ctype(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_version = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_version().data(), this->module_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.UpdateContainerModuleReq.module_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 restart = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package_url = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->package_url().data(), this->package_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.UpdateContainerModuleReq.package_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_password = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_password().data(), this->user_password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cmongoproto.UpdateContainerModuleReq.user_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.UpdateContainerModuleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.UpdateContainerModuleReq)
  return false;
#undef DO_
}

void UpdateContainerModuleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.UpdateContainerModuleReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container_id(), output);
  }

  // .cmongoproto.MongoType ctype = 3;
  if (this->ctype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ctype(), output);
  }

  // string module_version = 4;
  if (this->module_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_version().data(), this->module_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.module_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->module_version(), output);
  }

  // int32 restart = 5;
  if (this->restart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->restart(), output);
  }

  // string package_url = 6;
  if (this->package_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_url().data(), this->package_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.package_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->package_url(), output);
  }

  // string user_password = 7;
  if (this->user_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.user_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_password(), output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.UpdateContainerModuleReq)
}

::google::protobuf::uint8* UpdateContainerModuleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.UpdateContainerModuleReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container_id(), target);
  }

  // .cmongoproto.MongoType ctype = 3;
  if (this->ctype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ctype(), target);
  }

  // string module_version = 4;
  if (this->module_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_version().data(), this->module_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.module_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->module_version(), target);
  }

  // int32 restart = 5;
  if (this->restart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->restart(), target);
  }

  // string package_url = 6;
  if (this->package_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->package_url().data(), this->package_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.package_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->package_url(), target);
  }

  // string user_password = 7;
  if (this->user_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_password().data(), this->user_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cmongoproto.UpdateContainerModuleReq.user_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user_password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.UpdateContainerModuleReq)
  return target;
}

size_t UpdateContainerModuleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.UpdateContainerModuleReq)
  size_t total_size = 0;

  // string module_version = 4;
  if (this->module_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_version());
  }

  // string package_url = 6;
  if (this->package_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->package_url());
  }

  // string user_password = 7;
  if (this->user_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_password());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 container_id = 2;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  // .cmongoproto.MongoType ctype = 3;
  if (this->ctype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
  }

  // int32 restart = 5;
  if (this->restart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->restart());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContainerModuleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.UpdateContainerModuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContainerModuleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateContainerModuleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.UpdateContainerModuleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.UpdateContainerModuleReq)
    MergeFrom(*source);
  }
}

void UpdateContainerModuleReq::MergeFrom(const UpdateContainerModuleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.UpdateContainerModuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.module_version().size() > 0) {

    module_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_version_);
  }
  if (from.package_url().size() > 0) {

    package_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_url_);
  }
  if (from.user_password().size() > 0) {

    user_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_password_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
  if (from.ctype() != 0) {
    set_ctype(from.ctype());
  }
  if (from.restart() != 0) {
    set_restart(from.restart());
  }
}

void UpdateContainerModuleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.UpdateContainerModuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerModuleReq::CopyFrom(const UpdateContainerModuleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.UpdateContainerModuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerModuleReq::IsInitialized() const {
  return true;
}

void UpdateContainerModuleReq::Swap(UpdateContainerModuleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContainerModuleReq::InternalSwap(UpdateContainerModuleReq* other) {
  module_version_.Swap(&other->module_version_);
  package_url_.Swap(&other->package_url_);
  user_password_.Swap(&other->user_password_);
  std::swap(header_, other->header_);
  std::swap(container_id_, other->container_id_);
  std::swap(ctype_, other->ctype_);
  std::swap(restart_, other->restart_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateContainerModuleReq::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateContainerModuleReq

// .cmongoproto.ReqHeader header = 1;
bool UpdateContainerModuleReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateContainerModuleReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& UpdateContainerModuleReq::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* UpdateContainerModuleReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpdateContainerModuleReq.header)
  return header_;
}
::cmongoproto::ReqHeader* UpdateContainerModuleReq::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpdateContainerModuleReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateContainerModuleReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpdateContainerModuleReq.header)
}

// int32 container_id = 2;
void UpdateContainerModuleReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 UpdateContainerModuleReq::container_id() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.container_id)
  return container_id_;
}
void UpdateContainerModuleReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.container_id)
}

// .cmongoproto.MongoType ctype = 3;
void UpdateContainerModuleReq::clear_ctype() {
  ctype_ = 0;
}
::cmongoproto::MongoType UpdateContainerModuleReq::ctype() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.ctype)
  return static_cast< ::cmongoproto::MongoType >(ctype_);
}
void UpdateContainerModuleReq::set_ctype(::cmongoproto::MongoType value) {
  
  ctype_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.ctype)
}

// string module_version = 4;
void UpdateContainerModuleReq::clear_module_version() {
  module_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateContainerModuleReq::module_version() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.module_version)
  return module_version_.GetNoArena();
}
void UpdateContainerModuleReq::set_module_version(const ::std::string& value) {
  
  module_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.module_version)
}
#if LANG_CXX11
void UpdateContainerModuleReq::set_module_version(::std::string&& value) {
  
  module_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.UpdateContainerModuleReq.module_version)
}
#endif
void UpdateContainerModuleReq::set_module_version(const char* value) {
  
  module_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.UpdateContainerModuleReq.module_version)
}
void UpdateContainerModuleReq::set_module_version(const char* value, size_t size) {
  
  module_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.UpdateContainerModuleReq.module_version)
}
::std::string* UpdateContainerModuleReq::mutable_module_version() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpdateContainerModuleReq.module_version)
  return module_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateContainerModuleReq::release_module_version() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpdateContainerModuleReq.module_version)
  
  return module_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateContainerModuleReq::set_allocated_module_version(::std::string* module_version) {
  if (module_version != NULL) {
    
  } else {
    
  }
  module_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_version);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpdateContainerModuleReq.module_version)
}

// int32 restart = 5;
void UpdateContainerModuleReq::clear_restart() {
  restart_ = 0;
}
::google::protobuf::int32 UpdateContainerModuleReq::restart() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.restart)
  return restart_;
}
void UpdateContainerModuleReq::set_restart(::google::protobuf::int32 value) {
  
  restart_ = value;
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.restart)
}

// string package_url = 6;
void UpdateContainerModuleReq::clear_package_url() {
  package_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateContainerModuleReq::package_url() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.package_url)
  return package_url_.GetNoArena();
}
void UpdateContainerModuleReq::set_package_url(const ::std::string& value) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.package_url)
}
#if LANG_CXX11
void UpdateContainerModuleReq::set_package_url(::std::string&& value) {
  
  package_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.UpdateContainerModuleReq.package_url)
}
#endif
void UpdateContainerModuleReq::set_package_url(const char* value) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.UpdateContainerModuleReq.package_url)
}
void UpdateContainerModuleReq::set_package_url(const char* value, size_t size) {
  
  package_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.UpdateContainerModuleReq.package_url)
}
::std::string* UpdateContainerModuleReq::mutable_package_url() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpdateContainerModuleReq.package_url)
  return package_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateContainerModuleReq::release_package_url() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpdateContainerModuleReq.package_url)
  
  return package_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateContainerModuleReq::set_allocated_package_url(::std::string* package_url) {
  if (package_url != NULL) {
    
  } else {
    
  }
  package_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_url);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpdateContainerModuleReq.package_url)
}

// string user_password = 7;
void UpdateContainerModuleReq::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateContainerModuleReq::user_password() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleReq.user_password)
  return user_password_.GetNoArena();
}
void UpdateContainerModuleReq::set_user_password(const ::std::string& value) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cmongoproto.UpdateContainerModuleReq.user_password)
}
#if LANG_CXX11
void UpdateContainerModuleReq::set_user_password(::std::string&& value) {
  
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmongoproto.UpdateContainerModuleReq.user_password)
}
#endif
void UpdateContainerModuleReq::set_user_password(const char* value) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmongoproto.UpdateContainerModuleReq.user_password)
}
void UpdateContainerModuleReq::set_user_password(const char* value, size_t size) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmongoproto.UpdateContainerModuleReq.user_password)
}
::std::string* UpdateContainerModuleReq::mutable_user_password() {
  
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpdateContainerModuleReq.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateContainerModuleReq::release_user_password() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpdateContainerModuleReq.user_password)
  
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateContainerModuleReq::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    
  } else {
    
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpdateContainerModuleReq.user_password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContainerModuleRes::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContainerModuleRes::UpdateContainerModuleRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cmongoproto.UpdateContainerModuleRes)
}
UpdateContainerModuleRes::UpdateContainerModuleRes(const UpdateContainerModuleRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cmongoproto.UpdateContainerModuleRes)
}

void UpdateContainerModuleRes::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

UpdateContainerModuleRes::~UpdateContainerModuleRes() {
  // @@protoc_insertion_point(destructor:cmongoproto.UpdateContainerModuleRes)
  SharedDtor();
}

void UpdateContainerModuleRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpdateContainerModuleRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContainerModuleRes::descriptor() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[40].descriptor;
}

const UpdateContainerModuleRes& UpdateContainerModuleRes::default_instance() {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateContainerModuleRes* UpdateContainerModuleRes::New(::google::protobuf::Arena* arena) const {
  UpdateContainerModuleRes* n = new UpdateContainerModuleRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateContainerModuleRes::Clear() {
// @@protoc_insertion_point(message_clear_start:cmongoproto.UpdateContainerModuleRes)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool UpdateContainerModuleRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cmongoproto.UpdateContainerModuleRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cmongoproto.UpdateContainerModuleRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cmongoproto.UpdateContainerModuleRes)
  return false;
#undef DO_
}

void UpdateContainerModuleRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cmongoproto.UpdateContainerModuleRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:cmongoproto.UpdateContainerModuleRes)
}

::google::protobuf::uint8* UpdateContainerModuleRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cmongoproto.UpdateContainerModuleRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cmongoproto.UpdateContainerModuleRes)
  return target;
}

size_t UpdateContainerModuleRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmongoproto.UpdateContainerModuleRes)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContainerModuleRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmongoproto.UpdateContainerModuleRes)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContainerModuleRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateContainerModuleRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmongoproto.UpdateContainerModuleRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cmongoproto.UpdateContainerModuleRes)
    MergeFrom(*source);
  }
}

void UpdateContainerModuleRes::MergeFrom(const UpdateContainerModuleRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmongoproto.UpdateContainerModuleRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void UpdateContainerModuleRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmongoproto.UpdateContainerModuleRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerModuleRes::CopyFrom(const UpdateContainerModuleRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmongoproto.UpdateContainerModuleRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerModuleRes::IsInitialized() const {
  return true;
}

void UpdateContainerModuleRes::Swap(UpdateContainerModuleRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContainerModuleRes::InternalSwap(UpdateContainerModuleRes* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateContainerModuleRes::GetMetadata() const {
  protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateContainerModuleRes

// .cmongoproto.ResHeader header = 1;
bool UpdateContainerModuleRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateContainerModuleRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& UpdateContainerModuleRes::header() const {
  // @@protoc_insertion_point(field_get:cmongoproto.UpdateContainerModuleRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* UpdateContainerModuleRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:cmongoproto.UpdateContainerModuleRes.header)
  return header_;
}
::cmongoproto::ResHeader* UpdateContainerModuleRes::release_header() {
  // @@protoc_insertion_point(field_release:cmongoproto.UpdateContainerModuleRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateContainerModuleRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cmongoproto.UpdateContainerModuleRes.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cmongoproto

// @@protoc_insertion_point(global_scope)
