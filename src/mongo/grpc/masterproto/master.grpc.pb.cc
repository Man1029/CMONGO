// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cmongo/masterproto/master.proto

#include "mongo/grpc/masterproto/master.pb.h"
#include "mongo/grpc/masterproto/master.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace masterproto {

static const char* Master_method_names[] = {
  "/masterproto.Master/AddResource",
  "/masterproto.Master/BlockResource",
  "/masterproto.Master/UnblockResource",
  "/masterproto.Master/DelResource",
  "/masterproto.Master/QueryResource",
  "/masterproto.Master/MigrateContainer",
  "/masterproto.Master/MigrateMachine",
  "/masterproto.Master/QueryMachine",
  "/masterproto.Master/AddContainer",
  "/masterproto.Master/DelContainer",
  "/masterproto.Master/AddContainerAsync",
  "/masterproto.Master/CreateCluster",
  "/masterproto.Master/UpgradeClusterModule",
  "/masterproto.Master/InfoCluster",
  "/masterproto.Master/DelCluster",
  "/masterproto.Master/ListCluster",
  "/masterproto.Master/ChangePassword",
  "/masterproto.Master/JobStatus",
  "/masterproto.Master/ResizeCluster",
  "/masterproto.Master/BackupCluster",
  "/masterproto.Master/QueryBackupList",
  "/masterproto.Master/CheckRestoreTs",
  "/masterproto.Master/RestoreCluster",
  "/masterproto.Master/ExchangeCluster",
  "/masterproto.Master/IsolationCluster",
  "/masterproto.Master/AddReplicateSet",
  "/masterproto.Master/DelReplicateSet",
  "/masterproto.Master/QueryOpLogStatus",
  "/masterproto.Master/ShowDb",
  "/masterproto.Master/ShowColls",
  "/masterproto.Master/GetSlowQuery",
  "/masterproto.Master/QrySlowInfo",
  "/masterproto.Master/CreateUser",
  "/masterproto.Master/QueryUserList",
  "/masterproto.Master/DeleteUser",
  "/masterproto.Master/SetUserAuth",
  "/masterproto.Master/Ping",
  "/masterproto.Master/CreateTable",
  "/masterproto.Master/DropTable",
  "/masterproto.Master/DropDatabase",
  "/masterproto.Master/EnsureIndex",
  "/masterproto.Master/DropIndex",
  "/masterproto.Master/DropIndexName",
  "/masterproto.Master/ReportMigrateInfo",
  "/masterproto.Master/Migrate",
  "/masterproto.Master/CleanMigrate",
  "/masterproto.Master/GetMigrateStatus",
  "/masterproto.Master/IsTableInMigrating",
  "/masterproto.Master/RestoreFiles",
  "/masterproto.Master/GenBalanceTask",
  "/masterproto.Master/Balance",
  "/masterproto.Master/ChangeRouteStat",
  "/masterproto.Master/ChangeRouteRs",
  "/masterproto.Master/GetClusterRoutes",
  "/masterproto.Master/GetIntersectMigrateJobs",
  "/masterproto.Master/GetClusterInfo",
  "/masterproto.Master/SetProxyNotifyInfo",
  "/masterproto.Master/GetProxyNotifyInfo",
  "/masterproto.Master/SetVersionInfo",
  "/masterproto.Master/GetVersionInfo",
  "/masterproto.Master/ResizeOplog",
  "/masterproto.Master/RestartContainer",
  "/masterproto.Master/SetClusterMaxConns",
  "/masterproto.Master/GetRegionBackupConfig",
  "/masterproto.Master/SetRegionBackupConfig",
  "/masterproto.Master/GetClusterBackupConfig",
  "/masterproto.Master/SetClusterBackupConfig",
  "/masterproto.Master/DelClusterBackupConfig",
  "/masterproto.Master/GetClusterRoutesRaw",
};

std::unique_ptr< Master::Stub> Master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Master::Stub> stub(new Master::Stub(channel));
  return stub;
}

Master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddResource_(Master_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlockResource_(Master_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnblockResource_(Master_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelResource_(Master_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryResource_(Master_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MigrateContainer_(Master_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MigrateMachine_(Master_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMachine_(Master_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddContainer_(Master_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelContainer_(Master_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddContainerAsync_(Master_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCluster_(Master_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpgradeClusterModule_(Master_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InfoCluster_(Master_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelCluster_(Master_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCluster_(Master_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(Master_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JobStatus_(Master_method_names[17], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResizeCluster_(Master_method_names[18], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BackupCluster_(Master_method_names[19], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryBackupList_(Master_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckRestoreTs_(Master_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreCluster_(Master_method_names[22], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeCluster_(Master_method_names[23], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsolationCluster_(Master_method_names[24], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddReplicateSet_(Master_method_names[25], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelReplicateSet_(Master_method_names[26], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryOpLogStatus_(Master_method_names[27], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowDb_(Master_method_names[28], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowColls_(Master_method_names[29], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlowQuery_(Master_method_names[30], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QrySlowInfo_(Master_method_names[31], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateUser_(Master_method_names[32], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryUserList_(Master_method_names[33], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(Master_method_names[34], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUserAuth_(Master_method_names[35], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Master_method_names[36], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTable_(Master_method_names[37], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropTable_(Master_method_names[38], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropDatabase_(Master_method_names[39], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnsureIndex_(Master_method_names[40], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndex_(Master_method_names[41], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndexName_(Master_method_names[42], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportMigrateInfo_(Master_method_names[43], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Migrate_(Master_method_names[44], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanMigrate_(Master_method_names[45], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMigrateStatus_(Master_method_names[46], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsTableInMigrating_(Master_method_names[47], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreFiles_(Master_method_names[48], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenBalanceTask_(Master_method_names[49], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Balance_(Master_method_names[50], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeRouteStat_(Master_method_names[51], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeRouteRs_(Master_method_names[52], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterRoutes_(Master_method_names[53], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIntersectMigrateJobs_(Master_method_names[54], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterInfo_(Master_method_names[55], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProxyNotifyInfo_(Master_method_names[56], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProxyNotifyInfo_(Master_method_names[57], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVersionInfo_(Master_method_names[58], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersionInfo_(Master_method_names[59], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResizeOplog_(Master_method_names[60], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartContainer_(Master_method_names[61], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClusterMaxConns_(Master_method_names[62], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRegionBackupConfig_(Master_method_names[63], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRegionBackupConfig_(Master_method_names[64], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterBackupConfig_(Master_method_names[65], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClusterBackupConfig_(Master_method_names[66], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelClusterBackupConfig_(Master_method_names[67], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterRoutesRaw_(Master_method_names[68], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Master::Stub::AddResource(::grpc::ClientContext* context, const ::masterproto::AddResourceReq& request, ::masterproto::AddResourceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddResource_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::AddResourceRsp>* Master::Stub::AsyncAddResourceRaw(::grpc::ClientContext* context, const ::masterproto::AddResourceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::AddResourceRsp>(channel_.get(), cq, rpcmethod_AddResource_, context, request);
}

::grpc::Status Master::Stub::BlockResource(::grpc::ClientContext* context, const ::masterproto::BlockResourceReq& request, ::masterproto::BlockResourceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BlockResource_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::BlockResourceRsp>* Master::Stub::AsyncBlockResourceRaw(::grpc::ClientContext* context, const ::masterproto::BlockResourceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::BlockResourceRsp>(channel_.get(), cq, rpcmethod_BlockResource_, context, request);
}

::grpc::Status Master::Stub::UnblockResource(::grpc::ClientContext* context, const ::masterproto::UnblockResourceReq& request, ::masterproto::UnblockResourceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UnblockResource_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::UnblockResourceRsp>* Master::Stub::AsyncUnblockResourceRaw(::grpc::ClientContext* context, const ::masterproto::UnblockResourceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::UnblockResourceRsp>(channel_.get(), cq, rpcmethod_UnblockResource_, context, request);
}

::grpc::Status Master::Stub::DelResource(::grpc::ClientContext* context, const ::masterproto::DelResourceReq& request, ::masterproto::DelResourceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DelResource_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DelResourceRsp>* Master::Stub::AsyncDelResourceRaw(::grpc::ClientContext* context, const ::masterproto::DelResourceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DelResourceRsp>(channel_.get(), cq, rpcmethod_DelResource_, context, request);
}

::grpc::Status Master::Stub::QueryResource(::grpc::ClientContext* context, const ::masterproto::QueryResourceReq& request, ::masterproto::QueryResourceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryResource_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::QueryResourceRsp>* Master::Stub::AsyncQueryResourceRaw(::grpc::ClientContext* context, const ::masterproto::QueryResourceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::QueryResourceRsp>(channel_.get(), cq, rpcmethod_QueryResource_, context, request);
}

::grpc::Status Master::Stub::MigrateContainer(::grpc::ClientContext* context, const ::masterproto::MigrateContainerReq& request, ::masterproto::MigrateContainerRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_MigrateContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::MigrateContainerRsp>* Master::Stub::AsyncMigrateContainerRaw(::grpc::ClientContext* context, const ::masterproto::MigrateContainerReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::MigrateContainerRsp>(channel_.get(), cq, rpcmethod_MigrateContainer_, context, request);
}

::grpc::Status Master::Stub::MigrateMachine(::grpc::ClientContext* context, const ::masterproto::MigrateMachineReq& request, ::masterproto::MigrateMachineRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_MigrateMachine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::MigrateMachineRsp>* Master::Stub::AsyncMigrateMachineRaw(::grpc::ClientContext* context, const ::masterproto::MigrateMachineReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::MigrateMachineRsp>(channel_.get(), cq, rpcmethod_MigrateMachine_, context, request);
}

::grpc::Status Master::Stub::QueryMachine(::grpc::ClientContext* context, const ::masterproto::QueryMachineReq& request, ::masterproto::QueryMachineRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryMachine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::QueryMachineRsp>* Master::Stub::AsyncQueryMachineRaw(::grpc::ClientContext* context, const ::masterproto::QueryMachineReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::QueryMachineRsp>(channel_.get(), cq, rpcmethod_QueryMachine_, context, request);
}

::grpc::Status Master::Stub::AddContainer(::grpc::ClientContext* context, const ::masterproto::AddContainerReq& request, ::masterproto::AddContainerRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::AddContainerRsp>* Master::Stub::AsyncAddContainerRaw(::grpc::ClientContext* context, const ::masterproto::AddContainerReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::AddContainerRsp>(channel_.get(), cq, rpcmethod_AddContainer_, context, request);
}

::grpc::Status Master::Stub::DelContainer(::grpc::ClientContext* context, const ::masterproto::DelContainerReq& request, ::masterproto::DelContainerRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DelContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DelContainerRsp>* Master::Stub::AsyncDelContainerRaw(::grpc::ClientContext* context, const ::masterproto::DelContainerReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DelContainerRsp>(channel_.get(), cq, rpcmethod_DelContainer_, context, request);
}

::grpc::Status Master::Stub::AddContainerAsync(::grpc::ClientContext* context, const ::masterproto::AddContainerAsyncReq& request, ::masterproto::AddContainerAsyncRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddContainerAsync_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::AddContainerAsyncRsp>* Master::Stub::AsyncAddContainerAsyncRaw(::grpc::ClientContext* context, const ::masterproto::AddContainerAsyncReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::AddContainerAsyncRsp>(channel_.get(), cq, rpcmethod_AddContainerAsync_, context, request);
}

::grpc::Status Master::Stub::CreateCluster(::grpc::ClientContext* context, const ::masterproto::CreateClusterReq& request, ::masterproto::CreateClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::CreateClusterRsp>* Master::Stub::AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::masterproto::CreateClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::CreateClusterRsp>(channel_.get(), cq, rpcmethod_CreateCluster_, context, request);
}

::grpc::Status Master::Stub::UpgradeClusterModule(::grpc::ClientContext* context, const ::masterproto::UpgradeClusterModuleReq& request, ::masterproto::UpgradeClusterModuleRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpgradeClusterModule_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::UpgradeClusterModuleRsp>* Master::Stub::AsyncUpgradeClusterModuleRaw(::grpc::ClientContext* context, const ::masterproto::UpgradeClusterModuleReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::UpgradeClusterModuleRsp>(channel_.get(), cq, rpcmethod_UpgradeClusterModule_, context, request);
}

::grpc::Status Master::Stub::InfoCluster(::grpc::ClientContext* context, const ::masterproto::InfoClusterReq& request, ::masterproto::InfoClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_InfoCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::InfoClusterRsp>* Master::Stub::AsyncInfoClusterRaw(::grpc::ClientContext* context, const ::masterproto::InfoClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::InfoClusterRsp>(channel_.get(), cq, rpcmethod_InfoCluster_, context, request);
}

::grpc::Status Master::Stub::DelCluster(::grpc::ClientContext* context, const ::masterproto::DelClusterReq& request, ::masterproto::DelClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DelCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DelClusterRsp>* Master::Stub::AsyncDelClusterRaw(::grpc::ClientContext* context, const ::masterproto::DelClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DelClusterRsp>(channel_.get(), cq, rpcmethod_DelCluster_, context, request);
}

::grpc::Status Master::Stub::ListCluster(::grpc::ClientContext* context, const ::masterproto::ListClusterReq& request, ::masterproto::ListClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ListClusterRsp>* Master::Stub::AsyncListClusterRaw(::grpc::ClientContext* context, const ::masterproto::ListClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ListClusterRsp>(channel_.get(), cq, rpcmethod_ListCluster_, context, request);
}

::grpc::Status Master::Stub::ChangePassword(::grpc::ClientContext* context, const ::masterproto::ChPasswdReq& request, ::masterproto::ChPasswdRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ChPasswdRsp>* Master::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::masterproto::ChPasswdReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ChPasswdRsp>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::Status Master::Stub::JobStatus(::grpc::ClientContext* context, const ::masterproto::JobStatusReq& request, ::masterproto::JobStatusRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_JobStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::JobStatusRsp>* Master::Stub::AsyncJobStatusRaw(::grpc::ClientContext* context, const ::masterproto::JobStatusReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::JobStatusRsp>(channel_.get(), cq, rpcmethod_JobStatus_, context, request);
}

::grpc::Status Master::Stub::ResizeCluster(::grpc::ClientContext* context, const ::masterproto::ResizeClusterReq& request, ::masterproto::ResizeClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResizeCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ResizeClusterRsp>* Master::Stub::AsyncResizeClusterRaw(::grpc::ClientContext* context, const ::masterproto::ResizeClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ResizeClusterRsp>(channel_.get(), cq, rpcmethod_ResizeCluster_, context, request);
}

::grpc::Status Master::Stub::BackupCluster(::grpc::ClientContext* context, const ::masterproto::BackupClusterReq& request, ::masterproto::BackupClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BackupCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::BackupClusterRsp>* Master::Stub::AsyncBackupClusterRaw(::grpc::ClientContext* context, const ::masterproto::BackupClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::BackupClusterRsp>(channel_.get(), cq, rpcmethod_BackupCluster_, context, request);
}

::grpc::Status Master::Stub::QueryBackupList(::grpc::ClientContext* context, const ::masterproto::QueryBackupListReq& request, ::masterproto::QueryBackupListRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryBackupList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::QueryBackupListRsp>* Master::Stub::AsyncQueryBackupListRaw(::grpc::ClientContext* context, const ::masterproto::QueryBackupListReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::QueryBackupListRsp>(channel_.get(), cq, rpcmethod_QueryBackupList_, context, request);
}

::grpc::Status Master::Stub::CheckRestoreTs(::grpc::ClientContext* context, const ::masterproto::CheckRestoreTsReq& request, ::masterproto::CheckRestoreTsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CheckRestoreTs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::CheckRestoreTsRsp>* Master::Stub::AsyncCheckRestoreTsRaw(::grpc::ClientContext* context, const ::masterproto::CheckRestoreTsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::CheckRestoreTsRsp>(channel_.get(), cq, rpcmethod_CheckRestoreTs_, context, request);
}

::grpc::Status Master::Stub::RestoreCluster(::grpc::ClientContext* context, const ::masterproto::RestoreClusterReq& request, ::masterproto::RestoreClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RestoreCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::RestoreClusterRsp>* Master::Stub::AsyncRestoreClusterRaw(::grpc::ClientContext* context, const ::masterproto::RestoreClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::RestoreClusterRsp>(channel_.get(), cq, rpcmethod_RestoreCluster_, context, request);
}

::grpc::Status Master::Stub::ExchangeCluster(::grpc::ClientContext* context, const ::masterproto::ExchangeClusterReq& request, ::masterproto::ExchangeClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ExchangeCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ExchangeClusterRsp>* Master::Stub::AsyncExchangeClusterRaw(::grpc::ClientContext* context, const ::masterproto::ExchangeClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ExchangeClusterRsp>(channel_.get(), cq, rpcmethod_ExchangeCluster_, context, request);
}

::grpc::Status Master::Stub::IsolationCluster(::grpc::ClientContext* context, const ::masterproto::IsolationClusterReq& request, ::masterproto::IsolationClusterRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IsolationCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::IsolationClusterRsp>* Master::Stub::AsyncIsolationClusterRaw(::grpc::ClientContext* context, const ::masterproto::IsolationClusterReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::IsolationClusterRsp>(channel_.get(), cq, rpcmethod_IsolationCluster_, context, request);
}

::grpc::Status Master::Stub::AddReplicateSet(::grpc::ClientContext* context, const ::masterproto::AddRsReq& request, ::masterproto::AddRsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddReplicateSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::AddRsRsp>* Master::Stub::AsyncAddReplicateSetRaw(::grpc::ClientContext* context, const ::masterproto::AddRsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::AddRsRsp>(channel_.get(), cq, rpcmethod_AddReplicateSet_, context, request);
}

::grpc::Status Master::Stub::DelReplicateSet(::grpc::ClientContext* context, const ::masterproto::DelRsReq& request, ::masterproto::DelRsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DelReplicateSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DelRsRsp>* Master::Stub::AsyncDelReplicateSetRaw(::grpc::ClientContext* context, const ::masterproto::DelRsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DelRsRsp>(channel_.get(), cq, rpcmethod_DelReplicateSet_, context, request);
}

::grpc::Status Master::Stub::QueryOpLogStatus(::grpc::ClientContext* context, const ::masterproto::OpLogStatusReq& request, ::masterproto::OpLogStatusRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryOpLogStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::OpLogStatusRsp>* Master::Stub::AsyncQueryOpLogStatusRaw(::grpc::ClientContext* context, const ::masterproto::OpLogStatusReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::OpLogStatusRsp>(channel_.get(), cq, rpcmethod_QueryOpLogStatus_, context, request);
}

::grpc::Status Master::Stub::ShowDb(::grpc::ClientContext* context, const ::masterproto::ShowDbReq& request, ::masterproto::ShowDbRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ShowDb_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ShowDbRsp>* Master::Stub::AsyncShowDbRaw(::grpc::ClientContext* context, const ::masterproto::ShowDbReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ShowDbRsp>(channel_.get(), cq, rpcmethod_ShowDb_, context, request);
}

::grpc::Status Master::Stub::ShowColls(::grpc::ClientContext* context, const ::masterproto::ShowCollsReq& request, ::masterproto::ShowCollsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ShowColls_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ShowCollsRsp>* Master::Stub::AsyncShowCollsRaw(::grpc::ClientContext* context, const ::masterproto::ShowCollsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ShowCollsRsp>(channel_.get(), cq, rpcmethod_ShowColls_, context, request);
}

::grpc::Status Master::Stub::GetSlowQuery(::grpc::ClientContext* context, const ::masterproto::GetSlowQueryReq& request, ::masterproto::GetSlowQueryRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSlowQuery_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetSlowQueryRsp>* Master::Stub::AsyncGetSlowQueryRaw(::grpc::ClientContext* context, const ::masterproto::GetSlowQueryReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetSlowQueryRsp>(channel_.get(), cq, rpcmethod_GetSlowQuery_, context, request);
}

::grpc::Status Master::Stub::QrySlowInfo(::grpc::ClientContext* context, const ::masterproto::QrySlowInfoReq& request, ::masterproto::QrySlowInfoRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QrySlowInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::QrySlowInfoRsp>* Master::Stub::AsyncQrySlowInfoRaw(::grpc::ClientContext* context, const ::masterproto::QrySlowInfoReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::QrySlowInfoRsp>(channel_.get(), cq, rpcmethod_QrySlowInfo_, context, request);
}

::grpc::Status Master::Stub::CreateUser(::grpc::ClientContext* context, const ::masterproto::CreateUserReq& request, ::masterproto::CreateUserRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::CreateUserRsp>* Master::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::masterproto::CreateUserReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::CreateUserRsp>(channel_.get(), cq, rpcmethod_CreateUser_, context, request);
}

::grpc::Status Master::Stub::QueryUserList(::grpc::ClientContext* context, const ::masterproto::QueryUserListReq& request, ::masterproto::QueryUserListRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryUserList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::QueryUserListRsp>* Master::Stub::AsyncQueryUserListRaw(::grpc::ClientContext* context, const ::masterproto::QueryUserListReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::QueryUserListRsp>(channel_.get(), cq, rpcmethod_QueryUserList_, context, request);
}

::grpc::Status Master::Stub::DeleteUser(::grpc::ClientContext* context, const ::masterproto::DeleteUserReq& request, ::masterproto::DeleteUserRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DeleteUserRsp>* Master::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::masterproto::DeleteUserReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DeleteUserRsp>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::Status Master::Stub::SetUserAuth(::grpc::ClientContext* context, const ::masterproto::SetUserAuthReq& request, ::masterproto::SetUserAuthRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetUserAuth_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetUserAuthRsp>* Master::Stub::AsyncSetUserAuthRaw(::grpc::ClientContext* context, const ::masterproto::SetUserAuthReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetUserAuthRsp>(channel_.get(), cq, rpcmethod_SetUserAuth_, context, request);
}

::grpc::Status Master::Stub::Ping(::grpc::ClientContext* context, const ::cmongoproto::PingReq& request, ::cmongoproto::PingRes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cmongoproto::PingRes>* Master::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::cmongoproto::PingReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::cmongoproto::PingRes>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status Master::Stub::CreateTable(::grpc::ClientContext* context, const ::masterproto::CreateTableReq& request, ::masterproto::CreateTableRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::CreateTableRsp>* Master::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::masterproto::CreateTableReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::CreateTableRsp>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::Status Master::Stub::DropTable(::grpc::ClientContext* context, const ::masterproto::DropTableReq& request, ::masterproto::DropTableRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DropTable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DropTableRsp>* Master::Stub::AsyncDropTableRaw(::grpc::ClientContext* context, const ::masterproto::DropTableReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DropTableRsp>(channel_.get(), cq, rpcmethod_DropTable_, context, request);
}

::grpc::Status Master::Stub::DropDatabase(::grpc::ClientContext* context, const ::masterproto::DropDatabaseReq& request, ::masterproto::DropDatabaseRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DropDatabase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DropDatabaseRsp>* Master::Stub::AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::masterproto::DropDatabaseReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DropDatabaseRsp>(channel_.get(), cq, rpcmethod_DropDatabase_, context, request);
}

::grpc::Status Master::Stub::EnsureIndex(::grpc::ClientContext* context, const ::masterproto::EnsureIndexReq& request, ::masterproto::EnsureIndexRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_EnsureIndex_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::EnsureIndexRsp>* Master::Stub::AsyncEnsureIndexRaw(::grpc::ClientContext* context, const ::masterproto::EnsureIndexReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::EnsureIndexRsp>(channel_.get(), cq, rpcmethod_EnsureIndex_, context, request);
}

::grpc::Status Master::Stub::DropIndex(::grpc::ClientContext* context, const ::masterproto::DropIndexReq& request, ::masterproto::DropIndexRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DropIndex_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DropIndexRsp>* Master::Stub::AsyncDropIndexRaw(::grpc::ClientContext* context, const ::masterproto::DropIndexReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DropIndexRsp>(channel_.get(), cq, rpcmethod_DropIndex_, context, request);
}

::grpc::Status Master::Stub::DropIndexName(::grpc::ClientContext* context, const ::masterproto::DropIndexNameReq& request, ::masterproto::DropIndexNameRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DropIndexName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DropIndexNameRsp>* Master::Stub::AsyncDropIndexNameRaw(::grpc::ClientContext* context, const ::masterproto::DropIndexNameReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DropIndexNameRsp>(channel_.get(), cq, rpcmethod_DropIndexName_, context, request);
}

::grpc::Status Master::Stub::ReportMigrateInfo(::grpc::ClientContext* context, const ::masterproto::ReportMigrateInfoReq& request, ::masterproto::ReportMigrateInfoRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReportMigrateInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ReportMigrateInfoRsp>* Master::Stub::AsyncReportMigrateInfoRaw(::grpc::ClientContext* context, const ::masterproto::ReportMigrateInfoReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ReportMigrateInfoRsp>(channel_.get(), cq, rpcmethod_ReportMigrateInfo_, context, request);
}

::grpc::Status Master::Stub::Migrate(::grpc::ClientContext* context, const ::masterproto::MigrateReq& request, ::masterproto::MigrateRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Migrate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::MigrateRsp>* Master::Stub::AsyncMigrateRaw(::grpc::ClientContext* context, const ::masterproto::MigrateReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::MigrateRsp>(channel_.get(), cq, rpcmethod_Migrate_, context, request);
}

::grpc::Status Master::Stub::CleanMigrate(::grpc::ClientContext* context, const ::masterproto::CleanMigrateReq& request, ::masterproto::CleanMigrateRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CleanMigrate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::CleanMigrateRsp>* Master::Stub::AsyncCleanMigrateRaw(::grpc::ClientContext* context, const ::masterproto::CleanMigrateReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::CleanMigrateRsp>(channel_.get(), cq, rpcmethod_CleanMigrate_, context, request);
}

::grpc::Status Master::Stub::GetMigrateStatus(::grpc::ClientContext* context, const ::masterproto::GetMigrateStatusReq& request, ::masterproto::GetMigrateStatusRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMigrateStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetMigrateStatusRsp>* Master::Stub::AsyncGetMigrateStatusRaw(::grpc::ClientContext* context, const ::masterproto::GetMigrateStatusReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetMigrateStatusRsp>(channel_.get(), cq, rpcmethod_GetMigrateStatus_, context, request);
}

::grpc::Status Master::Stub::IsTableInMigrating(::grpc::ClientContext* context, const ::masterproto::IsTableInMigratingReq& request, ::masterproto::IsTableInMigratingRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IsTableInMigrating_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::IsTableInMigratingRsp>* Master::Stub::AsyncIsTableInMigratingRaw(::grpc::ClientContext* context, const ::masterproto::IsTableInMigratingReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::IsTableInMigratingRsp>(channel_.get(), cq, rpcmethod_IsTableInMigrating_, context, request);
}

::grpc::Status Master::Stub::RestoreFiles(::grpc::ClientContext* context, const ::masterproto::RestoreFilesReq& request, ::masterproto::RestoreFilesRes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RestoreFiles_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::RestoreFilesRes>* Master::Stub::AsyncRestoreFilesRaw(::grpc::ClientContext* context, const ::masterproto::RestoreFilesReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::RestoreFilesRes>(channel_.get(), cq, rpcmethod_RestoreFiles_, context, request);
}

::grpc::Status Master::Stub::GenBalanceTask(::grpc::ClientContext* context, const ::masterproto::GenBalanceTaskReq& request, ::masterproto::GenBalanceTaskRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GenBalanceTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GenBalanceTaskRsp>* Master::Stub::AsyncGenBalanceTaskRaw(::grpc::ClientContext* context, const ::masterproto::GenBalanceTaskReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GenBalanceTaskRsp>(channel_.get(), cq, rpcmethod_GenBalanceTask_, context, request);
}

::grpc::Status Master::Stub::Balance(::grpc::ClientContext* context, const ::masterproto::BalanceReq& request, ::masterproto::BalanceRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Balance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::BalanceRsp>* Master::Stub::AsyncBalanceRaw(::grpc::ClientContext* context, const ::masterproto::BalanceReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::BalanceRsp>(channel_.get(), cq, rpcmethod_Balance_, context, request);
}

::grpc::Status Master::Stub::ChangeRouteStat(::grpc::ClientContext* context, const ::masterproto::ChangeRouteStateReq& request, ::masterproto::ChangeRouteStateRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeRouteStat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ChangeRouteStateRsp>* Master::Stub::AsyncChangeRouteStatRaw(::grpc::ClientContext* context, const ::masterproto::ChangeRouteStateReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ChangeRouteStateRsp>(channel_.get(), cq, rpcmethod_ChangeRouteStat_, context, request);
}

::grpc::Status Master::Stub::ChangeRouteRs(::grpc::ClientContext* context, const ::masterproto::ChangeRouteRsReq& request, ::masterproto::ChangeRouteRsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeRouteRs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ChangeRouteRsRsp>* Master::Stub::AsyncChangeRouteRsRaw(::grpc::ClientContext* context, const ::masterproto::ChangeRouteRsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ChangeRouteRsRsp>(channel_.get(), cq, rpcmethod_ChangeRouteRs_, context, request);
}

::grpc::Status Master::Stub::GetClusterRoutes(::grpc::ClientContext* context, const ::masterproto::GetClusterRoutesReq& request, ::masterproto::GetClusterRoutesRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetClusterRoutes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterRoutesRsp>* Master::Stub::AsyncGetClusterRoutesRaw(::grpc::ClientContext* context, const ::masterproto::GetClusterRoutesReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterRoutesRsp>(channel_.get(), cq, rpcmethod_GetClusterRoutes_, context, request);
}

::grpc::Status Master::Stub::GetIntersectMigrateJobs(::grpc::ClientContext* context, const ::masterproto::GetIntersectMigrateJobsReq& request, ::masterproto::GetIntersectMigrateJobsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetIntersectMigrateJobs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetIntersectMigrateJobsRsp>* Master::Stub::AsyncGetIntersectMigrateJobsRaw(::grpc::ClientContext* context, const ::masterproto::GetIntersectMigrateJobsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetIntersectMigrateJobsRsp>(channel_.get(), cq, rpcmethod_GetIntersectMigrateJobs_, context, request);
}

::grpc::Status Master::Stub::GetClusterInfo(::grpc::ClientContext* context, const ::masterproto::GetClusterInfoReq& request, ::masterproto::GetClusterInfoRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetClusterInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterInfoRsp>* Master::Stub::AsyncGetClusterInfoRaw(::grpc::ClientContext* context, const ::masterproto::GetClusterInfoReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterInfoRsp>(channel_.get(), cq, rpcmethod_GetClusterInfo_, context, request);
}

::grpc::Status Master::Stub::SetProxyNotifyInfo(::grpc::ClientContext* context, const ::masterproto::SetProxyNotifyInfoReq& request, ::masterproto::SetProxyNotifyInfoRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetProxyNotifyInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetProxyNotifyInfoRsp>* Master::Stub::AsyncSetProxyNotifyInfoRaw(::grpc::ClientContext* context, const ::masterproto::SetProxyNotifyInfoReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetProxyNotifyInfoRsp>(channel_.get(), cq, rpcmethod_SetProxyNotifyInfo_, context, request);
}

::grpc::Status Master::Stub::GetProxyNotifyInfo(::grpc::ClientContext* context, const ::masterproto::GetProxyNotifyInfoReq& request, ::masterproto::GetProxyNotifyInfoRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetProxyNotifyInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetProxyNotifyInfoRsp>* Master::Stub::AsyncGetProxyNotifyInfoRaw(::grpc::ClientContext* context, const ::masterproto::GetProxyNotifyInfoReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetProxyNotifyInfoRsp>(channel_.get(), cq, rpcmethod_GetProxyNotifyInfo_, context, request);
}

::grpc::Status Master::Stub::SetVersionInfo(::grpc::ClientContext* context, const ::masterproto::SetVersionReq& request, ::masterproto::SetVersionRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetVersionInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetVersionRsp>* Master::Stub::AsyncSetVersionInfoRaw(::grpc::ClientContext* context, const ::masterproto::SetVersionReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetVersionRsp>(channel_.get(), cq, rpcmethod_SetVersionInfo_, context, request);
}

::grpc::Status Master::Stub::GetVersionInfo(::grpc::ClientContext* context, const ::masterproto::GetVersionReq& request, ::masterproto::GetVersionRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersionInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetVersionRsp>* Master::Stub::AsyncGetVersionInfoRaw(::grpc::ClientContext* context, const ::masterproto::GetVersionReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetVersionRsp>(channel_.get(), cq, rpcmethod_GetVersionInfo_, context, request);
}

::grpc::Status Master::Stub::ResizeOplog(::grpc::ClientContext* context, const ::masterproto::ResizeOplogReq& request, ::masterproto::ResizeOplogRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ResizeOplog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::ResizeOplogRsp>* Master::Stub::AsyncResizeOplogRaw(::grpc::ClientContext* context, const ::masterproto::ResizeOplogReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::ResizeOplogRsp>(channel_.get(), cq, rpcmethod_ResizeOplog_, context, request);
}

::grpc::Status Master::Stub::RestartContainer(::grpc::ClientContext* context, const ::masterproto::RestartContainerReq& request, ::masterproto::RestartContainerRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RestartContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::RestartContainerRsp>* Master::Stub::AsyncRestartContainerRaw(::grpc::ClientContext* context, const ::masterproto::RestartContainerReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::RestartContainerRsp>(channel_.get(), cq, rpcmethod_RestartContainer_, context, request);
}

::grpc::Status Master::Stub::SetClusterMaxConns(::grpc::ClientContext* context, const ::masterproto::SetClusterMaxConnsReq& request, ::masterproto::SetClusterMaxConnsRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetClusterMaxConns_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetClusterMaxConnsRsp>* Master::Stub::AsyncSetClusterMaxConnsRaw(::grpc::ClientContext* context, const ::masterproto::SetClusterMaxConnsReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetClusterMaxConnsRsp>(channel_.get(), cq, rpcmethod_SetClusterMaxConns_, context, request);
}

::grpc::Status Master::Stub::GetRegionBackupConfig(::grpc::ClientContext* context, const ::masterproto::GetRegionBackupConfigReq& request, ::masterproto::GetRegionBackupConfigRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetRegionBackupConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetRegionBackupConfigRsp>* Master::Stub::AsyncGetRegionBackupConfigRaw(::grpc::ClientContext* context, const ::masterproto::GetRegionBackupConfigReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetRegionBackupConfigRsp>(channel_.get(), cq, rpcmethod_GetRegionBackupConfig_, context, request);
}

::grpc::Status Master::Stub::SetRegionBackupConfig(::grpc::ClientContext* context, const ::masterproto::SetRegionBackupConfigReq& request, ::masterproto::SetRegionBackupConfigRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetRegionBackupConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetRegionBackupConfigRsp>* Master::Stub::AsyncSetRegionBackupConfigRaw(::grpc::ClientContext* context, const ::masterproto::SetRegionBackupConfigReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetRegionBackupConfigRsp>(channel_.get(), cq, rpcmethod_SetRegionBackupConfig_, context, request);
}

::grpc::Status Master::Stub::GetClusterBackupConfig(::grpc::ClientContext* context, const ::masterproto::GetClusterBackupConfigReq& request, ::masterproto::GetClusterBackupConfigRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetClusterBackupConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterBackupConfigRsp>* Master::Stub::AsyncGetClusterBackupConfigRaw(::grpc::ClientContext* context, const ::masterproto::GetClusterBackupConfigReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterBackupConfigRsp>(channel_.get(), cq, rpcmethod_GetClusterBackupConfig_, context, request);
}

::grpc::Status Master::Stub::SetClusterBackupConfig(::grpc::ClientContext* context, const ::masterproto::SetClusterBackupConfigReq& request, ::masterproto::SetClusterBackupConfigRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetClusterBackupConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::SetClusterBackupConfigRsp>* Master::Stub::AsyncSetClusterBackupConfigRaw(::grpc::ClientContext* context, const ::masterproto::SetClusterBackupConfigReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::SetClusterBackupConfigRsp>(channel_.get(), cq, rpcmethod_SetClusterBackupConfig_, context, request);
}

::grpc::Status Master::Stub::DelClusterBackupConfig(::grpc::ClientContext* context, const ::masterproto::DelClusterBackupConfigReq& request, ::masterproto::DelClusterBackupConfigRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DelClusterBackupConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::DelClusterBackupConfigRsp>* Master::Stub::AsyncDelClusterBackupConfigRaw(::grpc::ClientContext* context, const ::masterproto::DelClusterBackupConfigReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::DelClusterBackupConfigRsp>(channel_.get(), cq, rpcmethod_DelClusterBackupConfig_, context, request);
}

::grpc::Status Master::Stub::GetClusterRoutesRaw(::grpc::ClientContext* context, const ::masterproto::GetClusterRoutesRawReq& request, ::masterproto::GetClusterRoutesRawRsp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetClusterRoutesRaw_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterRoutesRawRsp>* Master::Stub::AsyncGetClusterRoutesRawRaw(::grpc::ClientContext* context, const ::masterproto::GetClusterRoutesRawReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::masterproto::GetClusterRoutesRawRsp>(channel_.get(), cq, rpcmethod_GetClusterRoutesRaw_, context, request);
}

Master::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::AddResourceReq, ::masterproto::AddResourceRsp>(
          std::mem_fn(&Master::Service::AddResource), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::BlockResourceReq, ::masterproto::BlockResourceRsp>(
          std::mem_fn(&Master::Service::BlockResource), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::UnblockResourceReq, ::masterproto::UnblockResourceRsp>(
          std::mem_fn(&Master::Service::UnblockResource), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DelResourceReq, ::masterproto::DelResourceRsp>(
          std::mem_fn(&Master::Service::DelResource), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::QueryResourceReq, ::masterproto::QueryResourceRsp>(
          std::mem_fn(&Master::Service::QueryResource), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::MigrateContainerReq, ::masterproto::MigrateContainerRsp>(
          std::mem_fn(&Master::Service::MigrateContainer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::MigrateMachineReq, ::masterproto::MigrateMachineRsp>(
          std::mem_fn(&Master::Service::MigrateMachine), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::QueryMachineReq, ::masterproto::QueryMachineRsp>(
          std::mem_fn(&Master::Service::QueryMachine), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::AddContainerReq, ::masterproto::AddContainerRsp>(
          std::mem_fn(&Master::Service::AddContainer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DelContainerReq, ::masterproto::DelContainerRsp>(
          std::mem_fn(&Master::Service::DelContainer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::AddContainerAsyncReq, ::masterproto::AddContainerAsyncRsp>(
          std::mem_fn(&Master::Service::AddContainerAsync), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::CreateClusterReq, ::masterproto::CreateClusterRsp>(
          std::mem_fn(&Master::Service::CreateCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::UpgradeClusterModuleReq, ::masterproto::UpgradeClusterModuleRsp>(
          std::mem_fn(&Master::Service::UpgradeClusterModule), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::InfoClusterReq, ::masterproto::InfoClusterRsp>(
          std::mem_fn(&Master::Service::InfoCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DelClusterReq, ::masterproto::DelClusterRsp>(
          std::mem_fn(&Master::Service::DelCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ListClusterReq, ::masterproto::ListClusterRsp>(
          std::mem_fn(&Master::Service::ListCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ChPasswdReq, ::masterproto::ChPasswdRsp>(
          std::mem_fn(&Master::Service::ChangePassword), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[17],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::JobStatusReq, ::masterproto::JobStatusRsp>(
          std::mem_fn(&Master::Service::JobStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[18],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ResizeClusterReq, ::masterproto::ResizeClusterRsp>(
          std::mem_fn(&Master::Service::ResizeCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[19],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::BackupClusterReq, ::masterproto::BackupClusterRsp>(
          std::mem_fn(&Master::Service::BackupCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::QueryBackupListReq, ::masterproto::QueryBackupListRsp>(
          std::mem_fn(&Master::Service::QueryBackupList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::CheckRestoreTsReq, ::masterproto::CheckRestoreTsRsp>(
          std::mem_fn(&Master::Service::CheckRestoreTs), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[22],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::RestoreClusterReq, ::masterproto::RestoreClusterRsp>(
          std::mem_fn(&Master::Service::RestoreCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[23],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ExchangeClusterReq, ::masterproto::ExchangeClusterRsp>(
          std::mem_fn(&Master::Service::ExchangeCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[24],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::IsolationClusterReq, ::masterproto::IsolationClusterRsp>(
          std::mem_fn(&Master::Service::IsolationCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[25],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::AddRsReq, ::masterproto::AddRsRsp>(
          std::mem_fn(&Master::Service::AddReplicateSet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[26],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DelRsReq, ::masterproto::DelRsRsp>(
          std::mem_fn(&Master::Service::DelReplicateSet), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[27],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::OpLogStatusReq, ::masterproto::OpLogStatusRsp>(
          std::mem_fn(&Master::Service::QueryOpLogStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[28],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ShowDbReq, ::masterproto::ShowDbRsp>(
          std::mem_fn(&Master::Service::ShowDb), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[29],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ShowCollsReq, ::masterproto::ShowCollsRsp>(
          std::mem_fn(&Master::Service::ShowColls), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[30],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetSlowQueryReq, ::masterproto::GetSlowQueryRsp>(
          std::mem_fn(&Master::Service::GetSlowQuery), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[31],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::QrySlowInfoReq, ::masterproto::QrySlowInfoRsp>(
          std::mem_fn(&Master::Service::QrySlowInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[32],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::CreateUserReq, ::masterproto::CreateUserRsp>(
          std::mem_fn(&Master::Service::CreateUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[33],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::QueryUserListReq, ::masterproto::QueryUserListRsp>(
          std::mem_fn(&Master::Service::QueryUserList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[34],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DeleteUserReq, ::masterproto::DeleteUserRsp>(
          std::mem_fn(&Master::Service::DeleteUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[35],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetUserAuthReq, ::masterproto::SetUserAuthRsp>(
          std::mem_fn(&Master::Service::SetUserAuth), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[36],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::cmongoproto::PingReq, ::cmongoproto::PingRes>(
          std::mem_fn(&Master::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[37],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::CreateTableReq, ::masterproto::CreateTableRsp>(
          std::mem_fn(&Master::Service::CreateTable), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[38],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DropTableReq, ::masterproto::DropTableRsp>(
          std::mem_fn(&Master::Service::DropTable), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[39],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DropDatabaseReq, ::masterproto::DropDatabaseRsp>(
          std::mem_fn(&Master::Service::DropDatabase), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[40],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::EnsureIndexReq, ::masterproto::EnsureIndexRsp>(
          std::mem_fn(&Master::Service::EnsureIndex), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[41],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DropIndexReq, ::masterproto::DropIndexRsp>(
          std::mem_fn(&Master::Service::DropIndex), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[42],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DropIndexNameReq, ::masterproto::DropIndexNameRsp>(
          std::mem_fn(&Master::Service::DropIndexName), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[43],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ReportMigrateInfoReq, ::masterproto::ReportMigrateInfoRsp>(
          std::mem_fn(&Master::Service::ReportMigrateInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[44],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::MigrateReq, ::masterproto::MigrateRsp>(
          std::mem_fn(&Master::Service::Migrate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[45],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::CleanMigrateReq, ::masterproto::CleanMigrateRsp>(
          std::mem_fn(&Master::Service::CleanMigrate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[46],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetMigrateStatusReq, ::masterproto::GetMigrateStatusRsp>(
          std::mem_fn(&Master::Service::GetMigrateStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[47],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::IsTableInMigratingReq, ::masterproto::IsTableInMigratingRsp>(
          std::mem_fn(&Master::Service::IsTableInMigrating), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[48],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::RestoreFilesReq, ::masterproto::RestoreFilesRes>(
          std::mem_fn(&Master::Service::RestoreFiles), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[49],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GenBalanceTaskReq, ::masterproto::GenBalanceTaskRsp>(
          std::mem_fn(&Master::Service::GenBalanceTask), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[50],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::BalanceReq, ::masterproto::BalanceRsp>(
          std::mem_fn(&Master::Service::Balance), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[51],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ChangeRouteStateReq, ::masterproto::ChangeRouteStateRsp>(
          std::mem_fn(&Master::Service::ChangeRouteStat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[52],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ChangeRouteRsReq, ::masterproto::ChangeRouteRsRsp>(
          std::mem_fn(&Master::Service::ChangeRouteRs), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[53],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetClusterRoutesReq, ::masterproto::GetClusterRoutesRsp>(
          std::mem_fn(&Master::Service::GetClusterRoutes), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[54],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetIntersectMigrateJobsReq, ::masterproto::GetIntersectMigrateJobsRsp>(
          std::mem_fn(&Master::Service::GetIntersectMigrateJobs), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[55],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetClusterInfoReq, ::masterproto::GetClusterInfoRsp>(
          std::mem_fn(&Master::Service::GetClusterInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[56],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetProxyNotifyInfoReq, ::masterproto::SetProxyNotifyInfoRsp>(
          std::mem_fn(&Master::Service::SetProxyNotifyInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[57],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetProxyNotifyInfoReq, ::masterproto::GetProxyNotifyInfoRsp>(
          std::mem_fn(&Master::Service::GetProxyNotifyInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[58],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetVersionReq, ::masterproto::SetVersionRsp>(
          std::mem_fn(&Master::Service::SetVersionInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[59],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetVersionReq, ::masterproto::GetVersionRsp>(
          std::mem_fn(&Master::Service::GetVersionInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[60],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::ResizeOplogReq, ::masterproto::ResizeOplogRsp>(
          std::mem_fn(&Master::Service::ResizeOplog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[61],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::RestartContainerReq, ::masterproto::RestartContainerRsp>(
          std::mem_fn(&Master::Service::RestartContainer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[62],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetClusterMaxConnsReq, ::masterproto::SetClusterMaxConnsRsp>(
          std::mem_fn(&Master::Service::SetClusterMaxConns), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[63],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetRegionBackupConfigReq, ::masterproto::GetRegionBackupConfigRsp>(
          std::mem_fn(&Master::Service::GetRegionBackupConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[64],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetRegionBackupConfigReq, ::masterproto::SetRegionBackupConfigRsp>(
          std::mem_fn(&Master::Service::SetRegionBackupConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[65],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetClusterBackupConfigReq, ::masterproto::GetClusterBackupConfigRsp>(
          std::mem_fn(&Master::Service::GetClusterBackupConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[66],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::SetClusterBackupConfigReq, ::masterproto::SetClusterBackupConfigRsp>(
          std::mem_fn(&Master::Service::SetClusterBackupConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[67],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::DelClusterBackupConfigReq, ::masterproto::DelClusterBackupConfigRsp>(
          std::mem_fn(&Master::Service::DelClusterBackupConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[68],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::masterproto::GetClusterRoutesRawReq, ::masterproto::GetClusterRoutesRawRsp>(
          std::mem_fn(&Master::Service::GetClusterRoutesRaw), this)));
}

Master::Service::~Service() {
}

::grpc::Status Master::Service::AddResource(::grpc::ServerContext* context, const ::masterproto::AddResourceReq* request, ::masterproto::AddResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::BlockResource(::grpc::ServerContext* context, const ::masterproto::BlockResourceReq* request, ::masterproto::BlockResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::UnblockResource(::grpc::ServerContext* context, const ::masterproto::UnblockResourceReq* request, ::masterproto::UnblockResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DelResource(::grpc::ServerContext* context, const ::masterproto::DelResourceReq* request, ::masterproto::DelResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QueryResource(::grpc::ServerContext* context, const ::masterproto::QueryResourceReq* request, ::masterproto::QueryResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::MigrateContainer(::grpc::ServerContext* context, const ::masterproto::MigrateContainerReq* request, ::masterproto::MigrateContainerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::MigrateMachine(::grpc::ServerContext* context, const ::masterproto::MigrateMachineReq* request, ::masterproto::MigrateMachineRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QueryMachine(::grpc::ServerContext* context, const ::masterproto::QueryMachineReq* request, ::masterproto::QueryMachineRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::AddContainer(::grpc::ServerContext* context, const ::masterproto::AddContainerReq* request, ::masterproto::AddContainerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DelContainer(::grpc::ServerContext* context, const ::masterproto::DelContainerReq* request, ::masterproto::DelContainerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::AddContainerAsync(::grpc::ServerContext* context, const ::masterproto::AddContainerAsyncReq* request, ::masterproto::AddContainerAsyncRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::CreateCluster(::grpc::ServerContext* context, const ::masterproto::CreateClusterReq* request, ::masterproto::CreateClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::UpgradeClusterModule(::grpc::ServerContext* context, const ::masterproto::UpgradeClusterModuleReq* request, ::masterproto::UpgradeClusterModuleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::InfoCluster(::grpc::ServerContext* context, const ::masterproto::InfoClusterReq* request, ::masterproto::InfoClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DelCluster(::grpc::ServerContext* context, const ::masterproto::DelClusterReq* request, ::masterproto::DelClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ListCluster(::grpc::ServerContext* context, const ::masterproto::ListClusterReq* request, ::masterproto::ListClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ChangePassword(::grpc::ServerContext* context, const ::masterproto::ChPasswdReq* request, ::masterproto::ChPasswdRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::JobStatus(::grpc::ServerContext* context, const ::masterproto::JobStatusReq* request, ::masterproto::JobStatusRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ResizeCluster(::grpc::ServerContext* context, const ::masterproto::ResizeClusterReq* request, ::masterproto::ResizeClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::BackupCluster(::grpc::ServerContext* context, const ::masterproto::BackupClusterReq* request, ::masterproto::BackupClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QueryBackupList(::grpc::ServerContext* context, const ::masterproto::QueryBackupListReq* request, ::masterproto::QueryBackupListRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::CheckRestoreTs(::grpc::ServerContext* context, const ::masterproto::CheckRestoreTsReq* request, ::masterproto::CheckRestoreTsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::RestoreCluster(::grpc::ServerContext* context, const ::masterproto::RestoreClusterReq* request, ::masterproto::RestoreClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ExchangeCluster(::grpc::ServerContext* context, const ::masterproto::ExchangeClusterReq* request, ::masterproto::ExchangeClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::IsolationCluster(::grpc::ServerContext* context, const ::masterproto::IsolationClusterReq* request, ::masterproto::IsolationClusterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::AddReplicateSet(::grpc::ServerContext* context, const ::masterproto::AddRsReq* request, ::masterproto::AddRsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DelReplicateSet(::grpc::ServerContext* context, const ::masterproto::DelRsReq* request, ::masterproto::DelRsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QueryOpLogStatus(::grpc::ServerContext* context, const ::masterproto::OpLogStatusReq* request, ::masterproto::OpLogStatusRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ShowDb(::grpc::ServerContext* context, const ::masterproto::ShowDbReq* request, ::masterproto::ShowDbRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ShowColls(::grpc::ServerContext* context, const ::masterproto::ShowCollsReq* request, ::masterproto::ShowCollsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetSlowQuery(::grpc::ServerContext* context, const ::masterproto::GetSlowQueryReq* request, ::masterproto::GetSlowQueryRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QrySlowInfo(::grpc::ServerContext* context, const ::masterproto::QrySlowInfoReq* request, ::masterproto::QrySlowInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::CreateUser(::grpc::ServerContext* context, const ::masterproto::CreateUserReq* request, ::masterproto::CreateUserRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::QueryUserList(::grpc::ServerContext* context, const ::masterproto::QueryUserListReq* request, ::masterproto::QueryUserListRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DeleteUser(::grpc::ServerContext* context, const ::masterproto::DeleteUserReq* request, ::masterproto::DeleteUserRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetUserAuth(::grpc::ServerContext* context, const ::masterproto::SetUserAuthReq* request, ::masterproto::SetUserAuthRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::Ping(::grpc::ServerContext* context, const ::cmongoproto::PingReq* request, ::cmongoproto::PingRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::CreateTable(::grpc::ServerContext* context, const ::masterproto::CreateTableReq* request, ::masterproto::CreateTableRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DropTable(::grpc::ServerContext* context, const ::masterproto::DropTableReq* request, ::masterproto::DropTableRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DropDatabase(::grpc::ServerContext* context, const ::masterproto::DropDatabaseReq* request, ::masterproto::DropDatabaseRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::EnsureIndex(::grpc::ServerContext* context, const ::masterproto::EnsureIndexReq* request, ::masterproto::EnsureIndexRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DropIndex(::grpc::ServerContext* context, const ::masterproto::DropIndexReq* request, ::masterproto::DropIndexRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DropIndexName(::grpc::ServerContext* context, const ::masterproto::DropIndexNameReq* request, ::masterproto::DropIndexNameRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ReportMigrateInfo(::grpc::ServerContext* context, const ::masterproto::ReportMigrateInfoReq* request, ::masterproto::ReportMigrateInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::Migrate(::grpc::ServerContext* context, const ::masterproto::MigrateReq* request, ::masterproto::MigrateRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::CleanMigrate(::grpc::ServerContext* context, const ::masterproto::CleanMigrateReq* request, ::masterproto::CleanMigrateRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetMigrateStatus(::grpc::ServerContext* context, const ::masterproto::GetMigrateStatusReq* request, ::masterproto::GetMigrateStatusRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::IsTableInMigrating(::grpc::ServerContext* context, const ::masterproto::IsTableInMigratingReq* request, ::masterproto::IsTableInMigratingRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::RestoreFiles(::grpc::ServerContext* context, const ::masterproto::RestoreFilesReq* request, ::masterproto::RestoreFilesRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GenBalanceTask(::grpc::ServerContext* context, const ::masterproto::GenBalanceTaskReq* request, ::masterproto::GenBalanceTaskRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::Balance(::grpc::ServerContext* context, const ::masterproto::BalanceReq* request, ::masterproto::BalanceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ChangeRouteStat(::grpc::ServerContext* context, const ::masterproto::ChangeRouteStateReq* request, ::masterproto::ChangeRouteStateRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ChangeRouteRs(::grpc::ServerContext* context, const ::masterproto::ChangeRouteRsReq* request, ::masterproto::ChangeRouteRsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetClusterRoutes(::grpc::ServerContext* context, const ::masterproto::GetClusterRoutesReq* request, ::masterproto::GetClusterRoutesRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetIntersectMigrateJobs(::grpc::ServerContext* context, const ::masterproto::GetIntersectMigrateJobsReq* request, ::masterproto::GetIntersectMigrateJobsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetClusterInfo(::grpc::ServerContext* context, const ::masterproto::GetClusterInfoReq* request, ::masterproto::GetClusterInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetProxyNotifyInfo(::grpc::ServerContext* context, const ::masterproto::SetProxyNotifyInfoReq* request, ::masterproto::SetProxyNotifyInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetProxyNotifyInfo(::grpc::ServerContext* context, const ::masterproto::GetProxyNotifyInfoReq* request, ::masterproto::GetProxyNotifyInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetVersionInfo(::grpc::ServerContext* context, const ::masterproto::SetVersionReq* request, ::masterproto::SetVersionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetVersionInfo(::grpc::ServerContext* context, const ::masterproto::GetVersionReq* request, ::masterproto::GetVersionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::ResizeOplog(::grpc::ServerContext* context, const ::masterproto::ResizeOplogReq* request, ::masterproto::ResizeOplogRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::RestartContainer(::grpc::ServerContext* context, const ::masterproto::RestartContainerReq* request, ::masterproto::RestartContainerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetClusterMaxConns(::grpc::ServerContext* context, const ::masterproto::SetClusterMaxConnsReq* request, ::masterproto::SetClusterMaxConnsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetRegionBackupConfig(::grpc::ServerContext* context, const ::masterproto::GetRegionBackupConfigReq* request, ::masterproto::GetRegionBackupConfigRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetRegionBackupConfig(::grpc::ServerContext* context, const ::masterproto::SetRegionBackupConfigReq* request, ::masterproto::SetRegionBackupConfigRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetClusterBackupConfig(::grpc::ServerContext* context, const ::masterproto::GetClusterBackupConfigReq* request, ::masterproto::GetClusterBackupConfigRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::SetClusterBackupConfig(::grpc::ServerContext* context, const ::masterproto::SetClusterBackupConfigReq* request, ::masterproto::SetClusterBackupConfigRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::DelClusterBackupConfig(::grpc::ServerContext* context, const ::masterproto::DelClusterBackupConfigReq* request, ::masterproto::DelClusterBackupConfigRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::GetClusterRoutesRaw(::grpc::ServerContext* context, const ::masterproto::GetClusterRoutesRawReq* request, ::masterproto::GetClusterRoutesRawRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterproto

