// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmongo/masterproto/master.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mongo/grpc/masterproto/master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace masterproto {
class ContainerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContainerInfo> {
} _ContainerInfo_default_instance_;
class MachineInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MachineInfo> {
} _MachineInfo_default_instance_;
class ClusterBaseInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterBaseInfo> {
} _ClusterBaseInfo_default_instance_;
class ClusterExtraInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterExtraInfo> {
} _ClusterExtraInfo_default_instance_;
class ReplicateSetInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicateSetInfo> {
} _ReplicateSetInfo_default_instance_;
class ClusterInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfo> {
} _ClusterInfo_default_instance_;
class JobInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobInfo> {
} _JobInfo_default_instance_;
class BackupInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupInfo> {
} _BackupInfo_default_instance_;
class ProxyChgInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProxyChgInfo> {
} _ProxyChgInfo_default_instance_;
class OplogInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OplogInfo> {
} _OplogInfo_default_instance_;
class InterfacePartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InterfacePart> {
} _InterfacePart_default_instance_;
class ProxyChgReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProxyChgReq> {
} _ProxyChgReq_default_instance_;
class ProxyChgRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProxyChgRsp> {
} _ProxyChgRsp_default_instance_;
class AddResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddResourceReq> {
} _AddResourceReq_default_instance_;
class AddResourceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddResourceRsp> {
} _AddResourceRsp_default_instance_;
class BlockResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockResourceReq> {
} _BlockResourceReq_default_instance_;
class UnblockResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnblockResourceReq> {
} _UnblockResourceReq_default_instance_;
class BlockResourceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockResourceRsp> {
} _BlockResourceRsp_default_instance_;
class UnblockResourceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnblockResourceRsp> {
} _UnblockResourceRsp_default_instance_;
class DelResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelResourceReq> {
} _DelResourceReq_default_instance_;
class DelResourceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelResourceRsp> {
} _DelResourceRsp_default_instance_;
class QueryResourceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryResourceReq> {
} _QueryResourceReq_default_instance_;
class QueryResourceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryResourceRsp> {
} _QueryResourceRsp_default_instance_;
class MigrateContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateContainerReq> {
} _MigrateContainerReq_default_instance_;
class MigrateContainerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateContainerRsp> {
} _MigrateContainerRsp_default_instance_;
class AddContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContainerReq> {
} _AddContainerReq_default_instance_;
class AddContainerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContainerRsp> {
} _AddContainerRsp_default_instance_;
class DelContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContainerReq> {
} _DelContainerReq_default_instance_;
class DelContainerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelContainerRsp> {
} _DelContainerRsp_default_instance_;
class AddContainerAsyncReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContainerAsyncReq> {
} _AddContainerAsyncReq_default_instance_;
class AddContainerAsyncRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddContainerAsyncRsp> {
} _AddContainerAsyncRsp_default_instance_;
class MigrateMachineReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateMachineReq> {
} _MigrateMachineReq_default_instance_;
class ContainerPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContainerPair> {
} _ContainerPair_default_instance_;
class MigrateMachineRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateMachineRsp> {
} _MigrateMachineRsp_default_instance_;
class QueryMachineReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryMachineReq> {
} _QueryMachineReq_default_instance_;
class QueryMachineRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryMachineRsp> {
} _QueryMachineRsp_default_instance_;
class CreateClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateClusterReq> {
} _CreateClusterReq_default_instance_;
class CreateClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateClusterRsp> {
} _CreateClusterRsp_default_instance_;
class UpgradeClusterModuleReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeClusterModuleReq> {
} _UpgradeClusterModuleReq_default_instance_;
class UpgradeClusterModuleRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeClusterModuleRsp> {
} _UpgradeClusterModuleRsp_default_instance_;
class InfoClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoClusterReq> {
} _InfoClusterReq_default_instance_;
class InfoClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoClusterRsp> {
} _InfoClusterRsp_default_instance_;
class DelClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelClusterReq> {
} _DelClusterReq_default_instance_;
class DelClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelClusterRsp> {
} _DelClusterRsp_default_instance_;
class ListClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClusterReq> {
} _ListClusterReq_default_instance_;
class ListClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClusterRsp> {
} _ListClusterRsp_default_instance_;
class ChPasswdReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChPasswdReq> {
} _ChPasswdReq_default_instance_;
class ChPasswdRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChPasswdRsp> {
} _ChPasswdRsp_default_instance_;
class JobStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobStatusReq> {
} _JobStatusReq_default_instance_;
class JobStatusRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobStatusRsp> {
} _JobStatusRsp_default_instance_;
class ResizeClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeClusterReq> {
} _ResizeClusterReq_default_instance_;
class ResizeClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeClusterRsp> {
} _ResizeClusterRsp_default_instance_;
class BackupClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupClusterReq> {
} _BackupClusterReq_default_instance_;
class BackupClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupClusterRsp> {
} _BackupClusterRsp_default_instance_;
class QueryBackupListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryBackupListReq> {
} _QueryBackupListReq_default_instance_;
class QueryBackupListRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryBackupListRsp> {
} _QueryBackupListRsp_default_instance_;
class CheckRestoreTsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckRestoreTsReq> {
} _CheckRestoreTsReq_default_instance_;
class CheckRestoreTsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckRestoreTsRsp> {
} _CheckRestoreTsRsp_default_instance_;
class RestoreClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreClusterReq> {
} _RestoreClusterReq_default_instance_;
class RestoreClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreClusterRsp> {
} _RestoreClusterRsp_default_instance_;
class ExchangeClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExchangeClusterReq> {
} _ExchangeClusterReq_default_instance_;
class ExchangeClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExchangeClusterRsp> {
} _ExchangeClusterRsp_default_instance_;
class IsolationClusterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsolationClusterReq> {
} _IsolationClusterReq_default_instance_;
class IsolationClusterRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsolationClusterRsp> {
} _IsolationClusterRsp_default_instance_;
class AddRsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddRsReq> {
} _AddRsReq_default_instance_;
class AddRsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddRsRsp> {
} _AddRsRsp_default_instance_;
class DelRsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelRsReq> {
} _DelRsReq_default_instance_;
class DelRsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelRsRsp> {
} _DelRsRsp_default_instance_;
class OpLogStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpLogStatusReq> {
} _OpLogStatusReq_default_instance_;
class OpLogStatusRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpLogStatusRsp> {
} _OpLogStatusRsp_default_instance_;
class ShowDbReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowDbReq> {
} _ShowDbReq_default_instance_;
class ShowDbRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowDbRsp> {
} _ShowDbRsp_default_instance_;
class CollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Collection> {
} _Collection_default_instance_;
class ShowCollsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowCollsReq> {
} _ShowCollsReq_default_instance_;
class ShowCollsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowCollsRsp> {
} _ShowCollsRsp_default_instance_;
class GetSlowQueryReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSlowQueryReq> {
} _GetSlowQueryReq_default_instance_;
class SlowQueryInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SlowQueryInfo> {
} _SlowQueryInfo_default_instance_;
class GetSlowQueryRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSlowQueryRsp> {
} _GetSlowQueryRsp_default_instance_;
class QrySlowInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QrySlowInfoReq> {
} _QrySlowInfoReq_default_instance_;
class QrySlowInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QrySlowInfoRsp> {
} _QrySlowInfoRsp_default_instance_;
class AuthRoleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRole> {
} _AuthRole_default_instance_;
class AuthEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthEntry> {
} _AuthEntry_default_instance_;
class CreateUserReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateUserReq> {
} _CreateUserReq_default_instance_;
class CreateUserRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateUserRsp> {
} _CreateUserRsp_default_instance_;
class QueryUserListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryUserListReq> {
} _QueryUserListReq_default_instance_;
class QueryUserListRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryUserListRsp> {
} _QueryUserListRsp_default_instance_;
class DeleteUserReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteUserReq> {
} _DeleteUserReq_default_instance_;
class DeleteUserRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteUserRsp> {
} _DeleteUserRsp_default_instance_;
class SetUserAuthReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetUserAuthReq> {
} _SetUserAuthReq_default_instance_;
class SetUserAuthRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetUserAuthRsp> {
} _SetUserAuthRsp_default_instance_;
class CreateTableReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateTableReq> {
} _CreateTableReq_default_instance_;
class CreateTableRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateTableRsp> {
} _CreateTableRsp_default_instance_;
class DropTableReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropTableReq> {
} _DropTableReq_default_instance_;
class DropTableRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropTableRsp> {
} _DropTableRsp_default_instance_;
class DropDatabaseReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropDatabaseReq> {
} _DropDatabaseReq_default_instance_;
class DropDatabaseRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropDatabaseRsp> {
} _DropDatabaseRsp_default_instance_;
class EnsureIndexReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnsureIndexReq> {
} _EnsureIndexReq_default_instance_;
class EnsureIndexRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnsureIndexRsp> {
} _EnsureIndexRsp_default_instance_;
class DropIndexReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropIndexReq> {
} _DropIndexReq_default_instance_;
class DropIndexRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropIndexRsp> {
} _DropIndexRsp_default_instance_;
class DropIndexNameReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropIndexNameReq> {
} _DropIndexNameReq_default_instance_;
class DropIndexNameRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropIndexNameRsp> {
} _DropIndexNameRsp_default_instance_;
class MigrateReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateReq> {
} _MigrateReq_default_instance_;
class MigrateRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateRsp> {
} _MigrateRsp_default_instance_;
class CleanMigrateReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CleanMigrateReq> {
} _CleanMigrateReq_default_instance_;
class CleanMigrateRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CleanMigrateRsp> {
} _CleanMigrateRsp_default_instance_;
class GetMigrateStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMigrateStatusReq> {
} _GetMigrateStatusReq_default_instance_;
class MigrateStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateStatus> {
} _MigrateStatus_default_instance_;
class MigrateGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateGroup> {
} _MigrateGroup_default_instance_;
class GetMigrateStatusRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMigrateStatusRsp> {
} _GetMigrateStatusRsp_default_instance_;
class MigrateJobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateJob> {
} _MigrateJob_default_instance_;
class ReportMigrateInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReportMigrateInfoReq> {
} _ReportMigrateInfoReq_default_instance_;
class ReportMigrateInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReportMigrateInfoRsp> {
} _ReportMigrateInfoRsp_default_instance_;
class IsTableInMigratingReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsTableInMigratingReq> {
} _IsTableInMigratingReq_default_instance_;
class IsTableInMigratingRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IsTableInMigratingRsp> {
} _IsTableInMigratingRsp_default_instance_;
class RestoreFilesReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreFilesReq> {
} _RestoreFilesReq_default_instance_;
class RestoreFilesResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreFilesRes> {
} _RestoreFilesRes_default_instance_;
class ActiveNodeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActiveNodeInfo> {
} _ActiveNodeInfo_default_instance_;
class GenBalanceTaskReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenBalanceTaskReq> {
} _GenBalanceTaskReq_default_instance_;
class BalanceTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BalanceTask> {
} _BalanceTask_default_instance_;
class GenBalanceTaskRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenBalanceTaskRsp> {
} _GenBalanceTaskRsp_default_instance_;
class BalanceReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BalanceReq> {
} _BalanceReq_default_instance_;
class BalanceRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BalanceRsp> {
} _BalanceRsp_default_instance_;
class ChangeRouteStateReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeRouteStateReq> {
} _ChangeRouteStateReq_default_instance_;
class ChangeRouteStateRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeRouteStateRsp> {
} _ChangeRouteStateRsp_default_instance_;
class ChangeRouteRsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeRouteRsReq> {
} _ChangeRouteRsReq_default_instance_;
class ChangeRouteRsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeRouteRsRsp> {
} _ChangeRouteRsRsp_default_instance_;
class GetClusterRoutesReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRoutesReq> {
} _GetClusterRoutesReq_default_instance_;
class RouteChunkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouteChunk> {
} _RouteChunk_default_instance_;
class TableRoutesRawDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableRoutesRaw> {
} _TableRoutesRaw_default_instance_;
class TableRoutesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableRoutes> {
} _TableRoutes_default_instance_;
class GetClusterRoutesRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRoutesRsp> {
} _GetClusterRoutesRsp_default_instance_;
class GetIntersectMigrateJobsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetIntersectMigrateJobsReq> {
} _GetIntersectMigrateJobsReq_default_instance_;
class MigrateIntervalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MigrateInterval> {
} _MigrateInterval_default_instance_;
class GetIntersectMigrateJobsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetIntersectMigrateJobsRsp> {
} _GetIntersectMigrateJobsRsp_default_instance_;
class GetClusterInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterInfoReq> {
} _GetClusterInfoReq_default_instance_;
class GetClusterInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterInfoRsp> {
} _GetClusterInfoRsp_default_instance_;
class SetProxyNotifyInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetProxyNotifyInfoReq> {
} _SetProxyNotifyInfoReq_default_instance_;
class SetProxyNotifyInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetProxyNotifyInfoRsp> {
} _SetProxyNotifyInfoRsp_default_instance_;
class GetProxyNotifyInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetProxyNotifyInfoReq> {
} _GetProxyNotifyInfoReq_default_instance_;
class GetProxyNotifyInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetProxyNotifyInfoRsp> {
} _GetProxyNotifyInfoRsp_default_instance_;
class SetClusterBanReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterBanReq> {
} _SetClusterBanReq_default_instance_;
class SetClusterBanRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterBanRsp> {
} _SetClusterBanRsp_default_instance_;
class GetClusterBanReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterBanReq> {
} _GetClusterBanReq_default_instance_;
class GetClusterBanRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterBanRsp> {
} _GetClusterBanRsp_default_instance_;
class SetVersionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetVersionReq> {
} _SetVersionReq_default_instance_;
class SetVersionRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetVersionRsp> {
} _SetVersionRsp_default_instance_;
class GetVersionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetVersionReq> {
} _GetVersionReq_default_instance_;
class GetVersionRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetVersionRsp> {
} _GetVersionRsp_default_instance_;
class ResizeOplogReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeOplogReq> {
} _ResizeOplogReq_default_instance_;
class ResizeOplogRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResizeOplogRsp> {
} _ResizeOplogRsp_default_instance_;
class RestartContainerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestartContainerReq> {
} _RestartContainerReq_default_instance_;
class RestartContainerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestartContainerRsp> {
} _RestartContainerRsp_default_instance_;
class SetClusterMaxConnsReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterMaxConnsReq> {
} _SetClusterMaxConnsReq_default_instance_;
class SetClusterMaxConnsRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterMaxConnsRsp> {
} _SetClusterMaxConnsRsp_default_instance_;
class GetRegionBackupConfigReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRegionBackupConfigReq> {
} _GetRegionBackupConfigReq_default_instance_;
class GetRegionBackupConfigRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRegionBackupConfigRsp> {
} _GetRegionBackupConfigRsp_default_instance_;
class SetRegionBackupConfigReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetRegionBackupConfigReq> {
} _SetRegionBackupConfigReq_default_instance_;
class SetRegionBackupConfigRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetRegionBackupConfigRsp> {
} _SetRegionBackupConfigRsp_default_instance_;
class GetClusterBackupConfigReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterBackupConfigReq> {
} _GetClusterBackupConfigReq_default_instance_;
class GetClusterBackupConfigRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterBackupConfigRsp> {
} _GetClusterBackupConfigRsp_default_instance_;
class SetClusterBackupConfigReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterBackupConfigReq> {
} _SetClusterBackupConfigReq_default_instance_;
class SetClusterBackupConfigRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetClusterBackupConfigRsp> {
} _SetClusterBackupConfigRsp_default_instance_;
class DelClusterBackupConfigReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelClusterBackupConfigReq> {
} _DelClusterBackupConfigReq_default_instance_;
class DelClusterBackupConfigRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelClusterBackupConfigRsp> {
} _DelClusterBackupConfigRsp_default_instance_;
class GetClusterRoutesRawReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRoutesRawReq> {
} _GetClusterRoutesRawReq_default_instance_;
class GetClusterRoutesRawRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRoutesRawRsp> {
} _GetClusterRoutesRawRsp_default_instance_;

namespace protobuf_cmongo_2fmasterproto_2fmaster_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[169];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, container_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, replicate_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, container_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, quota_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, machine_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, container_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, cluster_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, container_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, memory_urv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, num_urv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, idc_parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, idc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, rack_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, idc_operation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, worker_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, cluster_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, storage_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, replicate_set_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, secondary_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, mongo_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, logic_cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, cluster_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, dynamo_proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterBaseInfo, max_client_conns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterExtraInfo, custom_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateSetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateSetInfo, rsname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateSetInfo, mongod_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateSetInfo, proxy_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, rs_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, mongos_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, config_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, proxy_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, dynamo_proxy_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, extra_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInfo, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInfo, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInfo, job_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, backup_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, backup_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupInfo, backup_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgInfo, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgInfo, off_work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgInfo, on_work_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, log_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, time_diff_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, t_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, t_last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, oplog_first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OplogInfo, oplog_last_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacePart, interfacename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfacePart, para_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, caller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, callee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgReq, interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, caller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, callee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, return_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyChgRsp, return_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, res_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, memory_urv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, num_urv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, idc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, rack_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceReq, worker_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResourceRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceReq, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceReq, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockResourceRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockResourceRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceReq, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResourceRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceRsp, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceRsp, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResourceRsp, machine_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, machine_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, container_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, container_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, close_cgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerReq, dynamo_proxy_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateContainerRsp, container_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, close_cgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerReq, dynamo_proxy_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerRsp, container_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerReq, container_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelContainerRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, close_cgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, dynamo_proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncReq, job_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContainerAsyncRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineReq, machine_ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPair, old_container_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPair, new_container_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineRsp, migrated_container_pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineRsp, migrate_failed_containers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateMachineRsp, errors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineReq, ip_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMachineRsp, machine_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, replicate_set_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, secondary_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, cluster_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, closecgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, proxy_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, cluster_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, use_dynamo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, dynamo_proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterReq, max_client_conns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, container_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleReq, restart_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeClusterModuleRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoClusterRsp, cluster_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterReq, job_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClusterRsp, cluster_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, old_passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdReq, new_passwd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChPasswdRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusReq, job_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatusRsp, job_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, quota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterReq, close_cgroup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, peroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, back_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterReq, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupClusterRsp, start_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListReq, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBackupListRsp, backup_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsReq, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRestoreTsRsp, check_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, src_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, dest_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, src_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, src_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, dst_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterReq, dst_table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterReq, src_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterReq, dest_cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterReq, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsolationClusterRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, job_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, closecgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsReq, dynamo_proxy_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRsRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsReq, job_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelRsRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogStatusRsp, oplog_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowDbRsp, db_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collection, coll_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsReq, db_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCollsRsp, database_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, slow_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryReq, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowQueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowQueryInfo, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowQueryInfo, avg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowQueryInfo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowQueryInfo, max_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryRsp, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryRsp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSlowQueryRsp, slow_query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, slow_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoReq, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoRsp, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoRsp, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QrySlowInfoRsp, slow_qmap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRole, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRole, mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEntry, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthEntry, roles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserReq, auth_role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateUserRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserListRsp, auth_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserReq, user_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthReq, auth_role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserAuthRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, table_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, shard_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, is_uniq_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableReq, shard_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableReq, namespace__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTableRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseReq, db_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, drop_dups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, sparse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, expire_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexReq, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnsureIndexRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexReq, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexReq, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameReq, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameReq, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropIndexNameRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, src_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, dst_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, creator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateReq, auto_clean_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateRsp, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateReq, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateReq, sub_task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanMigrateRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusReq, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, src_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, src_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, dst_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, c_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, f_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateGroup, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateGroup, sub_task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMigrateStatusRsp, migrate_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, read_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, send_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateJob, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoReq, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoReq, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportMigrateInfoRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingReq, ns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsTableInMigratingRsp, is_migrating_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesReq, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesRes, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesRes, snapshotfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFilesRes, incrementfiles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, nameserviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, namenodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveNodeInfo, zkfcport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskReq, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskReq, creator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, src_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, dst_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceTask, auto_clean_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenBalanceTaskRsp, tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceReq, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceReq, creator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRsp, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateReq, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteStateRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, source_rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, dest_rs_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsReq, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRouteRsRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesReq, time_nano_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteChunk, shard_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteChunk, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutesRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutesRaw, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutesRaw, raw_route_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, shard_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, route_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, route_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRoutes, table_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRsp, routes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsReq, time_nano_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, src_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, dst_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, chunk_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MigrateInterval, change_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIntersectMigrateJobsRsp, jobs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterInfoRsp, cluster_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoReq, notify_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProxyNotifyInfoRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoRsp, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyNotifyInfoRsp, notify_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanReq, ban_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanReq, ban_write_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBanRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanRsp, ban_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBanRsp, ban_write_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionReq, dynamo_proxy_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetVersionRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionReq, set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionRsp, mongod_subversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionRsp, proxy_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVersionRsp, dynamo_proxy_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogReq, size_mb_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeOplogRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerReq, container_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerReq, container_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartContainerRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsReq, conn_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterMaxConnsRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigReq, region_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionBackupConfigRsp, auto_backup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigReq, auto_backup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRegionBackupConfigRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigRsp, auto_backup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterBackupConfigRsp, time_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, auto_backup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigReq, time_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClusterBackupConfigRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigReq, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigReq, set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigReq, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClusterBackupConfigRsp, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawReq, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawReq, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawReq, time_nano_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawRsp, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRoutesRawRsp, routes_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ContainerInfo)},
  { 11, -1, sizeof(MachineInfo)},
  { 30, -1, sizeof(ClusterBaseInfo)},
  { 50, -1, sizeof(ClusterExtraInfo)},
  { 55, -1, sizeof(ReplicateSetInfo)},
  { 62, -1, sizeof(ClusterInfo)},
  { 73, -1, sizeof(JobInfo)},
  { 80, -1, sizeof(BackupInfo)},
  { 90, -1, sizeof(ProxyChgInfo)},
  { 97, -1, sizeof(OplogInfo)},
  { 109, -1, sizeof(InterfacePart)},
  { 115, -1, sizeof(ProxyChgReq)},
  { 126, -1, sizeof(ProxyChgRsp)},
  { 137, -1, sizeof(AddResourceReq)},
  { 152, -1, sizeof(AddResourceRsp)},
  { 157, -1, sizeof(BlockResourceReq)},
  { 165, -1, sizeof(UnblockResourceReq)},
  { 173, -1, sizeof(BlockResourceRsp)},
  { 178, -1, sizeof(UnblockResourceRsp)},
  { 183, -1, sizeof(DelResourceReq)},
  { 191, -1, sizeof(DelResourceRsp)},
  { 196, -1, sizeof(QueryResourceReq)},
  { 203, -1, sizeof(QueryResourceRsp)},
  { 211, -1, sizeof(MigrateContainerReq)},
  { 227, -1, sizeof(MigrateContainerRsp)},
  { 233, -1, sizeof(AddContainerReq)},
  { 248, -1, sizeof(AddContainerRsp)},
  { 254, -1, sizeof(DelContainerReq)},
  { 262, -1, sizeof(DelContainerRsp)},
  { 267, -1, sizeof(AddContainerAsyncReq)},
  { 284, -1, sizeof(AddContainerAsyncRsp)},
  { 289, -1, sizeof(MigrateMachineReq)},
  { 295, -1, sizeof(ContainerPair)},
  { 301, -1, sizeof(MigrateMachineRsp)},
  { 309, -1, sizeof(QueryMachineReq)},
  { 315, -1, sizeof(QueryMachineRsp)},
  { 321, -1, sizeof(CreateClusterReq)},
  { 347, -1, sizeof(CreateClusterRsp)},
  { 352, -1, sizeof(UpgradeClusterModuleReq)},
  { 363, -1, sizeof(UpgradeClusterModuleRsp)},
  { 368, -1, sizeof(InfoClusterReq)},
  { 377, -1, sizeof(InfoClusterRsp)},
  { 383, -1, sizeof(DelClusterReq)},
  { 394, -1, sizeof(DelClusterRsp)},
  { 399, -1, sizeof(ListClusterReq)},
  { 407, -1, sizeof(ListClusterRsp)},
  { 416, -1, sizeof(ChPasswdReq)},
  { 428, -1, sizeof(ChPasswdRsp)},
  { 433, -1, sizeof(JobStatusReq)},
  { 439, -1, sizeof(JobStatusRsp)},
  { 445, -1, sizeof(ResizeClusterReq)},
  { 459, -1, sizeof(ResizeClusterRsp)},
  { 464, -1, sizeof(BackupClusterReq)},
  { 479, -1, sizeof(BackupClusterRsp)},
  { 485, -1, sizeof(QueryBackupListReq)},
  { 498, -1, sizeof(QueryBackupListRsp)},
  { 504, -1, sizeof(CheckRestoreTsReq)},
  { 516, -1, sizeof(CheckRestoreTsRsp)},
  { 522, -1, sizeof(RestoreClusterReq)},
  { 539, -1, sizeof(RestoreClusterRsp)},
  { 544, -1, sizeof(ExchangeClusterReq)},
  { 551, -1, sizeof(ExchangeClusterRsp)},
  { 556, -1, sizeof(IsolationClusterReq)},
  { 563, -1, sizeof(IsolationClusterRsp)},
  { 568, -1, sizeof(AddRsReq)},
  { 581, -1, sizeof(AddRsRsp)},
  { 586, -1, sizeof(DelRsReq)},
  { 595, -1, sizeof(DelRsRsp)},
  { 600, -1, sizeof(OpLogStatusReq)},
  { 606, -1, sizeof(OpLogStatusRsp)},
  { 612, -1, sizeof(ShowDbReq)},
  { 618, -1, sizeof(ShowDbRsp)},
  { 624, -1, sizeof(Collection)},
  { 629, -1, sizeof(ShowCollsReq)},
  { 636, -1, sizeof(ShowCollsRsp)},
  { 642, -1, sizeof(GetSlowQueryReq)},
  { 653, -1, sizeof(SlowQueryInfo)},
  { 661, -1, sizeof(GetSlowQueryRsp)},
  { 669, -1, sizeof(QrySlowInfoReq)},
  { 680, -1, sizeof(QrySlowInfoRsp)},
  { 688, -1, sizeof(AuthRole)},
  { 694, -1, sizeof(AuthEntry)},
  { 700, -1, sizeof(CreateUserReq)},
  { 709, -1, sizeof(CreateUserRsp)},
  { 714, -1, sizeof(QueryUserListReq)},
  { 720, -1, sizeof(QueryUserListRsp)},
  { 726, -1, sizeof(DeleteUserReq)},
  { 733, -1, sizeof(DeleteUserRsp)},
  { 738, -1, sizeof(SetUserAuthReq)},
  { 746, -1, sizeof(SetUserAuthRsp)},
  { 751, -1, sizeof(CreateTableReq)},
  { 762, -1, sizeof(CreateTableRsp)},
  { 767, -1, sizeof(DropTableReq)},
  { 774, -1, sizeof(DropTableRsp)},
  { 779, -1, sizeof(DropDatabaseReq)},
  { 786, -1, sizeof(DropDatabaseRsp)},
  { 791, -1, sizeof(EnsureIndexReq)},
  { 805, -1, sizeof(EnsureIndexRsp)},
  { 810, -1, sizeof(DropIndexReq)},
  { 818, -1, sizeof(DropIndexRsp)},
  { 823, -1, sizeof(DropIndexNameReq)},
  { 831, -1, sizeof(DropIndexNameRsp)},
  { 836, -1, sizeof(MigrateReq)},
  { 848, -1, sizeof(MigrateRsp)},
  { 854, -1, sizeof(CleanMigrateReq)},
  { 862, -1, sizeof(CleanMigrateRsp)},
  { 867, -1, sizeof(GetMigrateStatusReq)},
  { 874, -1, sizeof(MigrateStatus)},
  { 887, -1, sizeof(MigrateGroup)},
  { 893, -1, sizeof(GetMigrateStatusRsp)},
  { 899, -1, sizeof(MigrateJob)},
  { 910, -1, sizeof(ReportMigrateInfoReq)},
  { 917, -1, sizeof(ReportMigrateInfoRsp)},
  { 922, -1, sizeof(IsTableInMigratingReq)},
  { 929, -1, sizeof(IsTableInMigratingRsp)},
  { 935, -1, sizeof(RestoreFilesReq)},
  { 944, -1, sizeof(RestoreFilesRes)},
  { 951, -1, sizeof(ActiveNodeInfo)},
  { 960, -1, sizeof(GenBalanceTaskReq)},
  { 968, -1, sizeof(BalanceTask)},
  { 978, -1, sizeof(GenBalanceTaskRsp)},
  { 984, -1, sizeof(BalanceReq)},
  { 991, -1, sizeof(BalanceRsp)},
  { 997, -1, sizeof(ChangeRouteStateReq)},
  { 1007, -1, sizeof(ChangeRouteStateRsp)},
  { 1012, -1, sizeof(ChangeRouteRsReq)},
  { 1025, -1, sizeof(ChangeRouteRsRsp)},
  { 1030, -1, sizeof(GetClusterRoutesReq)},
  { 1037, -1, sizeof(RouteChunk)},
  { 1043, -1, sizeof(TableRoutesRaw)},
  { 1049, -1, sizeof(TableRoutes)},
  { 1061, -1, sizeof(GetClusterRoutesRsp)},
  { 1067, -1, sizeof(GetIntersectMigrateJobsReq)},
  { 1074, -1, sizeof(MigrateInterval)},
  { 1085, -1, sizeof(GetIntersectMigrateJobsRsp)},
  { 1091, -1, sizeof(GetClusterInfoReq)},
  { 1097, -1, sizeof(GetClusterInfoRsp)},
  { 1103, -1, sizeof(SetProxyNotifyInfoReq)},
  { 1112, -1, sizeof(SetProxyNotifyInfoRsp)},
  { 1117, -1, sizeof(GetProxyNotifyInfoReq)},
  { 1124, -1, sizeof(GetProxyNotifyInfoRsp)},
  { 1131, -1, sizeof(SetClusterBanReq)},
  { 1139, -1, sizeof(SetClusterBanRsp)},
  { 1144, -1, sizeof(GetClusterBanReq)},
  { 1150, -1, sizeof(GetClusterBanRsp)},
  { 1157, -1, sizeof(SetVersionReq)},
  { 1167, -1, sizeof(SetVersionRsp)},
  { 1172, -1, sizeof(GetVersionReq)},
  { 1179, -1, sizeof(GetVersionRsp)},
  { 1187, -1, sizeof(ResizeOplogReq)},
  { 1196, -1, sizeof(ResizeOplogRsp)},
  { 1201, -1, sizeof(RestartContainerReq)},
  { 1209, -1, sizeof(RestartContainerRsp)},
  { 1214, -1, sizeof(SetClusterMaxConnsReq)},
  { 1223, -1, sizeof(SetClusterMaxConnsRsp)},
  { 1228, -1, sizeof(GetRegionBackupConfigReq)},
  { 1234, -1, sizeof(GetRegionBackupConfigRsp)},
  { 1240, -1, sizeof(SetRegionBackupConfigReq)},
  { 1247, -1, sizeof(SetRegionBackupConfigRsp)},
  { 1252, -1, sizeof(GetClusterBackupConfigReq)},
  { 1260, -1, sizeof(GetClusterBackupConfigRsp)},
  { 1267, -1, sizeof(SetClusterBackupConfigReq)},
  { 1277, -1, sizeof(SetClusterBackupConfigRsp)},
  { 1282, -1, sizeof(DelClusterBackupConfigReq)},
  { 1290, -1, sizeof(DelClusterBackupConfigRsp)},
  { 1295, -1, sizeof(GetClusterRoutesRawReq)},
  { 1302, -1, sizeof(GetClusterRoutesRawRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContainerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MachineInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterExtraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplicateSetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProxyChgInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OplogInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterfacePart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProxyChgReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProxyChgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddResourceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnblockResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockResourceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnblockResourceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelResourceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryResourceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryResourceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateContainerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContainerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelContainerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContainerAsyncReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddContainerAsyncRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateMachineReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContainerPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateMachineRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryMachineReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryMachineRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeClusterModuleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeClusterModuleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChPasswdReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChPasswdRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobStatusRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryBackupListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryBackupListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckRestoreTsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckRestoreTsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExchangeClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExchangeClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsolationClusterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsolationClusterRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddRsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddRsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelRsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelRsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpLogStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpLogStatusRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowDbReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowDbRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Collection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowCollsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowCollsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSlowQueryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlowQueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSlowQueryRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QrySlowInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QrySlowInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateUserRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryUserListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryUserListRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteUserRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetUserAuthReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetUserAuthRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropTableReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropTableRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropDatabaseReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropDatabaseRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnsureIndexReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnsureIndexRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropIndexReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropIndexRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropIndexNameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropIndexNameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanMigrateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanMigrateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMigrateStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMigrateStatusRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportMigrateInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportMigrateInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsTableInMigratingReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IsTableInMigratingRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreFilesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreFilesRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActiveNodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenBalanceTaskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalanceTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenBalanceTaskRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalanceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalanceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRouteStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRouteStateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRouteRsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeRouteRsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRoutesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableRoutesRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableRoutes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRoutesRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetIntersectMigrateJobsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MigrateInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetIntersectMigrateJobsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetProxyNotifyInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetProxyNotifyInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetProxyNotifyInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetProxyNotifyInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterBanReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterBanRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterBanReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterBanRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetVersionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetVersionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetVersionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetVersionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeOplogReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeOplogRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestartContainerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestartContainerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterMaxConnsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterMaxConnsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRegionBackupConfigReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRegionBackupConfigRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetRegionBackupConfigReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetRegionBackupConfigRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterBackupConfigReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterBackupConfigRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterBackupConfigReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetClusterBackupConfigRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelClusterBackupConfigReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelClusterBackupConfigRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRoutesRawReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRoutesRawRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmongo/masterproto/master.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 169);
  const ::google::protobuf::Descriptor* ShowCollsRsp_DatabaseListEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[74].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ShowCollsRsp_DatabaseListEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::masterproto::Collection,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ShowCollsRsp_DatabaseListEntry_descriptor));
  const ::google::protobuf::Descriptor* QrySlowInfoRsp_SlowQmapEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[80].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        QrySlowInfoRsp_SlowQmapEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::masterproto::SlowQueryInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                QrySlowInfoRsp_SlowQmapEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _ContainerInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MachineInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ClusterBaseInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ClusterExtraInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReplicateSetInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ClusterInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _JobInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _BackupInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ProxyChgInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _OplogInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _InterfacePart_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ProxyChgReq_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ProxyChgRsp_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _AddResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _AddResourceRsp_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _BlockResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _UnblockResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BlockResourceRsp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _UnblockResourceRsp_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _DelResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _DelResourceRsp_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _QueryResourceReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _QueryResourceRsp_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _MigrateContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _MigrateContainerRsp_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _AddContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _AddContainerRsp_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _DelContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _DelContainerRsp_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _AddContainerAsyncReq_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _AddContainerAsyncRsp_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _MigrateMachineReq_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ContainerPair_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _MigrateMachineRsp_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _QueryMachineReq_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _QueryMachineRsp_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CreateClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CreateClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _UpgradeClusterModuleReq_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _UpgradeClusterModuleRsp_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _InfoClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _InfoClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _DelClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _DelClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _ListClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _ListClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _ChPasswdReq_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _ChPasswdRsp_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _JobStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _JobStatusRsp_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _ResizeClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _ResizeClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _BackupClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _BackupClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _QueryBackupListReq_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _QueryBackupListRsp_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CheckRestoreTsReq_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CheckRestoreTsRsp_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _RestoreClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _RestoreClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _ExchangeClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _ExchangeClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _IsolationClusterReq_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _IsolationClusterRsp_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _AddRsReq_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _AddRsRsp_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _DelRsReq_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _DelRsRsp_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _OpLogStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _OpLogStatusRsp_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _ShowDbReq_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _ShowDbRsp_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _Collection_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _ShowCollsReq_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _ShowCollsRsp_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _GetSlowQueryReq_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _SlowQueryInfo_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _GetSlowQueryRsp_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _QrySlowInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _QrySlowInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _AuthRole_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _AuthEntry_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CreateUserReq_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CreateUserRsp_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _QueryUserListReq_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _QueryUserListRsp_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _DeleteUserReq_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _DeleteUserRsp_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _SetUserAuthReq_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _SetUserAuthRsp_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _CreateTableReq_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _CreateTableRsp_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _DropTableReq_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _DropTableRsp_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _DropDatabaseReq_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _DropDatabaseRsp_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _EnsureIndexReq_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _EnsureIndexRsp_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _DropIndexReq_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _DropIndexRsp_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _DropIndexNameReq_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _DropIndexNameRsp_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _MigrateReq_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _MigrateRsp_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _CleanMigrateReq_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _CleanMigrateRsp_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _GetMigrateStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _MigrateStatus_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _MigrateGroup_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _GetMigrateStatusRsp_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _MigrateJob_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _ReportMigrateInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _ReportMigrateInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _IsTableInMigratingReq_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _IsTableInMigratingRsp_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _RestoreFilesReq_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _RestoreFilesRes_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _ActiveNodeInfo_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _GenBalanceTaskReq_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
  _BalanceTask_default_instance_.Shutdown();
  delete file_level_metadata[121].reflection;
  _GenBalanceTaskRsp_default_instance_.Shutdown();
  delete file_level_metadata[122].reflection;
  _BalanceReq_default_instance_.Shutdown();
  delete file_level_metadata[123].reflection;
  _BalanceRsp_default_instance_.Shutdown();
  delete file_level_metadata[124].reflection;
  _ChangeRouteStateReq_default_instance_.Shutdown();
  delete file_level_metadata[125].reflection;
  _ChangeRouteStateRsp_default_instance_.Shutdown();
  delete file_level_metadata[126].reflection;
  _ChangeRouteRsReq_default_instance_.Shutdown();
  delete file_level_metadata[127].reflection;
  _ChangeRouteRsRsp_default_instance_.Shutdown();
  delete file_level_metadata[128].reflection;
  _GetClusterRoutesReq_default_instance_.Shutdown();
  delete file_level_metadata[129].reflection;
  _RouteChunk_default_instance_.Shutdown();
  delete file_level_metadata[130].reflection;
  _TableRoutesRaw_default_instance_.Shutdown();
  delete file_level_metadata[131].reflection;
  _TableRoutes_default_instance_.Shutdown();
  delete file_level_metadata[132].reflection;
  _GetClusterRoutesRsp_default_instance_.Shutdown();
  delete file_level_metadata[133].reflection;
  _GetIntersectMigrateJobsReq_default_instance_.Shutdown();
  delete file_level_metadata[134].reflection;
  _MigrateInterval_default_instance_.Shutdown();
  delete file_level_metadata[135].reflection;
  _GetIntersectMigrateJobsRsp_default_instance_.Shutdown();
  delete file_level_metadata[136].reflection;
  _GetClusterInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[137].reflection;
  _GetClusterInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[138].reflection;
  _SetProxyNotifyInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[139].reflection;
  _SetProxyNotifyInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[140].reflection;
  _GetProxyNotifyInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[141].reflection;
  _GetProxyNotifyInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[142].reflection;
  _SetClusterBanReq_default_instance_.Shutdown();
  delete file_level_metadata[143].reflection;
  _SetClusterBanRsp_default_instance_.Shutdown();
  delete file_level_metadata[144].reflection;
  _GetClusterBanReq_default_instance_.Shutdown();
  delete file_level_metadata[145].reflection;
  _GetClusterBanRsp_default_instance_.Shutdown();
  delete file_level_metadata[146].reflection;
  _SetVersionReq_default_instance_.Shutdown();
  delete file_level_metadata[147].reflection;
  _SetVersionRsp_default_instance_.Shutdown();
  delete file_level_metadata[148].reflection;
  _GetVersionReq_default_instance_.Shutdown();
  delete file_level_metadata[149].reflection;
  _GetVersionRsp_default_instance_.Shutdown();
  delete file_level_metadata[150].reflection;
  _ResizeOplogReq_default_instance_.Shutdown();
  delete file_level_metadata[151].reflection;
  _ResizeOplogRsp_default_instance_.Shutdown();
  delete file_level_metadata[152].reflection;
  _RestartContainerReq_default_instance_.Shutdown();
  delete file_level_metadata[153].reflection;
  _RestartContainerRsp_default_instance_.Shutdown();
  delete file_level_metadata[154].reflection;
  _SetClusterMaxConnsReq_default_instance_.Shutdown();
  delete file_level_metadata[155].reflection;
  _SetClusterMaxConnsRsp_default_instance_.Shutdown();
  delete file_level_metadata[156].reflection;
  _GetRegionBackupConfigReq_default_instance_.Shutdown();
  delete file_level_metadata[157].reflection;
  _GetRegionBackupConfigRsp_default_instance_.Shutdown();
  delete file_level_metadata[158].reflection;
  _SetRegionBackupConfigReq_default_instance_.Shutdown();
  delete file_level_metadata[159].reflection;
  _SetRegionBackupConfigRsp_default_instance_.Shutdown();
  delete file_level_metadata[160].reflection;
  _GetClusterBackupConfigReq_default_instance_.Shutdown();
  delete file_level_metadata[161].reflection;
  _GetClusterBackupConfigRsp_default_instance_.Shutdown();
  delete file_level_metadata[162].reflection;
  _SetClusterBackupConfigReq_default_instance_.Shutdown();
  delete file_level_metadata[163].reflection;
  _SetClusterBackupConfigRsp_default_instance_.Shutdown();
  delete file_level_metadata[164].reflection;
  _DelClusterBackupConfigReq_default_instance_.Shutdown();
  delete file_level_metadata[165].reflection;
  _DelClusterBackupConfigRsp_default_instance_.Shutdown();
  delete file_level_metadata[166].reflection;
  _GetClusterRoutesRawReq_default_instance_.Shutdown();
  delete file_level_metadata[167].reflection;
  _GetClusterRoutesRawRsp_default_instance_.Shutdown();
  delete file_level_metadata[168].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cmongoproto::protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::InitDefaults();
  _ContainerInfo_default_instance_.DefaultConstruct();
  _MachineInfo_default_instance_.DefaultConstruct();
  _ClusterBaseInfo_default_instance_.DefaultConstruct();
  _ClusterExtraInfo_default_instance_.DefaultConstruct();
  _ReplicateSetInfo_default_instance_.DefaultConstruct();
  _ClusterInfo_default_instance_.DefaultConstruct();
  _JobInfo_default_instance_.DefaultConstruct();
  _BackupInfo_default_instance_.DefaultConstruct();
  _ProxyChgInfo_default_instance_.DefaultConstruct();
  _OplogInfo_default_instance_.DefaultConstruct();
  _InterfacePart_default_instance_.DefaultConstruct();
  _ProxyChgReq_default_instance_.DefaultConstruct();
  _ProxyChgRsp_default_instance_.DefaultConstruct();
  _AddResourceReq_default_instance_.DefaultConstruct();
  _AddResourceRsp_default_instance_.DefaultConstruct();
  _BlockResourceReq_default_instance_.DefaultConstruct();
  _UnblockResourceReq_default_instance_.DefaultConstruct();
  _BlockResourceRsp_default_instance_.DefaultConstruct();
  _UnblockResourceRsp_default_instance_.DefaultConstruct();
  _DelResourceReq_default_instance_.DefaultConstruct();
  _DelResourceRsp_default_instance_.DefaultConstruct();
  _QueryResourceReq_default_instance_.DefaultConstruct();
  _QueryResourceRsp_default_instance_.DefaultConstruct();
  _MigrateContainerReq_default_instance_.DefaultConstruct();
  _MigrateContainerRsp_default_instance_.DefaultConstruct();
  _AddContainerReq_default_instance_.DefaultConstruct();
  _AddContainerRsp_default_instance_.DefaultConstruct();
  _DelContainerReq_default_instance_.DefaultConstruct();
  _DelContainerRsp_default_instance_.DefaultConstruct();
  _AddContainerAsyncReq_default_instance_.DefaultConstruct();
  _AddContainerAsyncRsp_default_instance_.DefaultConstruct();
  _MigrateMachineReq_default_instance_.DefaultConstruct();
  _ContainerPair_default_instance_.DefaultConstruct();
  _MigrateMachineRsp_default_instance_.DefaultConstruct();
  _QueryMachineReq_default_instance_.DefaultConstruct();
  _QueryMachineRsp_default_instance_.DefaultConstruct();
  _CreateClusterReq_default_instance_.DefaultConstruct();
  _CreateClusterRsp_default_instance_.DefaultConstruct();
  _UpgradeClusterModuleReq_default_instance_.DefaultConstruct();
  _UpgradeClusterModuleRsp_default_instance_.DefaultConstruct();
  _InfoClusterReq_default_instance_.DefaultConstruct();
  _InfoClusterRsp_default_instance_.DefaultConstruct();
  _DelClusterReq_default_instance_.DefaultConstruct();
  _DelClusterRsp_default_instance_.DefaultConstruct();
  _ListClusterReq_default_instance_.DefaultConstruct();
  _ListClusterRsp_default_instance_.DefaultConstruct();
  _ChPasswdReq_default_instance_.DefaultConstruct();
  _ChPasswdRsp_default_instance_.DefaultConstruct();
  _JobStatusReq_default_instance_.DefaultConstruct();
  _JobStatusRsp_default_instance_.DefaultConstruct();
  _ResizeClusterReq_default_instance_.DefaultConstruct();
  _ResizeClusterRsp_default_instance_.DefaultConstruct();
  _BackupClusterReq_default_instance_.DefaultConstruct();
  _BackupClusterRsp_default_instance_.DefaultConstruct();
  _QueryBackupListReq_default_instance_.DefaultConstruct();
  _QueryBackupListRsp_default_instance_.DefaultConstruct();
  _CheckRestoreTsReq_default_instance_.DefaultConstruct();
  _CheckRestoreTsRsp_default_instance_.DefaultConstruct();
  _RestoreClusterReq_default_instance_.DefaultConstruct();
  _RestoreClusterRsp_default_instance_.DefaultConstruct();
  _ExchangeClusterReq_default_instance_.DefaultConstruct();
  _ExchangeClusterRsp_default_instance_.DefaultConstruct();
  _IsolationClusterReq_default_instance_.DefaultConstruct();
  _IsolationClusterRsp_default_instance_.DefaultConstruct();
  _AddRsReq_default_instance_.DefaultConstruct();
  _AddRsRsp_default_instance_.DefaultConstruct();
  _DelRsReq_default_instance_.DefaultConstruct();
  _DelRsRsp_default_instance_.DefaultConstruct();
  _OpLogStatusReq_default_instance_.DefaultConstruct();
  _OpLogStatusRsp_default_instance_.DefaultConstruct();
  _ShowDbReq_default_instance_.DefaultConstruct();
  _ShowDbRsp_default_instance_.DefaultConstruct();
  _Collection_default_instance_.DefaultConstruct();
  _ShowCollsReq_default_instance_.DefaultConstruct();
  _ShowCollsRsp_default_instance_.DefaultConstruct();
  _GetSlowQueryReq_default_instance_.DefaultConstruct();
  _SlowQueryInfo_default_instance_.DefaultConstruct();
  _GetSlowQueryRsp_default_instance_.DefaultConstruct();
  _QrySlowInfoReq_default_instance_.DefaultConstruct();
  _QrySlowInfoRsp_default_instance_.DefaultConstruct();
  _AuthRole_default_instance_.DefaultConstruct();
  _AuthEntry_default_instance_.DefaultConstruct();
  _CreateUserReq_default_instance_.DefaultConstruct();
  _CreateUserRsp_default_instance_.DefaultConstruct();
  _QueryUserListReq_default_instance_.DefaultConstruct();
  _QueryUserListRsp_default_instance_.DefaultConstruct();
  _DeleteUserReq_default_instance_.DefaultConstruct();
  _DeleteUserRsp_default_instance_.DefaultConstruct();
  _SetUserAuthReq_default_instance_.DefaultConstruct();
  _SetUserAuthRsp_default_instance_.DefaultConstruct();
  _CreateTableReq_default_instance_.DefaultConstruct();
  _CreateTableRsp_default_instance_.DefaultConstruct();
  _DropTableReq_default_instance_.DefaultConstruct();
  _DropTableRsp_default_instance_.DefaultConstruct();
  _DropDatabaseReq_default_instance_.DefaultConstruct();
  _DropDatabaseRsp_default_instance_.DefaultConstruct();
  _EnsureIndexReq_default_instance_.DefaultConstruct();
  _EnsureIndexRsp_default_instance_.DefaultConstruct();
  _DropIndexReq_default_instance_.DefaultConstruct();
  _DropIndexRsp_default_instance_.DefaultConstruct();
  _DropIndexNameReq_default_instance_.DefaultConstruct();
  _DropIndexNameRsp_default_instance_.DefaultConstruct();
  _MigrateReq_default_instance_.DefaultConstruct();
  _MigrateRsp_default_instance_.DefaultConstruct();
  _CleanMigrateReq_default_instance_.DefaultConstruct();
  _CleanMigrateRsp_default_instance_.DefaultConstruct();
  _GetMigrateStatusReq_default_instance_.DefaultConstruct();
  _MigrateStatus_default_instance_.DefaultConstruct();
  _MigrateGroup_default_instance_.DefaultConstruct();
  _GetMigrateStatusRsp_default_instance_.DefaultConstruct();
  _MigrateJob_default_instance_.DefaultConstruct();
  _ReportMigrateInfoReq_default_instance_.DefaultConstruct();
  _ReportMigrateInfoRsp_default_instance_.DefaultConstruct();
  _IsTableInMigratingReq_default_instance_.DefaultConstruct();
  _IsTableInMigratingRsp_default_instance_.DefaultConstruct();
  _RestoreFilesReq_default_instance_.DefaultConstruct();
  _RestoreFilesRes_default_instance_.DefaultConstruct();
  _ActiveNodeInfo_default_instance_.DefaultConstruct();
  _GenBalanceTaskReq_default_instance_.DefaultConstruct();
  _BalanceTask_default_instance_.DefaultConstruct();
  _GenBalanceTaskRsp_default_instance_.DefaultConstruct();
  _BalanceReq_default_instance_.DefaultConstruct();
  _BalanceRsp_default_instance_.DefaultConstruct();
  _ChangeRouteStateReq_default_instance_.DefaultConstruct();
  _ChangeRouteStateRsp_default_instance_.DefaultConstruct();
  _ChangeRouteRsReq_default_instance_.DefaultConstruct();
  _ChangeRouteRsRsp_default_instance_.DefaultConstruct();
  _GetClusterRoutesReq_default_instance_.DefaultConstruct();
  _RouteChunk_default_instance_.DefaultConstruct();
  _TableRoutesRaw_default_instance_.DefaultConstruct();
  _TableRoutes_default_instance_.DefaultConstruct();
  _GetClusterRoutesRsp_default_instance_.DefaultConstruct();
  _GetIntersectMigrateJobsReq_default_instance_.DefaultConstruct();
  _MigrateInterval_default_instance_.DefaultConstruct();
  _GetIntersectMigrateJobsRsp_default_instance_.DefaultConstruct();
  _GetClusterInfoReq_default_instance_.DefaultConstruct();
  _GetClusterInfoRsp_default_instance_.DefaultConstruct();
  _SetProxyNotifyInfoReq_default_instance_.DefaultConstruct();
  _SetProxyNotifyInfoRsp_default_instance_.DefaultConstruct();
  _GetProxyNotifyInfoReq_default_instance_.DefaultConstruct();
  _GetProxyNotifyInfoRsp_default_instance_.DefaultConstruct();
  _SetClusterBanReq_default_instance_.DefaultConstruct();
  _SetClusterBanRsp_default_instance_.DefaultConstruct();
  _GetClusterBanReq_default_instance_.DefaultConstruct();
  _GetClusterBanRsp_default_instance_.DefaultConstruct();
  _SetVersionReq_default_instance_.DefaultConstruct();
  _SetVersionRsp_default_instance_.DefaultConstruct();
  _GetVersionReq_default_instance_.DefaultConstruct();
  _GetVersionRsp_default_instance_.DefaultConstruct();
  _ResizeOplogReq_default_instance_.DefaultConstruct();
  _ResizeOplogRsp_default_instance_.DefaultConstruct();
  _RestartContainerReq_default_instance_.DefaultConstruct();
  _RestartContainerRsp_default_instance_.DefaultConstruct();
  _SetClusterMaxConnsReq_default_instance_.DefaultConstruct();
  _SetClusterMaxConnsRsp_default_instance_.DefaultConstruct();
  _GetRegionBackupConfigReq_default_instance_.DefaultConstruct();
  _GetRegionBackupConfigRsp_default_instance_.DefaultConstruct();
  _SetRegionBackupConfigReq_default_instance_.DefaultConstruct();
  _SetRegionBackupConfigRsp_default_instance_.DefaultConstruct();
  _GetClusterBackupConfigReq_default_instance_.DefaultConstruct();
  _GetClusterBackupConfigRsp_default_instance_.DefaultConstruct();
  _SetClusterBackupConfigReq_default_instance_.DefaultConstruct();
  _SetClusterBackupConfigRsp_default_instance_.DefaultConstruct();
  _DelClusterBackupConfigReq_default_instance_.DefaultConstruct();
  _DelClusterBackupConfigRsp_default_instance_.DefaultConstruct();
  _GetClusterRoutesRawReq_default_instance_.DefaultConstruct();
  _GetClusterRoutesRawRsp_default_instance_.DefaultConstruct();
  _ContainerInfo_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _MachineInfo_default_instance_.get_mutable()->capacity_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _MachineInfo_default_instance_.get_mutable()->free_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _ClusterBaseInfo_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _ClusterInfo_default_instance_.get_mutable()->base_info_ = const_cast< ::masterproto::ClusterBaseInfo*>(
      ::masterproto::ClusterBaseInfo::internal_default_instance());
  _ClusterInfo_default_instance_.get_mutable()->extra_info_ = const_cast< ::masterproto::ClusterExtraInfo*>(
      ::masterproto::ClusterExtraInfo::internal_default_instance());
  _InterfacePart_default_instance_.get_mutable()->para_ = const_cast< ::masterproto::ProxyChgInfo*>(
      ::masterproto::ProxyChgInfo::internal_default_instance());
  _ProxyChgReq_default_instance_.get_mutable()->interface_ = const_cast< ::masterproto::InterfacePart*>(
      ::masterproto::InterfacePart::internal_default_instance());
  _AddResourceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _AddResourceReq_default_instance_.get_mutable()->res_desc_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _AddResourceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _BlockResourceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _UnblockResourceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _BlockResourceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _UnblockResourceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DelResourceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DelResourceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _QueryResourceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _QueryResourceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _MigrateContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _MigrateContainerReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _MigrateContainerRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _MigrateContainerRsp_default_instance_.get_mutable()->container_ = const_cast< ::masterproto::ContainerInfo*>(
      ::masterproto::ContainerInfo::internal_default_instance());
  _AddContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _AddContainerReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _AddContainerRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _AddContainerRsp_default_instance_.get_mutable()->container_ = const_cast< ::masterproto::ContainerInfo*>(
      ::masterproto::ContainerInfo::internal_default_instance());
  _DelContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DelContainerReq_default_instance_.get_mutable()->container_ = const_cast< ::masterproto::ContainerInfo*>(
      ::masterproto::ContainerInfo::internal_default_instance());
  _DelContainerRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _AddContainerAsyncReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _AddContainerAsyncReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _AddContainerAsyncRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _MigrateMachineReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ContainerPair_default_instance_.get_mutable()->old_container_ = const_cast< ::masterproto::ContainerInfo*>(
      ::masterproto::ContainerInfo::internal_default_instance());
  _ContainerPair_default_instance_.get_mutable()->new_container_ = const_cast< ::masterproto::ContainerInfo*>(
      ::masterproto::ContainerInfo::internal_default_instance());
  _MigrateMachineRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _QueryMachineReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _QueryMachineRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CreateClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CreateClusterReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _CreateClusterReq_default_instance_.get_mutable()->extra_info_ = const_cast< ::masterproto::ClusterExtraInfo*>(
      ::masterproto::ClusterExtraInfo::internal_default_instance());
  _CreateClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _UpgradeClusterModuleReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _UpgradeClusterModuleRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _InfoClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _InfoClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _InfoClusterRsp_default_instance_.get_mutable()->cluster_info_ = const_cast< ::masterproto::ClusterInfo*>(
      ::masterproto::ClusterInfo::internal_default_instance());
  _DelClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DelClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ListClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ListClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ChPasswdReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ChPasswdRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _JobStatusReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _JobStatusRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _JobStatusRsp_default_instance_.get_mutable()->job_info_ = const_cast< ::masterproto::JobInfo*>(
      ::masterproto::JobInfo::internal_default_instance());
  _ResizeClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ResizeClusterReq_default_instance_.get_mutable()->quota_ = const_cast< ::cmongoproto::ResourceDesc*>(
      ::cmongoproto::ResourceDesc::internal_default_instance());
  _ResizeClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _BackupClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _BackupClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _QueryBackupListReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _QueryBackupListRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CheckRestoreTsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CheckRestoreTsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RestoreClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RestoreClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ExchangeClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ExchangeClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _IsolationClusterReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _IsolationClusterRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _AddRsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _AddRsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DelRsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DelRsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _OpLogStatusReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _OpLogStatusRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ShowDbReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ShowDbRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ShowCollsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ShowCollsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetSlowQueryReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetSlowQueryRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _QrySlowInfoReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _QrySlowInfoRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CreateUserReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CreateUserRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _QueryUserListReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _QueryUserListRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DeleteUserReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DeleteUserRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetUserAuthReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetUserAuthRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CreateTableReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CreateTableRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DropTableReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DropTableRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DropDatabaseReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DropDatabaseRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _EnsureIndexReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _EnsureIndexRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DropIndexReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DropIndexRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DropIndexNameReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DropIndexNameRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _MigrateReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _MigrateRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _CleanMigrateReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _CleanMigrateRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetMigrateStatusReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetMigrateStatusRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ReportMigrateInfoReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ReportMigrateInfoReq_default_instance_.get_mutable()->job_ = const_cast< ::masterproto::MigrateJob*>(
      ::masterproto::MigrateJob::internal_default_instance());
  _ReportMigrateInfoRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _IsTableInMigratingReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _IsTableInMigratingRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RestoreFilesReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RestoreFilesRes_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GenBalanceTaskReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GenBalanceTaskRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _BalanceReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _BalanceRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ChangeRouteStateReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ChangeRouteStateRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ChangeRouteRsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ChangeRouteRsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterRoutesReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetClusterRoutesRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetIntersectMigrateJobsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetIntersectMigrateJobsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterInfoReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetClusterInfoRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterInfoRsp_default_instance_.get_mutable()->cluster_info_ = const_cast< ::masterproto::ClusterInfo*>(
      ::masterproto::ClusterInfo::internal_default_instance());
  _SetProxyNotifyInfoReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetProxyNotifyInfoRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetProxyNotifyInfoReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetProxyNotifyInfoRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetClusterBanReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetClusterBanRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterBanReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetClusterBanRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetVersionReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetVersionRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetVersionReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetVersionRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _ResizeOplogReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _ResizeOplogRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _RestartContainerReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _RestartContainerRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetClusterMaxConnsReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetClusterMaxConnsRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetRegionBackupConfigReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetRegionBackupConfigRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetRegionBackupConfigReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetRegionBackupConfigRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterBackupConfigReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetClusterBackupConfigRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _SetClusterBackupConfigReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _SetClusterBackupConfigRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _DelClusterBackupConfigReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _DelClusterBackupConfigRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
  _GetClusterRoutesRawReq_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ReqHeader*>(
      ::cmongoproto::ReqHeader::internal_default_instance());
  _GetClusterRoutesRawRsp_default_instance_.get_mutable()->header_ = const_cast< ::cmongoproto::ResHeader*>(
      ::cmongoproto::ResHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\037cmongo/masterproto/master.proto\022\013maste"
      "rproto\032\037cmongo/cmongoproto/cmongo.proto\""
      "\213\002\n\rContainerInfo\022\026\n\016container_name\030\001 \001("
      "\t\022\022\n\ncluster_id\030\002 \001(\t\022\025\n\rreplicate_set\030\003"
      " \001(\t\022.\n\016container_type\030\004 \001(\0162\026.cmongopro"
      "to.MongoType\0224\n\021container_version\030\005 \001(\0162"
      "\031.cmongoproto.MongoVersion\022\'\n\006status\030\006 \001"
      "(\0162\027.masterproto.StatusType\022(\n\005quota\030\007 \001"
      "(\0132\031.cmongoproto.ResourceDesc\"\310\003\n\013Machin"
      "eInfo\022\022\n\nmachine_ip\030\001 \001(\t\022/\n\016machine_sta"
      "tus\030\002 \001(\0162\027.masterproto.StatusType\022\025\n\rco"
      "ntainer_num\030\003 \001(\005\022.\n\014machine_type\030\004 \001(\0162"
      "\030.masterproto.MachineType\022\024\n\014cluster_lis"
      "t\030\005 \003(\t\022+\n\010capacity\030\006 \001(\0132\031.cmongoproto."
      "ResourceDesc\022\'\n\004free\030\007 \001(\0132\031.cmongoproto"
      ".ResourceDesc\0222\n\016container_list\030\010 \003(\0132\032."
      "masterproto.ContainerInfo\022\022\n\nmemory_URV\030"
      "\t \001(\005\022\017\n\007num_URV\030\n \001(\005\022\025\n\ridc_parent_id\030"
      "\013 \001(\005\022\016\n\006idc_id\030\014 \001(\005\022\017\n\007rack_id\030\r \001(\005\022\030"
      "\n\020idc_operation_id\030\016 \001(\005\022\026\n\016worker_versi"
      "on\030\017 \001(\t\"\202\004\n\017ClusterBaseInfo\022\022\n\ncluster_"
      "id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\003\022.\n\014cluster_type"
      "\030\003 \001(\0162\030.masterproto.ClusterType\022\024\n\014stor"
      "age_info\030\004 \001(\t\022\031\n\021replicate_set_num\030\005 \001("
      "\005\022\025\n\rsecondary_num\030\006 \001(\005\0220\n\rmongo_versio"
      "n\030\007 \001(\0162\031.cmongoproto.MongoVersion\022(\n\005qu"
      "ota\030\010 \001(\0132\031.cmongoproto.ResourceDesc\022*\n\006"
      "status\030\t \001(\0162\032.masterproto.ClusterStatus"
      "\022\030\n\020logic_cluster_id\030\n \001(\t\022.\n\014machine_ty"
      "pe\030\013 \001(\0162\030.masterproto.MachineType\022\027\n\017cl"
      "uster_version\030\014 \001(\005\022\025\n\rproxy_version\030\r \001"
      "(\t\022\031\n\021mongod_subversion\030\016 \001(\t\022\034\n\024dynamo_"
      "proxy_version\030\017 \001(\t\022\030\n\020max_client_conns\030"
      "\020 \001(\005\"\'\n\020ClusterExtraInfo\022\023\n\013custom_data"
      "\030\001 \001(\t\"\203\001\n\020ReplicateSetInfo\022\016\n\006rsName\030\001 "
      "\001(\t\022/\n\013mongod_list\030\002 \003(\0132\032.masterproto.C"
      "ontainerInfo\022.\n\nproxy_list\030\003 \003(\0132\032.maste"
      "rproto.ContainerInfo\"\352\002\n\013ClusterInfo\022/\n\t"
      "base_info\030\001 \001(\0132\034.masterproto.ClusterBas"
      "eInfo\022.\n\007rs_list\030\002 \003(\0132\035.masterproto.Rep"
      "licateSetInfo\022/\n\013mongos_list\030\003 \003(\0132\032.mas"
      "terproto.ContainerInfo\022/\n\013config_list\030\004 "
      "\003(\0132\032.masterproto.ContainerInfo\022.\n\nproxy"
      "_list\030\005 \003(\0132\032.masterproto.ContainerInfo\022"
      "5\n\021dynamo_proxy_list\030\006 \003(\0132\032.masterproto"
      ".ContainerInfo\0221\n\nextra_info\030\007 \001(\0132\035.mas"
      "terproto.ClusterExtraInfo\"m\n\007JobInfo\022\016\n\006"
      "job_id\030\001 \001(\003\022&\n\010job_type\030\002 \001(\0162\024.masterp"
      "roto.JobType\022*\n\njob_status\030\003 \001(\0162\026.maste"
      "rproto.JobStatus\"\230\001\n\nBackupInfo\022\022\n\nstart"
      "_time\030\001 \001(\t\022\020\n\010end_time\030\002 \001(\t\022\023\n\013backup_"
      "size\030\003 \001(\003\022\022\n\nbackup_num\030\004 \001(\005\022\014\n\004type\030\005"
      " \001(\010\022-\n\rbackup_status\030\006 \001(\0162\026.masterprot"
      "o.JobStatus\"}\n\014ProxyChgInfo\022\022\n\ncluster_i"
      "d\030\001 \001(\t\022,\n\010off_work\030\002 \003(\0132\032.masterproto."
      "ContainerInfo\022+\n\007on_work\030\003 \003(\0132\032.masterp"
      "roto.ContainerInfo\"\236\001\n\tOplogInfo\022\017\n\007rs_n"
      "ame\030\001 \001(\t\022\020\n\010log_size\030\002 \001(\004\022\014\n\004used\030\003 \001("
      "\004\022\026\n\016time_diff_secs\030\004 \001(\005\022\017\n\007t_first\030\005 \001"
      "(\005\022\016\n\006t_last\030\006 \001(\005\022\023\n\013oplog_first\030\007 \001(\003\022"
      "\022\n\noplog_last\030\010 \001(\003\"O\n\rInterfacePart\022\025\n\r"
      "interfaceName\030\001 \001(\t\022\'\n\004para\030\002 \001(\0132\031.mast"
      "erproto.ProxyChgInfo\"\244\001\n\013ProxyChgReq\022\017\n\007"
      "version\030\001 \001(\t\022\016\n\006caller\030\002 \001(\t\022\016\n\006callee\030"
      "\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\020\n\010event_id\030\005 \001("
      "\003\022\021\n\ttimestamp\030\006 \001(\003\022-\n\tinterface\030\007 \001(\0132"
      "\032.masterproto.InterfacePart\"\214\001\n\013ProxyChg"
      "Rsp\022\017\n\007version\030\001 \001(\t\022\016\n\006caller\030\002 \001(\t\022\016\n\006"
      "callee\030\003 \001(\t\022\020\n\010event_id\030\004 \001(\003\022\021\n\ttimest"
      "amp\030\005 \001(\003\022\023\n\013return_code\030\006 \001(\005\022\022\n\nreturn"
      "_msg\030\007 \001(\t\"\252\002\n\016AddResourceReq\022&\n\006header\030"
      "\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nmachine"
      "_ip\030\002 \001(\t\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004"
      " \001(\005\022.\n\014machine_type\030\005 \001(\0162\030.masterproto"
      ".MachineType\022+\n\010res_desc\030\006 \001(\0132\031.cmongop"
      "roto.ResourceDesc\022\022\n\nmemory_URV\030\007 \001(\005\022\017\n"
      "\007num_URV\030\010 \001(\005\022\016\n\006idc_id\030\t \001(\005\022\017\n\007rack_i"
      "d\030\n \001(\005\022\026\n\016worker_version\030\013 \001(\t\"8\n\016AddRe"
      "sourceRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto."
      "ResHeader\"q\n\020BlockResourceReq\022&\n\006header\030"
      "\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nmachine"
      "_ip\030\002 \001(\t\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004"
      " \001(\005\"s\n\022UnblockResourceReq\022&\n\006header\030\001 \001"
      "(\0132\026.cmongoproto.ReqHeader\022\022\n\nmachine_ip"
      "\030\002 \001(\t\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001("
      "\005\":\n\020BlockResourceRsp\022&\n\006header\030\001 \001(\0132\026."
      "cmongoproto.ResHeader\"<\n\022UnblockResource"
      "Rsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHea"
      "der\"o\n\016DelResourceReq\022&\n\006header\030\001 \001(\0132\026."
      "cmongoproto.ReqHeader\022\022\n\nmachine_ip\030\002 \001("
      "\t\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\"8\n\016"
      "DelResourceRsp\022&\n\006header\030\001 \001(\0132\026.cmongop"
      "roto.ResHeader\"]\n\020QueryResourceReq\022&\n\006he"
      "ader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\021\n\tre"
      "gion_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\"\215\001\n\020QueryR"
      "esourceRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ResHeader\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_id\030"
      "\003 \001(\005\022.\n\014machine_list\030\004 \003(\0132\030.masterprot"
      "o.MachineInfo\"\344\002\n\023MigrateContainerReq\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n"
      "\ncluster_id\030\002 \001(\t\022\022\n\nmachine_ip\030\003 \001(\t\022\024\n"
      "\014container_id\030\004 \001(\005\022\026\n\016container_port\030\005 "
      "\001(\005\022(\n\005quota\030\006 \001(\0132\031.cmongoproto.Resourc"
      "eDesc\022\017\n\007dest_ip\030\007 \001(\t\022\024\n\014close_cgroup\030\010"
      " \001(\005\022.\n\014machine_type\030\t \001(\0162\030.masterproto"
      ".MachineType\022\025\n\rproxy_version\030\022 \001(\t\022\031\n\021m"
      "ongod_subversion\030\023 \001(\t\022\034\n\024dynamo_proxy_v"
      "ersion\030\024 \001(\t\"l\n\023MigrateContainerRsp\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ResHeader\022-\n\tc"
      "ontainer\030\002 \001(\0132\032.masterproto.ContainerIn"
      "fo\"\337\002\n\017AddContainerReq\022&\n\006header\030\001 \001(\0132\026"
      ".cmongoproto.ReqHeader\022\022\n\ncluster_id\030\002 \001"
      "(\t\022\017\n\007rs_name\030\003 \001(\t\022.\n\014machine_type\030\004 \001("
      "\0162\030.masterproto.MachineType\022(\n\005quota\030\005 \001"
      "(\0132\031.cmongoproto.ResourceDesc\022\024\n\014close_c"
      "group\030\006 \001(\005\022\017\n\007dest_ip\030\007 \001(\t\022.\n\016containe"
      "r_type\030\010 \001(\0162\026.cmongoproto.MongoType\022\025\n\r"
      "proxy_version\030\t \001(\t\022\031\n\021mongod_subversion"
      "\030\n \001(\t\022\034\n\024dynamo_proxy_version\030\013 \001(\t\"h\n\017"
      "AddContainerRsp\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ResHeader\022-\n\tcontainer\030\002 \001(\0132\032.mas"
      "terproto.ContainerInfo\"\215\001\n\017DelContainerR"
      "eq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHead"
      "er\022\022\n\ncluster_id\030\002 \001(\t\022\017\n\007rs_name\030\003 \001(\t\022"
      "-\n\tcontainer\030\004 \001(\0132\032.masterproto.Contain"
      "erInfo\"9\n\017DelContainerRsp\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ResHeader\"\234\003\n\024AddContain"
      "erAsyncReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022\017\n\007rs_nam"
      "e\030\003 \001(\t\022.\n\014machine_type\030\004 \001(\0162\030.masterpr"
      "oto.MachineType\022(\n\005quota\030\005 \001(\0132\031.cmongop"
      "roto.ResourceDesc\022\024\n\014close_cgroup\030\006 \001(\005\022"
      "\017\n\007dest_ip\030\007 \001(\t\022.\n\016container_type\030\010 \001(\016"
      "2\026.cmongoproto.MongoType\022\025\n\rproxy_versio"
      "n\030\t \001(\t\022\031\n\021mongod_subversion\030\n \001(\t\022\034\n\024dy"
      "namo_proxy_version\030\013 \001(\t\022\016\n\006job_id\030\014 \001(\003"
      "\022&\n\010job_type\030\r \001(\0162\024.masterproto.JobType"
      "\">\n\024AddContainerAsyncRsp\022&\n\006header\030\001 \001(\013"
      "2\026.cmongoproto.ResHeader\"O\n\021MigrateMachi"
      "neReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqH"
      "eader\022\022\n\nmachine_ip\030\002 \001(\t\"u\n\rContainerPa"
      "ir\0221\n\rold_container\030\001 \001(\0132\032.masterproto."
      "ContainerInfo\0221\n\rnew_container\030\002 \001(\0132\032.m"
      "asterproto.ContainerInfo\"\310\001\n\021MigrateMach"
      "ineRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Res"
      "Header\022<\n\030migrated_container_pairs\030\002 \003(\013"
      "2\032.masterproto.ContainerPair\022=\n\031migrate_"
      "failed_containers\030\003 \003(\0132\032.masterproto.Co"
      "ntainerInfo\022\016\n\006errors\030\004 \003(\t\"J\n\017QueryMach"
      "ineReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Req"
      "Header\022\017\n\007ip_list\030\002 \003(\t\"i\n\017QueryMachineR"
      "sp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHead"
      "er\022.\n\014machine_list\030\002 \003(\0132\030.masterproto.M"
      "achineInfo\"\217\005\n\020CreateClusterReq\022&\n\006heade"
      "r\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\016\n\006job_i"
      "d\030\002 \001(\003\022\016\n\006app_id\030\003 \001(\003\022\021\n\tregion_id\030\004 \001"
      "(\005\022\016\n\006set_id\030\005 \001(\005\022\022\n\ncluster_id\030\006 \001(\t\022\031"
      "\n\021replicate_set_num\030\007 \001(\005\022\025\n\rsecondary_n"
      "um\030\010 \001(\005\022.\n\014cluster_type\030\t \001(\0162\030.masterp"
      "roto.ClusterType\022.\n\014machine_type\030\n \001(\0162\030"
      ".masterproto.MachineType\022(\n\005quota\030\013 \001(\0132"
      "\031.cmongoproto.ResourceDesc\022*\n\007version\030\014 "
      "\001(\0162\031.cmongoproto.MongoVersion\022&\n\010job_ty"
      "pe\030\r \001(\0162\024.masterproto.JobType\022\023\n\013closeC"
      "group\030\016 \001(\005\022\021\n\tproxy_num\030\017 \001(\005\022\023\n\013cluste"
      "r_ver\030\020 \001(\005\0221\n\nextra_info\030\021 \001(\0132\035.master"
      "proto.ClusterExtraInfo\022\022\n\nuse_dynamo\030\022 \001"
      "(\005\022\025\n\rproxy_version\030\023 \001(\t\022\031\n\021mongod_subv"
      "ersion\030\024 \001(\t\022\034\n\024dynamo_proxy_version\030\025 \001"
      "(\t\022\030\n\020max_client_conns\030\026 \001(\005\":\n\020CreateCl"
      "usterRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "esHeader\"\324\001\n\027UpgradeClusterModuleReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\021\n\t"
      "region_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\022\022\n\nclust"
      "er_id\030\004 \001(\t\022.\n\016container_type\030\005 \001(\0162\026.cm"
      "ongoproto.MongoType\022\031\n\021container_version"
      "\030\006 \001(\t\022\017\n\007restart\030\007 \001(\005\"A\n\027UpgradeCluste"
      "rModuleRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ResHeader\"\177\n\016InfoClusterReq\022&\n\006header\030\001"
      " \001(\0132\026.cmongoproto.ReqHeader\022\016\n\006app_id\030\002"
      " \001(\003\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\022"
      "\022\n\ncluster_id\030\005 \001(\t\"h\n\016InfoClusterRsp\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ResHeader\022.\n"
      "\014cluster_info\030\002 \001(\0132\030.masterproto.Cluste"
      "rInfo\"\266\001\n\rDelClusterReq\022&\n\006header\030\001 \001(\0132"
      "\026.cmongoproto.ReqHeader\022\016\n\006job_id\030\002 \001(\003\022"
      "\016\n\006app_id\030\003 \001(\003\022\021\n\tregion_id\030\004 \001(\005\022\016\n\006se"
      "t_id\030\005 \001(\005\022\022\n\ncluster_id\030\006 \001(\t\022&\n\010job_ty"
      "pe\030\007 \001(\0162\024.masterproto.JobType\"7\n\rDelClu"
      "sterRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Re"
      "sHeader\"k\n\016ListClusterReq\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ReqHeader\022\016\n\006app_id\030\002 \001("
      "\003\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\"\233\001\n"
      "\016ListClusterRsp\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ResHeader\022\016\n\006app_id\030\002 \001(\003\022\021\n\tregio"
      "n_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\022.\n\014cluster_li"
      "st\030\005 \003(\0132\030.masterproto.ClusterInfo\"\267\001\n\013C"
      "hPasswdReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ReqHeader\022\016\n\006app_id\030\002 \001(\003\022\021\n\tregion_id\030"
      "\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\022\022\n\ncluster_id\030\005 \001("
      "\t\022\021\n\tuser_name\030\006 \001(\t\022\022\n\nold_passwd\030\007 \001(\t"
      "\022\022\n\nnew_passwd\030\010 \001(\t\"5\n\013ChPasswdRsp\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ResHeader\"F\n\014J"
      "obStatusReq\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ReqHeader\022\016\n\006job_id\030\002 \001(\003\"^\n\014JobStatus"
      "Rsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHea"
      "der\022&\n\010job_info\030\002 \001(\0132\024.masterproto.JobI"
      "nfo\"\251\002\n\020ResizeClusterReq\022&\n\006header\030\001 \001(\013"
      "2\026.cmongoproto.ReqHeader\022\016\n\006job_id\030\002 \001(\003"
      "\022&\n\010job_type\030\003 \001(\0162\024.masterproto.JobType"
      "\022\016\n\006app_id\030\004 \001(\003\022\021\n\tregion_id\030\005 \001(\005\022\016\n\006s"
      "et_id\030\006 \001(\005\022\022\n\ncluster_id\030\007 \001(\t\022.\n\014machi"
      "ne_type\030\010 \001(\0162\030.masterproto.MachineType\022"
      "(\n\005quota\030\t \001(\0132\031.cmongoproto.ResourceDes"
      "c\022\024\n\014close_cgroup\030\n \001(\005\":\n\020ResizeCluster"
      "Rsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHea"
      "der\"\367\001\n\020BackupClusterReq\022&\n\006header\030\001 \001(\013"
      "2\026.cmongoproto.ReqHeader\022\016\n\006job_id\030\002 \001(\003"
      "\022&\n\010job_type\030\003 \001(\0162\024.masterproto.JobType"
      "\022\016\n\006app_id\030\004 \001(\003\022\021\n\tregion_id\030\005 \001(\005\022\016\n\006s"
      "et_id\030\006 \001(\005\022\022\n\ncluster_id\030\007 \001(\t\022\016\n\006peroi"
      "d\030\010 \001(\003\022\021\n\tback_type\030\t \001(\010\022\n\n\002db\030\n \001(\t\022\r"
      "\n\005table\030\013 \001(\t\"N\n\020BackupClusterRsp\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ResHeader\022\022\n\nsta"
      "rt_time\030\002 \001(\t\"\304\001\n\022QueryBackupListReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\016\n\006"
      "app_id\030\002 \001(\003\022\021\n\tregion_id\030\003 \001(\005\022\016\n\006set_i"
      "d\030\004 \001(\005\022\022\n\ncluster_id\030\005 \001(\t\022\022\n\nstart_tim"
      "e\030\006 \001(\t\022\020\n\010end_time\030\007 \001(\t\022\n\n\002db\030\010 \001(\t\022\r\n"
      "\005table\030\t \001(\t\"j\n\022QueryBackupListRsp\022&\n\006he"
      "ader\030\001 \001(\0132\026.cmongoproto.ResHeader\022,\n\013ba"
      "ckup_list\030\002 \003(\0132\027.masterproto.BackupInfo"
      "\"\261\001\n\021CheckRestoreTsReq\022&\n\006header\030\001 \001(\0132\026"
      ".cmongoproto.ReqHeader\022\016\n\006app_id\030\002 \001(\003\022\021"
      "\n\tregion_id\030\003 \001(\005\022\016\n\006set_id\030\004 \001(\005\022\022\n\nclu"
      "ster_id\030\005 \001(\t\022\022\n\ntime_stamp\030\006 \001(\t\022\n\n\002db\030"
      "\007 \001(\t\022\r\n\005table\030\010 \001(\t\"Q\n\021CheckRestoreTsRs"
      "p\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeade"
      "r\022\024\n\014check_result\030\002 \001(\010\"\253\002\n\021RestoreClust"
      "erReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqH"
      "eader\022\016\n\006job_id\030\002 \001(\003\022&\n\010job_type\030\003 \001(\0162"
      "\024.masterproto.JobType\022\016\n\006app_id\030\004 \001(\003\022\021\n"
      "\tregion_id\030\005 \001(\005\022\016\n\006set_id\030\006 \001(\005\022\023\n\013src_"
      "cluster\030\007 \001(\t\022\024\n\014dest_cluster\030\010 \001(\t\022\022\n\nt"
      "ime_stamp\030\t \001(\t\022\016\n\006src_db\030\n \001(\t\022\021\n\tsrc_t"
      "able\030\013 \001(\t\022\016\n\006dst_db\030\014 \001(\t\022\021\n\tdst_table\030"
      "\r \001(\t\";\n\021RestoreClusterRsp\022&\n\006header\030\001 \001"
      "(\0132\026.cmongoproto.ResHeader\"g\n\022ExchangeCl"
      "usterReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "eqHeader\022\023\n\013src_cluster\030\002 \001(\t\022\024\n\014dest_cl"
      "uster\030\003 \001(\t\"<\n\022ExchangeClusterRsp\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ResHeader\"}\n\023Iso"
      "lationClusterReq\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022*\n\006"
      "status\030\003 \001(\0162\032.masterproto.ClusterStatus"
      "\"=\n\023IsolationClusterRsp\022&\n\006header\030\001 \001(\0132"
      "\026.cmongoproto.ResHeader\"\364\001\n\010AddRsReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\016\n\006"
      "job_id\030\002 \001(\003\022\022\n\ncluster_id\030\003 \001(\t\022\017\n\007rs_n"
      "ame\030\004 \001(\t\022&\n\010job_type\030\005 \001(\0162\024.masterprot"
      "o.JobType\022\023\n\013closeCgroup\030\006 \001(\005\022\025\n\rproxy_"
      "version\030\007 \001(\t\022\031\n\021mongod_subversion\030\010 \001(\t"
      "\022\034\n\024dynamo_proxy_version\030\t \001(\t\"2\n\010AddRsR"
      "sp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHead"
      "er\"\217\001\n\010DelRsReq\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ReqHeader\022\016\n\006job_id\030\002 \001(\003\022\022\n\nclust"
      "er_id\030\003 \001(\t\022\017\n\007rs_name\030\004 \001(\t\022&\n\010job_type"
      "\030\005 \001(\0162\024.masterproto.JobType\"2\n\010DelRsRsp"
      "\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader"
      "\"L\n\016OpLogStatusReq\022&\n\006header\030\001 \001(\0132\026.cmo"
      "ngoproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\"e"
      "\n\016OpLogStatusRsp\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ResHeader\022+\n\013oplog_infos\030\002 \003(\0132\026."
      "masterproto.OplogInfo\"G\n\tShowDbReq\022&\n\006he"
      "ader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\ncl"
      "uster_id\030\002 \001(\t\"D\n\tShowDbRsp\022&\n\006header\030\001 "
      "\001(\0132\026.cmongoproto.ResHeader\022\017\n\007db_list\030\002"
      " \003(\t\"\037\n\nCollection\022\021\n\tcoll_list\030\001 \003(\t\"[\n"
      "\014ShowCollsReq\022&\n\006header\030\001 \001(\0132\026.cmongopr"
      "oto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022\017\n\007db_"
      "list\030\003 \003(\t\"\310\001\n\014ShowCollsRsp\022&\n\006header\030\001 "
      "\001(\0132\026.cmongoproto.ResHeader\022B\n\rdatabase_"
      "list\030\002 \003(\0132+.masterproto.ShowCollsRsp.Da"
      "tabaseListEntry\032L\n\021DatabaseListEntry\022\013\n\003"
      "key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.masterproto.C"
      "ollection:\0028\001\"\242\001\n\017GetSlowQueryReq\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nbeg"
      "in_time\030\002 \001(\t\022\020\n\010end_time\030\003 \001(\t\022\022\n\nclust"
      "er_id\030\004 \001(\t\022\017\n\007slow_ms\030\005 \001(\005\022\r\n\005start\030\006 "
      "\001(\005\022\r\n\005limit\030\007 \001(\005\"R\n\rSlowQueryInfo\022\016\n\006d"
      "etail\030\001 \001(\t\022\020\n\010avg_time\030\002 \001(\005\022\r\n\005count\030\003"
      " \001(\005\022\020\n\010max_time\030\004 \001(\005\"p\n\017GetSlowQueryRs"
      "p\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeade"
      "r\022\022\n\ncluster_id\030\002 \001(\t\022\r\n\005count\030\003 \001(\003\022\022\n\n"
      "slow_query\030\004 \003(\t\"\241\001\n\016QrySlowInfoReq\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nb"
      "egin_time\030\002 \001(\t\022\020\n\010end_time\030\003 \001(\t\022\022\n\nclu"
      "ster_id\030\004 \001(\t\022\017\n\007slow_ms\030\005 \001(\005\022\r\n\005start\030"
      "\006 \001(\005\022\r\n\005limit\030\007 \001(\005\"\346\001\n\016QrySlowInfoRsp\022"
      "&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader\022"
      "\022\n\ncluster_id\030\002 \001(\t\022\r\n\005count\030\003 \001(\003\022<\n\tsl"
      "ow_qmap\030\004 \003(\0132).masterproto.QrySlowInfoR"
      "sp.SlowQmapEntry\032K\n\rSlowQmapEntry\022\013\n\003key"
      "\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.masterproto.Slow"
      "QueryInfo:\0028\001\";\n\010AuthRole\022\n\n\002ns\030\001 \001(\t\022#\n"
      "\004mask\030\002 \001(\0162\025.masterproto.AuthMask\"\?\n\tAu"
      "thEntry\022\014\n\004user\030\001 \001(\t\022$\n\005roles\030\002 \003(\0132\025.m"
      "asterproto.AuthRole\"\232\001\n\rCreateUserReq\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n"
      "\ncluster_id\030\002 \001(\t\022\021\n\tuser_name\030\003 \001(\t\022\020\n\010"
      "password\030\004 \001(\t\022(\n\tauth_role\030\005 \003(\0132\025.mast"
      "erproto.AuthRole\"7\n\rCreateUserRsp\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ResHeader\"N\n\020Que"
      "ryUserListReq\022&\n\006header\030\001 \001(\0132\026.cmongopr"
      "oto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\"e\n\020Que"
      "ryUserListRsp\022&\n\006header\030\001 \001(\0132\026.cmongopr"
      "oto.ResHeader\022)\n\tauth_list\030\002 \003(\0132\026.maste"
      "rproto.AuthEntry\"^\n\rDeleteUserReq\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nclu"
      "ster_id\030\002 \001(\t\022\021\n\tuser_name\030\003 \001(\t\"7\n\rDele"
      "teUserRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto."
      "ResHeader\"\211\001\n\016SetUserAuthReq\022&\n\006header\030\001"
      " \001(\0132\026.cmongoproto.ReqHeader\022\022\n\ncluster_"
      "id\030\002 \001(\t\022\021\n\tuser_name\030\003 \001(\t\022(\n\tauth_role"
      "\030\004 \003(\0132\025.masterproto.AuthRole\"8\n\016SetUser"
      "AuthRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Re"
      "sHeader\"\260\001\n\016CreateTableReq\022&\n\006header\030\001 \001"
      "(\0132\026.cmongoproto.ReqHeader\022\022\n\ncluster_id"
      "\030\002 \001(\t\022\022\n\ntable_type\030\003 \001(\t\022\021\n\tnamespace\030"
      "\004 \001(\t\022\022\n\nshard_keys\030\005 \003(\t\022\023\n\013is_uniq_key"
      "\030\006 \001(\010\022\022\n\nshard_list\030\007 \003(\t\"8\n\016CreateTabl"
      "eRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHe"
      "ader\"]\n\014DropTableReq\022&\n\006header\030\001 \001(\0132\026.c"
      "mongoproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t"
      "\022\021\n\tnamespace\030\003 \001(\t\"6\n\014DropTableRsp\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ResHeader\"^\n\017D"
      "ropDatabaseReq\022&\n\006header\030\001 \001(\0132\026.cmongop"
      "roto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022\017\n\007db"
      "_name\030\003 \001(\t\"9\n\017DropDatabaseRsp\022&\n\006header"
      "\030\001 \001(\0132\026.cmongoproto.ResHeader\"\320\001\n\016Ensur"
      "eIndexReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto."
      "ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022\n\n\002ns\030\003 \001("
      "\t\022\013\n\003key\030\004 \003(\t\022\016\n\006unique\030\005 \001(\010\022\021\n\tdrop_d"
      "ups\030\006 \001(\010\022\022\n\nbackground\030\007 \001(\010\022\016\n\006sparse\030"
      "\010 \001(\010\022\024\n\014expire_after\030\t \001(\005\022\014\n\004name\030\n \001("
      "\t\"8\n\016EnsureIndexRsp\022&\n\006header\030\001 \001(\0132\026.cm"
      "ongoproto.ResHeader\"c\n\014DropIndexReq\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nc"
      "luster_id\030\002 \001(\t\022\n\n\002ns\030\003 \001(\t\022\013\n\003key\030\004 \003(\t"
      "\"6\n\014DropIndexRsp\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ResHeader\"g\n\020DropIndexNameReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\n"
      "cluster_id\030\002 \001(\t\022\n\n\002ns\030\003 \001(\t\022\013\n\003key\030\004 \001("
      "\t\":\n\020DropIndexNameRsp\022&\n\006header\030\001 \001(\0132\026."
      "cmongoproto.ResHeader\"\271\001\n\nMigrateReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\n"
      "cluster_id\030\002 \001(\t\022\024\n\014src_set_name\030\003 \001(\t\022\024"
      "\n\014dst_set_name\030\004 \001(\t\022\n\n\002ns\030\005 \001(\t\022\017\n\007crea"
      "tor\030\006 \001(\t\022\022\n\nchunk_list\030\007 \003(\005\022\022\n\nauto_cl"
      "ean\030\010 \001(\010\"E\n\nMigrateRsp\022&\n\006header\030\001 \001(\0132"
      "\026.cmongoproto.ResHeader\022\017\n\007task_id\030\002 \001(\004"
      "\"s\n\017CleanMigrateReq\022&\n\006header\030\001 \001(\0132\026.cm"
      "ongoproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022"
      "\017\n\007task_id\030\003 \001(\004\022\023\n\013sub_task_id\030\004 \001(\t\"9\n"
      "\017CleanMigrateRsp\022&\n\006header\030\001 \001(\0132\026.cmong"
      "oproto.ResHeader\"b\n\023GetMigrateStatusReq\022"
      "&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022"
      "\022\n\ncluster_id\030\002 \001(\t\022\017\n\007task_id\030\003 \001(\004\"\252\001\n"
      "\rMigrateStatus\022\016\n\006src_ip\030\001 \001(\t\022\024\n\014src_se"
      "t_name\030\002 \001(\t\022\024\n\014dst_set_name\030\003 \001(\t\022\022\n\nch"
      "unk_list\030\004 \003(\005\022\016\n\006c_time\030\005 \001(\r\022\016\n\006f_time"
      "\030\006 \001(\r\022\n\n\002ns\030\007 \001(\t\022\r\n\005stage\030\010 \001(\t\022\016\n\006sta"
      "tus\030\t \001(\t\"4\n\014MigrateGroup\022\017\n\007task_id\030\001 \001"
      "(\004\022\023\n\013sub_task_id\030\002 \003(\t\"q\n\023GetMigrateSta"
      "tusRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Res"
      "Header\0222\n\016migrate_status\030\002 \003(\0132\032.masterp"
      "roto.MigrateStatus\"w\n\nMigrateJob\022\n\n\002id\030\001"
      " \001(\t\022\r\n\005stage\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\022\013\n\003e"
      "rr\030\004 \001(\t\022\017\n\007read_ct\030\005 \001(\004\022\017\n\007send_ct\030\006 \001"
      "(\004\022\017\n\007version\030\007 \001(\r\"x\n\024ReportMigrateInfo"
      "Req\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHea"
      "der\022\022\n\nsession_id\030\002 \001(\t\022$\n\003job\030\003 \001(\0132\027.m"
      "asterproto.MigrateJob\">\n\024ReportMigrateIn"
      "foRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResH"
      "eader\"_\n\025IsTableInMigratingReq\022&\n\006header"
      "\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\ncluste"
      "r_id\030\002 \001(\t\022\n\n\002ns\030\003 \001(\t\"U\n\025IsTableInMigra"
      "tingRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Re"
      "sHeader\022\024\n\014is_migrating\030\002 \001(\010\"m\n\017Restore"
      "FilesReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "eqHeader\022\013\n\003src\030\002 \001(\t\022\n\n\002ts\030\003 \001(\003\022\n\n\002db\030"
      "\004 \001(\t\022\r\n\005table\030\005 \001(\t\"g\n\017RestoreFilesRes\022"
      "&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader\022"
      "\024\n\014snapshotFile\030\002 \001(\t\022\026\n\016incrementFiles\030"
      "\003 \003(\t\"m\n\016ActiveNodeInfo\022\025\n\rnameserviceId"
      "\030\001 \001(\t\022\022\n\nnamenodeId\030\002 \001(\t\022\020\n\010hostname\030\003"
      " \001(\t\022\014\n\004port\030\004 \001(\005\022\020\n\010zkfcPort\030\005 \001(\005\"l\n\021"
      "GenBalanceTaskReq\022&\n\006header\030\001 \001(\0132\026.cmon"
      "goproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\022\n\n"
      "\002ns\030\003 \001(\t\022\017\n\007creator\030\004 \001(\t\"{\n\013BalanceTas"
      "k\022\022\n\ncluster_id\030\001 \001(\t\022\n\n\002ns\030\002 \001(\t\022\022\n\nchu"
      "nk_list\030\003 \003(\005\022\021\n\tsrc_shard\030\004 \001(\t\022\021\n\tdst_"
      "shard\030\005 \001(\t\022\022\n\nauto_clean\030\006 \001(\010\"d\n\021GenBa"
      "lanceTaskRsp\022&\n\006header\030\001 \001(\0132\026.cmongopro"
      "to.ResHeader\022\'\n\005tasks\030\002 \003(\0132\030.masterprot"
      "o.BalanceTask\"n\n\nBalanceReq\022&\n\006header\030\001 "
      "\001(\0132\026.cmongoproto.ReqHeader\022\'\n\005tasks\030\002 \003"
      "(\0132\030.masterproto.BalanceTask\022\017\n\007creator\030"
      "\003 \001(\t\"E\n\nBalanceRsp\022&\n\006header\030\001 \001(\0132\026.cm"
      "ongoproto.ResHeader\022\017\n\007task_id\030\002 \001(\004\"\231\001\n"
      "\023ChangeRouteStateReq\022&\n\006header\030\001 \001(\0132\026.c"
      "mongoproto.ReqHeader\022\022\n\ncluster_id\030\002 \001(\t"
      "\022\017\n\007db_name\030\003 \001(\t\022\022\n\ntable_name\030\004 \001(\t\022\022\n"
      "\nchunk_list\030\005 \003(\005\022\r\n\005state\030\006 \001(\005\"=\n\023Chan"
      "geRouteStateRsp\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ResHeader\"\330\001\n\020ChangeRouteRsReq\022&\n\006"
      "header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\n"
      "cluster_id\030\002 \001(\t\022\017\n\007db_name\030\003 \001(\t\022\022\n\ntab"
      "le_name\030\004 \001(\t\022\022\n\nchunk_list\030\005 \003(\005\022\026\n\016sou"
      "rce_rs_name\030\006 \001(\t\022\024\n\014dest_rs_name\030\007 \001(\t\022"
      "\r\n\005state\030\010 \001(\005\022\022\n\nsession_id\030\t \001(\t\":\n\020Ch"
      "angeRouteRsRsp\022&\n\006header\030\001 \001(\0132\026.cmongop"
      "roto.ResHeader\"d\n\023GetClusterRoutesReq\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n"
      "\ncluster_id\030\002 \001(\t\022\021\n\ttime_nano\030\003 \001(\003\"/\n\n"
      "RouteChunk\022\022\n\nshard_name\030\001 \001(\t\022\r\n\005state\030"
      "\002 \001(\005\"/\n\016TableRoutesRaw\022\n\n\002ns\030\001 \001(\t\022\021\n\tr"
      "aw_route\030\002 \001(\t\"\257\001\n\013TableRoutes\022\n\n\002ns\030\001 \001"
      "(\t\022\021\n\tshard_key\030\002 \003(\t\022\'\n\006routes\030\003 \003(\0132\027."
      "masterproto.RouteChunk\022\022\n\nroute_data\030\004 \001"
      "(\t\022\017\n\007version\030\005 \001(\005\022\013\n\003md5\030\006 \001(\t\022\022\n\nrout"
      "e_type\030\007 \001(\t\022\022\n\ntable_type\030\010 \001(\t\"g\n\023GetC"
      "lusterRoutesRsp\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ResHeader\022(\n\006routes\030\002 \003(\0132\030.master"
      "proto.TableRoutes\"k\n\032GetIntersectMigrate"
      "JobsReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Re"
      "qHeader\022\022\n\ncluster_id\030\002 \001(\t\022\021\n\ttime_nano"
      "\030\003 \001(\003\"\222\001\n\017MigrateInterval\022\021\n\tsrc_shard\030"
      "\003 \001(\t\022\021\n\tdst_shard\030\004 \001(\t\022\n\n\002ns\030\005 \001(\t\022\022\n\n"
      "chunk_list\030\006 \003(\005\022\022\n\nbegin_time\030\007 \001(\003\022\020\n\010"
      "end_time\030\010 \001(\003\022\023\n\013change_time\030\t \001(\003\"p\n\032G"
      "etIntersectMigrateJobsRsp\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ResHeader\022*\n\004jobs\030\002 \003(\0132"
      "\034.masterproto.MigrateInterval\"O\n\021GetClus"
      "terInfoReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ReqHeader\022\022\n\ncluster_id\030\002 \001(\t\"k\n\021GetClu"
      "sterInfoRsp\022&\n\006header\030\001 \001(\0132\026.cmongoprot"
      "o.ResHeader\022.\n\014cluster_info\030\002 \001(\0132\030.mast"
      "erproto.ClusterInfo\"\250\001\n\025SetProxyNotifyIn"
      "foReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqH"
      "eader\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005"
      "\0220\n\006method\030\004 \001(\0162 .masterproto.EnumProxy"
      "NotifyType\022\022\n\nnotify_url\030\005 \001(\t\"\?\n\025SetPro"
      "xyNotifyInfoRsp\022&\n\006header\030\001 \001(\0132\026.cmongo"
      "proto.ResHeader\"b\n\025GetProxyNotifyInfoReq"
      "\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader"
      "\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\"\205\001\n\025"
      "GetProxyNotifyInfoRsp\022&\n\006header\030\001 \001(\0132\026."
      "cmongoproto.ResHeader\0220\n\006method\030\002 \001(\0162 ."
      "masterproto.EnumProxyNotifyType\022\022\n\nnotif"
      "y_url\030\005 \001(\t\"s\n\020SetClusterBanReq\022&\n\006heade"
      "r\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022\n\nclust"
      "er_id\030\002 \001(\t\022\020\n\010ban_read\030\003 \001(\010\022\021\n\tban_wri"
      "te\030\004 \001(\010\":\n\020SetClusterBanRsp\022&\n\006header\030\001"
      " \001(\0132\026.cmongoproto.ResHeader\"N\n\020GetClust"
      "erBanReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "eqHeader\022\022\n\ncluster_id\030\002 \001(\t\"_\n\020GetClust"
      "erBanRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.R"
      "esHeader\022\020\n\010ban_read\030\002 \001(\010\022\021\n\tban_write\030"
      "\003 \001(\010\"\252\001\n\rSetVersionReq\022&\n\006header\030\001 \001(\0132"
      "\026.cmongoproto.ReqHeader\022\021\n\tregion_id\030\002 \001"
      "(\005\022\016\n\006set_id\030\003 \001(\005\022\031\n\021mongod_subversion\030"
      "\004 \001(\t\022\025\n\rproxy_version\030\005 \001(\t\022\034\n\024dynamo_p"
      "roxy_version\030\006 \001(\t\"7\n\rSetVersionRsp\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ResHeader\"Z\n\rG"
      "etVersionReq\022&\n\006header\030\001 \001(\0132\026.cmongopro"
      "to.ReqHeader\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_i"
      "d\030\003 \001(\005\"\207\001\n\rGetVersionRsp\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ResHeader\022\031\n\021mongod_subv"
      "ersion\030\002 \001(\t\022\025\n\rproxy_version\030\003 \001(\t\022\034\n\024d"
      "ynamo_proxy_version\030\004 \001(\t\"\200\001\n\016ResizeOplo"
      "gReq\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHe"
      "ader\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\022"
      "\022\n\ncluster_id\030\004 \001(\t\022\017\n\007size_mB\030\005 \001(\005\"8\n\016"
      "ResizeOplogRsp\022&\n\006header\030\001 \001(\0132\026.cmongop"
      "roto.ResHeader\"\231\001\n\023RestartContainerReq\022&"
      "\n\006header\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\022"
      "\n\ncluster_id\030\002 \001(\t\022.\n\016container_type\030\003 \001"
      "(\0162\026.cmongoproto.MongoType\022\026\n\016container_"
      "name\030\004 \001(\t\"=\n\023RestartContainerRsp\022&\n\006hea"
      "der\030\001 \001(\0132\026.cmongoproto.ResHeader\"\210\001\n\025Se"
      "tClusterMaxConnsReq\022&\n\006header\030\001 \001(\0132\026.cm"
      "ongoproto.ReqHeader\022\021\n\tregion_id\030\002 \001(\005\022\016"
      "\n\006set_id\030\003 \001(\005\022\022\n\ncluster_id\030\004 \001(\t\022\020\n\010co"
      "nn_num\030\005 \001(\005\"\?\n\025SetClusterMaxConnsRsp\022&\n"
      "\006header\030\001 \001(\0132\026.cmongoproto.ResHeader\"U\n"
      "\030GetRegionBackupConfigReq\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ReqHeader\022\021\n\tregion_id\030\002"
      " \001(\005\"p\n\030GetRegionBackupConfigRsp\022&\n\006head"
      "er\030\001 \001(\0132\026.cmongoproto.ResHeader\022,\n\013auto"
      "_backup\030\002 \001(\0162\027.masterproto.AutoBackup\"\203"
      "\001\n\030SetRegionBackupConfigReq\022&\n\006header\030\001 "
      "\001(\0132\026.cmongoproto.ReqHeader\022\021\n\tregion_id"
      "\030\002 \001(\005\022,\n\013auto_backup\030\004 \001(\0162\027.masterprot"
      "o.AutoBackup\"B\n\030SetRegionBackupConfigRsp"
      "\022&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader"
      "\"z\n\031GetClusterBackupConfigReq\022&\n\006header\030"
      "\001 \001(\0132\026.cmongoproto.ReqHeader\022\021\n\tregion_"
      "id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\022\022\n\ncluster_id\030\004"
      " \001(\t\"\210\001\n\031GetClusterBackupConfigRsp\022&\n\006he"
      "ader\030\001 \001(\0132\026.cmongoproto.ResHeader\022,\n\013au"
      "to_backup\030\002 \001(\0162\027.masterproto.AutoBackup"
      "\022\025\n\rtime_interval\030\003 \001(\005\"\277\001\n\031SetClusterBa"
      "ckupConfigReq\022&\n\006header\030\001 \001(\0132\026.cmongopr"
      "oto.ReqHeader\022\021\n\tregion_id\030\002 \001(\005\022\016\n\006set_"
      "id\030\003 \001(\005\022\022\n\ncluster_id\030\004 \001(\t\022,\n\013auto_bac"
      "kup\030\005 \001(\0162\027.masterproto.AutoBackup\022\025\n\rti"
      "me_interval\030\006 \001(\005\"C\n\031SetClusterBackupCon"
      "figRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto.Res"
      "Header\"z\n\031DelClusterBackupConfigReq\022&\n\006h"
      "eader\030\001 \001(\0132\026.cmongoproto.ReqHeader\022\021\n\tr"
      "egion_id\030\002 \001(\005\022\016\n\006set_id\030\003 \001(\005\022\022\n\ncluste"
      "r_id\030\004 \001(\t\"C\n\031DelClusterBackupConfigRsp\022"
      "&\n\006header\030\001 \001(\0132\026.cmongoproto.ResHeader\""
      "g\n\026GetClusterRoutesRawReq\022&\n\006header\030\001 \001("
      "\0132\026.cmongoproto.ReqHeader\022\022\n\ncluster_id\030"
      "\002 \001(\t\022\021\n\ttime_nano\030\003 \001(\003\"m\n\026GetClusterRo"
      "utesRawRsp\022&\n\006header\030\001 \001(\0132\026.cmongoproto"
      ".ResHeader\022+\n\006routes\030\002 \003(\0132\033.masterproto"
      ".TableRoutesRaw*(\n\nStatusType\022\006\n\002OK\020\000\022\010\n"
      "\004DOWN\020\001\022\010\n\004DEAD\020\002*9\n\013ClusterType\022\021\n\rREPL"
      "ICATE_SET\020\000\022\t\n\005SHARD\020\001\022\014\n\010DYNAMODB\020\002*\247\003\n"
      "\007JobType\022\022\n\016CREATE_CLUSTER\020\000\022\022\n\016DELETE_C"
      "LUSTER\020\001\022\030\n\024CREATE_CLUSTER_RETRY\020\002\022\030\n\024DE"
      "LETE_CLUSTER_RETRY\020\003\022\022\n\016EXPAND_CLUSTER\020\004"
      "\022\030\n\024EXPAND_CLUSTER_RETRY\020\005\022\024\n\020CONTRACT_C"
      "LUSTER\020\006\022\032\n\026CONTRACT_CLUSTER_RETRY\020\007\022\022\n\016"
      "BACKUP_CLUSTER\020\010\022\030\n\024BACKUP_CLUSTER_RETRY"
      "\020\t\022\023\n\017RESTORE_CLUSTER\020\n\022\031\n\025RESTORE_CLUST"
      "ER_RETRY\020\013\022\021\n\rADD_REPLICATE\020\014\022\027\n\023ADD_REP"
      "LICATE_RETRY\020\r\022\021\n\rDEL_REPLICATE\020\016\022\027\n\023DEL"
      "_REPLICATE_RETRY\020\017\022\021\n\rADD_CONTAINER\020\020\022\027\n"
      "\023ADD_CONTAINER_RETRY\020\021*\\\n\tJobStatus\022\r\n\tN"
      "OT_EXIST\020\000\022\r\n\tNOT_START\020\001\022\t\n\005START\020\002\022\n\n\006"
      "FINISH\020\003\022\n\n\006FAILED\020\004\022\016\n\nOPLOG_ROLL\020\005*\230\001\n"
      "\013MachineType\022\022\n\016MONGOD_HIGH_IO\020\000\022\023\n\017MONG"
      "OD_HIGH_CAP\020\001\022\013\n\007ARBITOR\020\002\022\t\n\005PROXY\020\003\022\021\n"
      "\rMONGOD_IO_T85\020\004\022\021\n\rMONGOD_CAP_T6\020\005\022\016\n\nM"
      "ONGOD_TBD\020\006\022\022\n\016MONGOD_IO_TS80\020\007*\240\001\n\rClus"
      "terStatus\022\020\n\014CLUSTER_INIT\020\000\022\023\n\017CLUSTER_R"
      "UNNING\020\001\022\022\n\016CLUSTER_RESIZE\020\002\022\022\n\016CLUSTER_"
      "BACKUP\020\003\022\023\n\017CLUSTER_RESTORE\020\004\022\025\n\021CLUSTER"
      "_ISOLATION\020\005\022\024\n\020CLUSTER_DELETING\020\006*C\n\010Au"
      "thMask\022\010\n\004NONE\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nWRITE"
      "_ONLY\020\002\022\016\n\nREAD_WRITE\020\003*C\n\023EnumProxyNoti"
      "fyType\022\025\n\021PROXY_NOTIFY_NONE\020\000\022\014\n\010NETAGEN"
      "T\020\001\022\007\n\003CL5\020\002*\035\n\nAutoBackup\022\007\n\003OFF\020\000\022\006\n\002O"
      "N\020\0012\263,\n\006Master\022I\n\013AddResource\022\033.masterpr"
      "oto.AddResourceReq\032\033.masterproto.AddReso"
      "urceRsp\"\000\022O\n\rBlockResource\022\035.masterproto"
      ".BlockResourceReq\032\035.masterproto.BlockRes"
      "ourceRsp\"\000\022U\n\017UnblockResource\022\037.masterpr"
      "oto.UnblockResourceReq\032\037.masterproto.Unb"
      "lockResourceRsp\"\000\022I\n\013DelResource\022\033.maste"
      "rproto.DelResourceReq\032\033.masterproto.DelR"
      "esourceRsp\"\000\022O\n\rQueryResource\022\035.masterpr"
      "oto.QueryResourceReq\032\035.masterproto.Query"
      "ResourceRsp\"\000\022X\n\020MigrateContainer\022 .mast"
      "erproto.MigrateContainerReq\032 .masterprot"
      "o.MigrateContainerRsp\"\000\022R\n\016MigrateMachin"
      "e\022\036.masterproto.MigrateMachineReq\032\036.mast"
      "erproto.MigrateMachineRsp\"\000\022L\n\014QueryMach"
      "ine\022\034.masterproto.QueryMachineReq\032\034.mast"
      "erproto.QueryMachineRsp\"\000\022L\n\014AddContaine"
      "r\022\034.masterproto.AddContainerReq\032\034.master"
      "proto.AddContainerRsp\"\000\022L\n\014DelContainer\022"
      "\034.masterproto.DelContainerReq\032\034.masterpr"
      "oto.DelContainerRsp\"\000\022[\n\021AddContainerAsy"
      "nc\022!.masterproto.AddContainerAsyncReq\032!."
      "masterproto.AddContainerAsyncRsp\"\000\022O\n\rCr"
      "eateCluster\022\035.masterproto.CreateClusterR"
      "eq\032\035.masterproto.CreateClusterRsp\"\000\022d\n\024U"
      "pgradeClusterModule\022$.masterproto.Upgrad"
      "eClusterModuleReq\032$.masterproto.UpgradeC"
      "lusterModuleRsp\"\000\022I\n\013InfoCluster\022\033.maste"
      "rproto.InfoClusterReq\032\033.masterproto.Info"
      "ClusterRsp\"\000\022F\n\nDelCluster\022\032.masterproto"
      ".DelClusterReq\032\032.masterproto.DelClusterR"
      "sp\"\000\022I\n\013ListCluster\022\033.masterproto.ListCl"
      "usterReq\032\033.masterproto.ListClusterRsp\"\000\022"
      "F\n\016ChangePassword\022\030.masterproto.ChPasswd"
      "Req\032\030.masterproto.ChPasswdRsp\"\000\022C\n\tJobSt"
      "atus\022\031.masterproto.JobStatusReq\032\031.master"
      "proto.JobStatusRsp\"\000\022O\n\rResizeCluster\022\035."
      "masterproto.ResizeClusterReq\032\035.masterpro"
      "to.ResizeClusterRsp\"\000\022O\n\rBackupCluster\022\035"
      ".masterproto.BackupClusterReq\032\035.masterpr"
      "oto.BackupClusterRsp\"\000\022U\n\017QueryBackupLis"
      "t\022\037.masterproto.QueryBackupListReq\032\037.mas"
      "terproto.QueryBackupListRsp\"\000\022R\n\016CheckRe"
      "storeTs\022\036.masterproto.CheckRestoreTsReq\032"
      "\036.masterproto.CheckRestoreTsRsp\"\000\022R\n\016Res"
      "toreCluster\022\036.masterproto.RestoreCluster"
      "Req\032\036.masterproto.RestoreClusterRsp\"\000\022U\n"
      "\017ExchangeCluster\022\037.masterproto.ExchangeC"
      "lusterReq\032\037.masterproto.ExchangeClusterR"
      "sp\"\000\022X\n\020IsolationCluster\022 .masterproto.I"
      "solationClusterReq\032 .masterproto.Isolati"
      "onClusterRsp\"\000\022A\n\017AddReplicateSet\022\025.mast"
      "erproto.AddRsReq\032\025.masterproto.AddRsRsp\""
      "\000\022A\n\017DelReplicateSet\022\025.masterproto.DelRs"
      "Req\032\025.masterproto.DelRsRsp\"\000\022N\n\020QueryOpL"
      "ogStatus\022\033.masterproto.OpLogStatusReq\032\033."
      "masterproto.OpLogStatusRsp\"\000\022:\n\006ShowDb\022\026"
      ".masterproto.ShowDbReq\032\026.masterproto.Sho"
      "wDbRsp\"\000\022C\n\tShowColls\022\031.masterproto.Show"
      "CollsReq\032\031.masterproto.ShowCollsRsp\"\000\022L\n"
      "\014GetSlowQuery\022\034.masterproto.GetSlowQuery"
      "Req\032\034.masterproto.GetSlowQueryRsp\"\000\022I\n\013Q"
      "rySlowInfo\022\033.masterproto.QrySlowInfoReq\032"
      "\033.masterproto.QrySlowInfoRsp\"\000\022F\n\nCreate"
      "User\022\032.masterproto.CreateUserReq\032\032.maste"
      "rproto.CreateUserRsp\"\000\022O\n\rQueryUserList\022"
      "\035.masterproto.QueryUserListReq\032\035.masterp"
      "roto.QueryUserListRsp\"\000\022F\n\nDeleteUser\022\032."
      "masterproto.DeleteUserReq\032\032.masterproto."
      "DeleteUserRsp\"\000\022I\n\013SetUserAuth\022\033.masterp"
      "roto.SetUserAuthReq\032\033.masterproto.SetUse"
      "rAuthRsp\"\000\0224\n\004Ping\022\024.cmongoproto.PingReq"
      "\032\024.cmongoproto.PingRes\"\000\022I\n\013CreateTable\022"
      "\033.masterproto.CreateTableReq\032\033.masterpro"
      "to.CreateTableRsp\"\000\022C\n\tDropTable\022\031.maste"
      "rproto.DropTableReq\032\031.masterproto.DropTa"
      "bleRsp\"\000\022L\n\014DropDatabase\022\034.masterproto.D"
      "ropDatabaseReq\032\034.masterproto.DropDatabas"
      "eRsp\"\000\022I\n\013EnsureIndex\022\033.masterproto.Ensu"
      "reIndexReq\032\033.masterproto.EnsureIndexRsp\""
      "\000\022C\n\tDropIndex\022\031.masterproto.DropIndexRe"
      "q\032\031.masterproto.DropIndexRsp\"\000\022O\n\rDropIn"
      "dexName\022\035.masterproto.DropIndexNameReq\032\035"
      ".masterproto.DropIndexNameRsp\"\000\022[\n\021Repor"
      "tMigrateInfo\022!.masterproto.ReportMigrate"
      "InfoReq\032!.masterproto.ReportMigrateInfoR"
      "sp\"\000\022=\n\007Migrate\022\027.masterproto.MigrateReq"
      "\032\027.masterproto.MigrateRsp\"\000\022L\n\014CleanMigr"
      "ate\022\034.masterproto.CleanMigrateReq\032\034.mast"
      "erproto.CleanMigrateRsp\"\000\022X\n\020GetMigrateS"
      "tatus\022 .masterproto.GetMigrateStatusReq\032"
      " .masterproto.GetMigrateStatusRsp\"\000\022^\n\022I"
      "sTableInMigrating\022\".masterproto.IsTableI"
      "nMigratingReq\032\".masterproto.IsTableInMig"
      "ratingRsp\"\000\022L\n\014RestoreFiles\022\034.masterprot"
      "o.RestoreFilesReq\032\034.masterproto.RestoreF"
      "ilesRes\"\000\022R\n\016GenBalanceTask\022\036.masterprot"
      "o.GenBalanceTaskReq\032\036.masterproto.GenBal"
      "anceTaskRsp\"\000\022=\n\007Balance\022\027.masterproto.B"
      "alanceReq\032\027.masterproto.BalanceRsp\"\000\022W\n\017"
      "ChangeRouteStat\022 .masterproto.ChangeRout"
      "eStateReq\032 .masterproto.ChangeRouteState"
      "Rsp\"\000\022O\n\rChangeRouteRs\022\035.masterproto.Cha"
      "ngeRouteRsReq\032\035.masterproto.ChangeRouteR"
      "sRsp\"\000\022X\n\020GetClusterRoutes\022 .masterproto"
      ".GetClusterRoutesReq\032 .masterproto.GetCl"
      "usterRoutesRsp\"\000\022m\n\027GetIntersectMigrateJ"
      "obs\022\'.masterproto.GetIntersectMigrateJob"
      "sReq\032\'.masterproto.GetIntersectMigrateJo"
      "bsRsp\"\000\022R\n\016GetClusterInfo\022\036.masterproto."
      "GetClusterInfoReq\032\036.masterproto.GetClust"
      "erInfoRsp\"\000\022^\n\022SetProxyNotifyInfo\022\".mast"
      "erproto.SetProxyNotifyInfoReq\032\".masterpr"
      "oto.SetProxyNotifyInfoRsp\"\000\022^\n\022GetProxyN"
      "otifyInfo\022\".masterproto.GetProxyNotifyIn"
      "foReq\032\".masterproto.GetProxyNotifyInfoRs"
      "p\"\000\022J\n\016SetVersionInfo\022\032.masterproto.SetV"
      "ersionReq\032\032.masterproto.SetVersionRsp\"\000\022"
      "J\n\016GetVersionInfo\022\032.masterproto.GetVersi"
      "onReq\032\032.masterproto.GetVersionRsp\"\000\022I\n\013R"
      "esizeOplog\022\033.masterproto.ResizeOplogReq\032"
      "\033.masterproto.ResizeOplogRsp\"\000\022X\n\020Restar"
      "tContainer\022 .masterproto.RestartContaine"
      "rReq\032 .masterproto.RestartContainerRsp\"\000"
      "\022^\n\022SetClusterMaxConns\022\".masterproto.Set"
      "ClusterMaxConnsReq\032\".masterproto.SetClus"
      "terMaxConnsRsp\"\000\022g\n\025GetRegionBackupConfi"
      "g\022%.masterproto.GetRegionBackupConfigReq"
      "\032%.masterproto.GetRegionBackupConfigRsp\""
      "\000\022g\n\025SetRegionBackupConfig\022%.masterproto"
      ".SetRegionBackupConfigReq\032%.masterproto."
      "SetRegionBackupConfigRsp\"\000\022j\n\026GetCluster"
      "BackupConfig\022&.masterproto.GetClusterBac"
      "kupConfigReq\032&.masterproto.GetClusterBac"
      "kupConfigRsp\"\000\022j\n\026SetClusterBackupConfig"
      "\022&.masterproto.SetClusterBackupConfigReq"
      "\032&.masterproto.SetClusterBackupConfigRsp"
      "\"\000\022j\n\026DelClusterBackupConfig\022&.masterpro"
      "to.DelClusterBackupConfigReq\032&.masterpro"
      "to.DelClusterBackupConfigRsp\"\000\022a\n\023GetClu"
      "sterRoutesRaw\022#.masterproto.GetClusterRo"
      "utesRawReq\032#.masterproto.GetClusterRoute"
      "sRawRsp\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 27977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmongo/masterproto/master.proto", &protobuf_RegisterTypes);
  ::cmongoproto::protobuf_cmongo_2fcmongoproto_2fcmongo_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmongo_2fmasterproto_2fmaster_2eproto

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[0];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClusterType_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[1];
}
bool ClusterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JobType_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[2];
}
bool JobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JobStatus_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[3];
}
bool JobStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MachineType_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[4];
}
bool MachineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClusterStatus_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[5];
}
bool ClusterStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuthMask_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[6];
}
bool AuthMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumProxyNotifyType_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[7];
}
bool EnumProxyNotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AutoBackup_descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_enum_descriptors[8];
}
bool AutoBackup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerInfo::kContainerNameFieldNumber;
const int ContainerInfo::kClusterIdFieldNumber;
const int ContainerInfo::kReplicateSetFieldNumber;
const int ContainerInfo::kContainerTypeFieldNumber;
const int ContainerInfo::kContainerVersionFieldNumber;
const int ContainerInfo::kStatusFieldNumber;
const int ContainerInfo::kQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerInfo::ContainerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ContainerInfo)
}
ContainerInfo::ContainerInfo(const ContainerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_name().size() > 0) {
    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  replicate_set_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.replicate_set().size() > 0) {
    replicate_set_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replicate_set_);
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&container_type_, &from.container_type_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&container_type_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ContainerInfo)
}

void ContainerInfo::SharedCtor() {
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replicate_set_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quota_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&quota_) + sizeof(status_));
  _cached_size_ = 0;
}

ContainerInfo::~ContainerInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ContainerInfo)
  SharedDtor();
}

void ContainerInfo::SharedDtor() {
  container_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replicate_set_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void ContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[0].descriptor;
}

const ContainerInfo& ContainerInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContainerInfo* ContainerInfo::New(::google::protobuf::Arena* arena) const {
  ContainerInfo* n = new ContainerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ContainerInfo)
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replicate_set_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&container_type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&container_type_) + sizeof(status_));
}

bool ContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ContainerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string container_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_name().data(), this->container_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ContainerInfo.container_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ContainerInfo.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replicate_set = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replicate_set()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replicate_set().data(), this->replicate_set().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ContainerInfo.replicate_set"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoVersion container_version = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_version(static_cast< ::cmongoproto::MongoVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.StatusType status = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::masterproto::StatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ContainerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ContainerInfo)
  return false;
#undef DO_
}

void ContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ContainerInfo)
  // string container_name = 1;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), this->container_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.container_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->container_name(), output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string replicate_set = 3;
  if (this->replicate_set().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replicate_set().data(), this->replicate_set().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.replicate_set");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->replicate_set(), output);
  }

  // .cmongoproto.MongoType container_type = 4;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->container_type(), output);
  }

  // .cmongoproto.MongoVersion container_version = 5;
  if (this->container_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->container_version(), output);
  }

  // .masterproto.StatusType status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // .cmongoproto.ResourceDesc quota = 7;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->quota_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ContainerInfo)
}

::google::protobuf::uint8* ContainerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ContainerInfo)
  // string container_name = 1;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), this->container_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.container_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->container_name(), target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string replicate_set = 3;
  if (this->replicate_set().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replicate_set().data(), this->replicate_set().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ContainerInfo.replicate_set");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->replicate_set(), target);
  }

  // .cmongoproto.MongoType container_type = 4;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->container_type(), target);
  }

  // .cmongoproto.MongoVersion container_version = 5;
  if (this->container_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->container_version(), target);
  }

  // .masterproto.StatusType status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // .cmongoproto.ResourceDesc quota = 7;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->quota_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ContainerInfo)
  return target;
}

size_t ContainerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ContainerInfo)
  size_t total_size = 0;

  // string container_name = 1;
  if (this->container_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_name());
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string replicate_set = 3;
  if (this->replicate_set().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replicate_set());
  }

  // .cmongoproto.ResourceDesc quota = 7;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // .cmongoproto.MongoType container_type = 4;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  // .cmongoproto.MongoVersion container_version = 5;
  if (this->container_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_version());
  }

  // .masterproto.StatusType status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ContainerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ContainerInfo)
    MergeFrom(*source);
  }
}

void ContainerInfo::MergeFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ContainerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.container_name().size() > 0) {

    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.replicate_set().size() > 0) {

    replicate_set_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replicate_set_);
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
  if (from.container_version() != 0) {
    set_container_version(from.container_version());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo::CopyFrom(const ContainerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ContainerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo::IsInitialized() const {
  return true;
}

void ContainerInfo::Swap(ContainerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerInfo::InternalSwap(ContainerInfo* other) {
  container_name_.Swap(&other->container_name_);
  cluster_id_.Swap(&other->cluster_id_);
  replicate_set_.Swap(&other->replicate_set_);
  std::swap(quota_, other->quota_);
  std::swap(container_type_, other->container_type_);
  std::swap(container_version_, other->container_version_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerInfo

// string container_name = 1;
void ContainerInfo::clear_container_name() {
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContainerInfo::container_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.container_name)
  return container_name_.GetNoArena();
}
void ContainerInfo::set_container_name(const ::std::string& value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.container_name)
}
#if LANG_CXX11
void ContainerInfo::set_container_name(::std::string&& value) {
  
  container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ContainerInfo.container_name)
}
#endif
void ContainerInfo::set_container_name(const char* value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ContainerInfo.container_name)
}
void ContainerInfo::set_container_name(const char* value, size_t size) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ContainerInfo.container_name)
}
::std::string* ContainerInfo::mutable_container_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerInfo.container_name)
  return container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContainerInfo::release_container_name() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerInfo.container_name)
  
  return container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContainerInfo::set_allocated_container_name(::std::string* container_name) {
  if (container_name != NULL) {
    
  } else {
    
  }
  container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerInfo.container_name)
}

// string cluster_id = 2;
void ContainerInfo::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContainerInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.cluster_id)
  return cluster_id_.GetNoArena();
}
void ContainerInfo::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.cluster_id)
}
#if LANG_CXX11
void ContainerInfo::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ContainerInfo.cluster_id)
}
#endif
void ContainerInfo::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ContainerInfo.cluster_id)
}
void ContainerInfo::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ContainerInfo.cluster_id)
}
::std::string* ContainerInfo::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerInfo.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContainerInfo::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerInfo.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContainerInfo::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerInfo.cluster_id)
}

// string replicate_set = 3;
void ContainerInfo::clear_replicate_set() {
  replicate_set_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContainerInfo::replicate_set() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.replicate_set)
  return replicate_set_.GetNoArena();
}
void ContainerInfo::set_replicate_set(const ::std::string& value) {
  
  replicate_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.replicate_set)
}
#if LANG_CXX11
void ContainerInfo::set_replicate_set(::std::string&& value) {
  
  replicate_set_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ContainerInfo.replicate_set)
}
#endif
void ContainerInfo::set_replicate_set(const char* value) {
  
  replicate_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ContainerInfo.replicate_set)
}
void ContainerInfo::set_replicate_set(const char* value, size_t size) {
  
  replicate_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ContainerInfo.replicate_set)
}
::std::string* ContainerInfo::mutable_replicate_set() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerInfo.replicate_set)
  return replicate_set_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContainerInfo::release_replicate_set() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerInfo.replicate_set)
  
  return replicate_set_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContainerInfo::set_allocated_replicate_set(::std::string* replicate_set) {
  if (replicate_set != NULL) {
    
  } else {
    
  }
  replicate_set_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replicate_set);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerInfo.replicate_set)
}

// .cmongoproto.MongoType container_type = 4;
void ContainerInfo::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType ContainerInfo::container_type() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void ContainerInfo::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.container_type)
}

// .cmongoproto.MongoVersion container_version = 5;
void ContainerInfo::clear_container_version() {
  container_version_ = 0;
}
::cmongoproto::MongoVersion ContainerInfo::container_version() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.container_version)
  return static_cast< ::cmongoproto::MongoVersion >(container_version_);
}
void ContainerInfo::set_container_version(::cmongoproto::MongoVersion value) {
  
  container_version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.container_version)
}

// .masterproto.StatusType status = 6;
void ContainerInfo::clear_status() {
  status_ = 0;
}
::masterproto::StatusType ContainerInfo::status() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.status)
  return static_cast< ::masterproto::StatusType >(status_);
}
void ContainerInfo::set_status(::masterproto::StatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ContainerInfo.status)
}

// .cmongoproto.ResourceDesc quota = 7;
bool ContainerInfo::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void ContainerInfo::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& ContainerInfo::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerInfo.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* ContainerInfo::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerInfo.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* ContainerInfo::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerInfo.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void ContainerInfo::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerInfo.quota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineInfo::kMachineIpFieldNumber;
const int MachineInfo::kMachineStatusFieldNumber;
const int MachineInfo::kContainerNumFieldNumber;
const int MachineInfo::kMachineTypeFieldNumber;
const int MachineInfo::kClusterListFieldNumber;
const int MachineInfo::kCapacityFieldNumber;
const int MachineInfo::kFreeFieldNumber;
const int MachineInfo::kContainerListFieldNumber;
const int MachineInfo::kMemoryURVFieldNumber;
const int MachineInfo::kNumURVFieldNumber;
const int MachineInfo::kIdcParentIdFieldNumber;
const int MachineInfo::kIdcIdFieldNumber;
const int MachineInfo::kRackIdFieldNumber;
const int MachineInfo::kIdcOperationIdFieldNumber;
const int MachineInfo::kWorkerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineInfo::MachineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MachineInfo)
}
MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cluster_list_(from.cluster_list_),
      container_list_(from.container_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  worker_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_version().size() > 0) {
    worker_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_version_);
  }
  if (from.has_capacity()) {
    capacity_ = new ::cmongoproto::ResourceDesc(*from.capacity_);
  } else {
    capacity_ = NULL;
  }
  if (from.has_free()) {
    free_ = new ::cmongoproto::ResourceDesc(*from.free_);
  } else {
    free_ = NULL;
  }
  ::memcpy(&machine_status_, &from.machine_status_,
    reinterpret_cast<char*>(&idc_operation_id_) -
    reinterpret_cast<char*>(&machine_status_) + sizeof(idc_operation_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.MachineInfo)
}

void MachineInfo::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&idc_operation_id_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(idc_operation_id_));
  _cached_size_ = 0;
}

MachineInfo::~MachineInfo() {
  // @@protoc_insertion_point(destructor:masterproto.MachineInfo)
  SharedDtor();
}

void MachineInfo::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete capacity_;
  }
  if (this != internal_default_instance()) {
    delete free_;
  }
}

void MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[1].descriptor;
}

const MachineInfo& MachineInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MachineInfo* MachineInfo::New(::google::protobuf::Arena* arena) const {
  MachineInfo* n = new MachineInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MachineInfo)
  cluster_list_.Clear();
  container_list_.Clear();
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capacity_ != NULL) {
    delete capacity_;
  }
  capacity_ = NULL;
  if (GetArenaNoVirtual() == NULL && free_ != NULL) {
    delete free_;
  }
  free_ = NULL;
  ::memset(&machine_status_, 0, reinterpret_cast<char*>(&idc_operation_id_) -
    reinterpret_cast<char*>(&machine_status_) + sizeof(idc_operation_id_));
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MachineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string machine_ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MachineInfo.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.StatusType machine_status = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_status(static_cast< ::masterproto::StatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_num = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cluster_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cluster_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_list(this->cluster_list_size() - 1).data(),
            this->cluster_list(this->cluster_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MachineInfo.cluster_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc capacity = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc free = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ContainerInfo container_list = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_container_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 memory_URV = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_urv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_URV = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_urv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 idc_parent_id = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idc_parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 idc_id = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rack_id = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rack_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 idc_operation_id = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idc_operation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_version = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_version().data(), this->worker_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MachineInfo.worker_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MachineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MachineInfo)
  return false;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MachineInfo)
  // string machine_ip = 1;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_ip(), output);
  }

  // .masterproto.StatusType machine_status = 2;
  if (this->machine_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->machine_status(), output);
  }

  // int32 container_num = 3;
  if (this->container_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->container_num(), output);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->machine_type(), output);
  }

  // repeated string cluster_list = 5;
  for (int i = 0; i < this->cluster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_list(i).data(), this->cluster_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.cluster_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cluster_list(i), output);
  }

  // .cmongoproto.ResourceDesc capacity = 6;
  if (this->has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->capacity_, output);
  }

  // .cmongoproto.ResourceDesc free = 7;
  if (this->has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->free_, output);
  }

  // repeated .masterproto.ContainerInfo container_list = 8;
  for (unsigned int i = 0, n = this->container_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->container_list(i), output);
  }

  // int32 memory_URV = 9;
  if (this->memory_urv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->memory_urv(), output);
  }

  // int32 num_URV = 10;
  if (this->num_urv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_urv(), output);
  }

  // int32 idc_parent_id = 11;
  if (this->idc_parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->idc_parent_id(), output);
  }

  // int32 idc_id = 12;
  if (this->idc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->idc_id(), output);
  }

  // int32 rack_id = 13;
  if (this->rack_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rack_id(), output);
  }

  // int32 idc_operation_id = 14;
  if (this->idc_operation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->idc_operation_id(), output);
  }

  // string worker_version = 15;
  if (this->worker_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_version().data(), this->worker_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.worker_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->worker_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MachineInfo)
}

::google::protobuf::uint8* MachineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MachineInfo)
  // string machine_ip = 1;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_ip(), target);
  }

  // .masterproto.StatusType machine_status = 2;
  if (this->machine_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->machine_status(), target);
  }

  // int32 container_num = 3;
  if (this->container_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->container_num(), target);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->machine_type(), target);
  }

  // repeated string cluster_list = 5;
  for (int i = 0; i < this->cluster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_list(i).data(), this->cluster_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.cluster_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->cluster_list(i), target);
  }

  // .cmongoproto.ResourceDesc capacity = 6;
  if (this->has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->capacity_, false, target);
  }

  // .cmongoproto.ResourceDesc free = 7;
  if (this->has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->free_, false, target);
  }

  // repeated .masterproto.ContainerInfo container_list = 8;
  for (unsigned int i = 0, n = this->container_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->container_list(i), false, target);
  }

  // int32 memory_URV = 9;
  if (this->memory_urv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->memory_urv(), target);
  }

  // int32 num_URV = 10;
  if (this->num_urv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_urv(), target);
  }

  // int32 idc_parent_id = 11;
  if (this->idc_parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->idc_parent_id(), target);
  }

  // int32 idc_id = 12;
  if (this->idc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->idc_id(), target);
  }

  // int32 rack_id = 13;
  if (this->rack_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rack_id(), target);
  }

  // int32 idc_operation_id = 14;
  if (this->idc_operation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->idc_operation_id(), target);
  }

  // string worker_version = 15;
  if (this->worker_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_version().data(), this->worker_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MachineInfo.worker_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->worker_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MachineInfo)
  return target;
}

size_t MachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MachineInfo)
  size_t total_size = 0;

  // repeated string cluster_list = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cluster_list_size());
  for (int i = 0; i < this->cluster_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cluster_list(i));
  }

  // repeated .masterproto.ContainerInfo container_list = 8;
  {
    unsigned int count = this->container_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_list(i));
    }
  }

  // string machine_ip = 1;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // string worker_version = 15;
  if (this->worker_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_version());
  }

  // .cmongoproto.ResourceDesc capacity = 6;
  if (this->has_capacity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capacity_);
  }

  // .cmongoproto.ResourceDesc free = 7;
  if (this->has_free()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->free_);
  }

  // .masterproto.StatusType machine_status = 2;
  if (this->machine_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_status());
  }

  // int32 container_num = 3;
  if (this->container_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_num());
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 memory_URV = 9;
  if (this->memory_urv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memory_urv());
  }

  // int32 num_URV = 10;
  if (this->num_urv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_urv());
  }

  // int32 idc_parent_id = 11;
  if (this->idc_parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idc_parent_id());
  }

  // int32 idc_id = 12;
  if (this->idc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idc_id());
  }

  // int32 rack_id = 13;
  if (this->rack_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack_id());
  }

  // int32 idc_operation_id = 14;
  if (this->idc_operation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idc_operation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MachineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MachineInfo)
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_list_.MergeFrom(from.cluster_list_);
  container_list_.MergeFrom(from.container_list_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.worker_version().size() > 0) {

    worker_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_version_);
  }
  if (from.has_capacity()) {
    mutable_capacity()->::cmongoproto::ResourceDesc::MergeFrom(from.capacity());
  }
  if (from.has_free()) {
    mutable_free()->::cmongoproto::ResourceDesc::MergeFrom(from.free());
  }
  if (from.machine_status() != 0) {
    set_machine_status(from.machine_status());
  }
  if (from.container_num() != 0) {
    set_container_num(from.container_num());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.memory_urv() != 0) {
    set_memory_urv(from.memory_urv());
  }
  if (from.num_urv() != 0) {
    set_num_urv(from.num_urv());
  }
  if (from.idc_parent_id() != 0) {
    set_idc_parent_id(from.idc_parent_id());
  }
  if (from.idc_id() != 0) {
    set_idc_id(from.idc_id());
  }
  if (from.rack_id() != 0) {
    set_rack_id(from.rack_id());
  }
  if (from.idc_operation_id() != 0) {
    set_idc_operation_id(from.idc_operation_id());
  }
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {
  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineInfo::InternalSwap(MachineInfo* other) {
  cluster_list_.UnsafeArenaSwap(&other->cluster_list_);
  container_list_.UnsafeArenaSwap(&other->container_list_);
  machine_ip_.Swap(&other->machine_ip_);
  worker_version_.Swap(&other->worker_version_);
  std::swap(capacity_, other->capacity_);
  std::swap(free_, other->free_);
  std::swap(machine_status_, other->machine_status_);
  std::swap(container_num_, other->container_num_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(memory_urv_, other->memory_urv_);
  std::swap(num_urv_, other->num_urv_);
  std::swap(idc_parent_id_, other->idc_parent_id_);
  std::swap(idc_id_, other->idc_id_);
  std::swap(rack_id_, other->rack_id_);
  std::swap(idc_operation_id_, other->idc_operation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MachineInfo

// string machine_ip = 1;
void MachineInfo::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MachineInfo::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.machine_ip)
  return machine_ip_.GetNoArena();
}
void MachineInfo::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.machine_ip)
}
#if LANG_CXX11
void MachineInfo::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MachineInfo.machine_ip)
}
#endif
void MachineInfo::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MachineInfo.machine_ip)
}
void MachineInfo::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MachineInfo.machine_ip)
}
::std::string* MachineInfo::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MachineInfo::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.MachineInfo.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MachineInfo::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MachineInfo.machine_ip)
}

// .masterproto.StatusType machine_status = 2;
void MachineInfo::clear_machine_status() {
  machine_status_ = 0;
}
::masterproto::StatusType MachineInfo::machine_status() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.machine_status)
  return static_cast< ::masterproto::StatusType >(machine_status_);
}
void MachineInfo::set_machine_status(::masterproto::StatusType value) {
  
  machine_status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.machine_status)
}

// int32 container_num = 3;
void MachineInfo::clear_container_num() {
  container_num_ = 0;
}
::google::protobuf::int32 MachineInfo::container_num() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.container_num)
  return container_num_;
}
void MachineInfo::set_container_num(::google::protobuf::int32 value) {
  
  container_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.container_num)
}

// .masterproto.MachineType machine_type = 4;
void MachineInfo::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType MachineInfo::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void MachineInfo::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.machine_type)
}

// repeated string cluster_list = 5;
int MachineInfo::cluster_list_size() const {
  return cluster_list_.size();
}
void MachineInfo::clear_cluster_list() {
  cluster_list_.Clear();
}
const ::std::string& MachineInfo::cluster_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.cluster_list)
  return cluster_list_.Get(index);
}
::std::string* MachineInfo::mutable_cluster_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.cluster_list)
  return cluster_list_.Mutable(index);
}
void MachineInfo::set_cluster_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.cluster_list)
  cluster_list_.Mutable(index)->assign(value);
}
void MachineInfo::set_cluster_list(int index, const char* value) {
  cluster_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.MachineInfo.cluster_list)
}
void MachineInfo::set_cluster_list(int index, const char* value, size_t size) {
  cluster_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.MachineInfo.cluster_list)
}
::std::string* MachineInfo::add_cluster_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.MachineInfo.cluster_list)
  return cluster_list_.Add();
}
void MachineInfo::add_cluster_list(const ::std::string& value) {
  cluster_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.MachineInfo.cluster_list)
}
void MachineInfo::add_cluster_list(const char* value) {
  cluster_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.MachineInfo.cluster_list)
}
void MachineInfo::add_cluster_list(const char* value, size_t size) {
  cluster_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.MachineInfo.cluster_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MachineInfo::cluster_list() const {
  // @@protoc_insertion_point(field_list:masterproto.MachineInfo.cluster_list)
  return cluster_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MachineInfo::mutable_cluster_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MachineInfo.cluster_list)
  return &cluster_list_;
}

// .cmongoproto.ResourceDesc capacity = 6;
bool MachineInfo::has_capacity() const {
  return this != internal_default_instance() && capacity_ != NULL;
}
void MachineInfo::clear_capacity() {
  if (GetArenaNoVirtual() == NULL && capacity_ != NULL) delete capacity_;
  capacity_ = NULL;
}
const ::cmongoproto::ResourceDesc& MachineInfo::capacity() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.capacity)
  return capacity_ != NULL ? *capacity_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* MachineInfo::mutable_capacity() {
  
  if (capacity_ == NULL) {
    capacity_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.capacity)
  return capacity_;
}
::cmongoproto::ResourceDesc* MachineInfo::release_capacity() {
  // @@protoc_insertion_point(field_release:masterproto.MachineInfo.capacity)
  
  ::cmongoproto::ResourceDesc* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
void MachineInfo::set_allocated_capacity(::cmongoproto::ResourceDesc* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MachineInfo.capacity)
}

// .cmongoproto.ResourceDesc free = 7;
bool MachineInfo::has_free() const {
  return this != internal_default_instance() && free_ != NULL;
}
void MachineInfo::clear_free() {
  if (GetArenaNoVirtual() == NULL && free_ != NULL) delete free_;
  free_ = NULL;
}
const ::cmongoproto::ResourceDesc& MachineInfo::free() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.free)
  return free_ != NULL ? *free_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* MachineInfo::mutable_free() {
  
  if (free_ == NULL) {
    free_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.free)
  return free_;
}
::cmongoproto::ResourceDesc* MachineInfo::release_free() {
  // @@protoc_insertion_point(field_release:masterproto.MachineInfo.free)
  
  ::cmongoproto::ResourceDesc* temp = free_;
  free_ = NULL;
  return temp;
}
void MachineInfo::set_allocated_free(::cmongoproto::ResourceDesc* free) {
  delete free_;
  free_ = free;
  if (free) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MachineInfo.free)
}

// repeated .masterproto.ContainerInfo container_list = 8;
int MachineInfo::container_list_size() const {
  return container_list_.size();
}
void MachineInfo::clear_container_list() {
  container_list_.Clear();
}
const ::masterproto::ContainerInfo& MachineInfo::container_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.container_list)
  return container_list_.Get(index);
}
::masterproto::ContainerInfo* MachineInfo::mutable_container_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.container_list)
  return container_list_.Mutable(index);
}
::masterproto::ContainerInfo* MachineInfo::add_container_list() {
  // @@protoc_insertion_point(field_add:masterproto.MachineInfo.container_list)
  return container_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
MachineInfo::mutable_container_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MachineInfo.container_list)
  return &container_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
MachineInfo::container_list() const {
  // @@protoc_insertion_point(field_list:masterproto.MachineInfo.container_list)
  return container_list_;
}

// int32 memory_URV = 9;
void MachineInfo::clear_memory_urv() {
  memory_urv_ = 0;
}
::google::protobuf::int32 MachineInfo::memory_urv() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.memory_URV)
  return memory_urv_;
}
void MachineInfo::set_memory_urv(::google::protobuf::int32 value) {
  
  memory_urv_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.memory_URV)
}

// int32 num_URV = 10;
void MachineInfo::clear_num_urv() {
  num_urv_ = 0;
}
::google::protobuf::int32 MachineInfo::num_urv() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.num_URV)
  return num_urv_;
}
void MachineInfo::set_num_urv(::google::protobuf::int32 value) {
  
  num_urv_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.num_URV)
}

// int32 idc_parent_id = 11;
void MachineInfo::clear_idc_parent_id() {
  idc_parent_id_ = 0;
}
::google::protobuf::int32 MachineInfo::idc_parent_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.idc_parent_id)
  return idc_parent_id_;
}
void MachineInfo::set_idc_parent_id(::google::protobuf::int32 value) {
  
  idc_parent_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.idc_parent_id)
}

// int32 idc_id = 12;
void MachineInfo::clear_idc_id() {
  idc_id_ = 0;
}
::google::protobuf::int32 MachineInfo::idc_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.idc_id)
  return idc_id_;
}
void MachineInfo::set_idc_id(::google::protobuf::int32 value) {
  
  idc_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.idc_id)
}

// int32 rack_id = 13;
void MachineInfo::clear_rack_id() {
  rack_id_ = 0;
}
::google::protobuf::int32 MachineInfo::rack_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.rack_id)
  return rack_id_;
}
void MachineInfo::set_rack_id(::google::protobuf::int32 value) {
  
  rack_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.rack_id)
}

// int32 idc_operation_id = 14;
void MachineInfo::clear_idc_operation_id() {
  idc_operation_id_ = 0;
}
::google::protobuf::int32 MachineInfo::idc_operation_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.idc_operation_id)
  return idc_operation_id_;
}
void MachineInfo::set_idc_operation_id(::google::protobuf::int32 value) {
  
  idc_operation_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.idc_operation_id)
}

// string worker_version = 15;
void MachineInfo::clear_worker_version() {
  worker_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MachineInfo::worker_version() const {
  // @@protoc_insertion_point(field_get:masterproto.MachineInfo.worker_version)
  return worker_version_.GetNoArena();
}
void MachineInfo::set_worker_version(const ::std::string& value) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MachineInfo.worker_version)
}
#if LANG_CXX11
void MachineInfo::set_worker_version(::std::string&& value) {
  
  worker_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MachineInfo.worker_version)
}
#endif
void MachineInfo::set_worker_version(const char* value) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MachineInfo.worker_version)
}
void MachineInfo::set_worker_version(const char* value, size_t size) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MachineInfo.worker_version)
}
::std::string* MachineInfo::mutable_worker_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MachineInfo.worker_version)
  return worker_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MachineInfo::release_worker_version() {
  // @@protoc_insertion_point(field_release:masterproto.MachineInfo.worker_version)
  
  return worker_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MachineInfo::set_allocated_worker_version(::std::string* worker_version) {
  if (worker_version != NULL) {
    
  } else {
    
  }
  worker_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MachineInfo.worker_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterBaseInfo::kClusterIdFieldNumber;
const int ClusterBaseInfo::kAppIdFieldNumber;
const int ClusterBaseInfo::kClusterTypeFieldNumber;
const int ClusterBaseInfo::kStorageInfoFieldNumber;
const int ClusterBaseInfo::kReplicateSetNumFieldNumber;
const int ClusterBaseInfo::kSecondaryNumFieldNumber;
const int ClusterBaseInfo::kMongoVersionFieldNumber;
const int ClusterBaseInfo::kQuotaFieldNumber;
const int ClusterBaseInfo::kStatusFieldNumber;
const int ClusterBaseInfo::kLogicClusterIdFieldNumber;
const int ClusterBaseInfo::kMachineTypeFieldNumber;
const int ClusterBaseInfo::kClusterVersionFieldNumber;
const int ClusterBaseInfo::kProxyVersionFieldNumber;
const int ClusterBaseInfo::kMongodSubversionFieldNumber;
const int ClusterBaseInfo::kDynamoProxyVersionFieldNumber;
const int ClusterBaseInfo::kMaxClientConnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterBaseInfo::ClusterBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ClusterBaseInfo)
}
ClusterBaseInfo::ClusterBaseInfo(const ClusterBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  storage_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.storage_info().size() > 0) {
    storage_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_info_);
  }
  logic_cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logic_cluster_id().size() > 0) {
    logic_cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logic_cluster_id_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(max_client_conns_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ClusterBaseInfo)
}

void ClusterBaseInfo::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logic_cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quota_, 0, reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&quota_) + sizeof(max_client_conns_));
  _cached_size_ = 0;
}

ClusterBaseInfo::~ClusterBaseInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ClusterBaseInfo)
  SharedDtor();
}

void ClusterBaseInfo::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logic_cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void ClusterBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterBaseInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[2].descriptor;
}

const ClusterBaseInfo& ClusterBaseInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterBaseInfo* ClusterBaseInfo::New(::google::protobuf::Arena* arena) const {
  ClusterBaseInfo* n = new ClusterBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ClusterBaseInfo)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logic_cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(max_client_conns_));
}

bool ClusterBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ClusterBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterType cluster_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cluster_type(static_cast< ::masterproto::ClusterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string storage_info = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->storage_info().data(), this->storage_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.storage_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replicate_set_num = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicate_set_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 secondary_num = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondary_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoVersion mongo_version = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mongo_version(static_cast< ::cmongoproto::MongoVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterStatus status = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::masterproto::ClusterStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logic_cluster_id = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logic_cluster_id().data(), this->logic_cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.logic_cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 11;
      case 11: {
        if (tag == 88u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cluster_version = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterBaseInfo.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_client_conns = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_client_conns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ClusterBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ClusterBaseInfo)
  return false;
#undef DO_
}

void ClusterBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ClusterBaseInfo)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // .masterproto.ClusterType cluster_type = 3;
  if (this->cluster_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cluster_type(), output);
  }

  // string storage_info = 4;
  if (this->storage_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storage_info().data(), this->storage_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.storage_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->storage_info(), output);
  }

  // int32 replicate_set_num = 5;
  if (this->replicate_set_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replicate_set_num(), output);
  }

  // int32 secondary_num = 6;
  if (this->secondary_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->secondary_num(), output);
  }

  // .cmongoproto.MongoVersion mongo_version = 7;
  if (this->mongo_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mongo_version(), output);
  }

  // .cmongoproto.ResourceDesc quota = 8;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->quota_, output);
  }

  // .masterproto.ClusterStatus status = 9;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->status(), output);
  }

  // string logic_cluster_id = 10;
  if (this->logic_cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logic_cluster_id().data(), this->logic_cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.logic_cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->logic_cluster_id(), output);
  }

  // .masterproto.MachineType machine_type = 11;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->machine_type(), output);
  }

  // int32 cluster_version = 12;
  if (this->cluster_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cluster_version(), output);
  }

  // string proxy_version = 13;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->proxy_version(), output);
  }

  // string mongod_subversion = 14;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 15;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->dynamo_proxy_version(), output);
  }

  // int32 max_client_conns = 16;
  if (this->max_client_conns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_client_conns(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ClusterBaseInfo)
}

::google::protobuf::uint8* ClusterBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ClusterBaseInfo)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // .masterproto.ClusterType cluster_type = 3;
  if (this->cluster_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cluster_type(), target);
  }

  // string storage_info = 4;
  if (this->storage_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storage_info().data(), this->storage_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.storage_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->storage_info(), target);
  }

  // int32 replicate_set_num = 5;
  if (this->replicate_set_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replicate_set_num(), target);
  }

  // int32 secondary_num = 6;
  if (this->secondary_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->secondary_num(), target);
  }

  // .cmongoproto.MongoVersion mongo_version = 7;
  if (this->mongo_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mongo_version(), target);
  }

  // .cmongoproto.ResourceDesc quota = 8;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->quota_, false, target);
  }

  // .masterproto.ClusterStatus status = 9;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->status(), target);
  }

  // string logic_cluster_id = 10;
  if (this->logic_cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logic_cluster_id().data(), this->logic_cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.logic_cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->logic_cluster_id(), target);
  }

  // .masterproto.MachineType machine_type = 11;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->machine_type(), target);
  }

  // int32 cluster_version = 12;
  if (this->cluster_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cluster_version(), target);
  }

  // string proxy_version = 13;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->proxy_version(), target);
  }

  // string mongod_subversion = 14;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 15;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterBaseInfo.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->dynamo_proxy_version(), target);
  }

  // int32 max_client_conns = 16;
  if (this->max_client_conns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_client_conns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ClusterBaseInfo)
  return target;
}

size_t ClusterBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ClusterBaseInfo)
  size_t total_size = 0;

  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string storage_info = 4;
  if (this->storage_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->storage_info());
  }

  // string logic_cluster_id = 10;
  if (this->logic_cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logic_cluster_id());
  }

  // string proxy_version = 13;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 14;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 15;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ResourceDesc quota = 8;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // .masterproto.ClusterType cluster_type = 3;
  if (this->cluster_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cluster_type());
  }

  // int32 replicate_set_num = 5;
  if (this->replicate_set_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicate_set_num());
  }

  // int32 secondary_num = 6;
  if (this->secondary_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->secondary_num());
  }

  // .cmongoproto.MongoVersion mongo_version = 7;
  if (this->mongo_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mongo_version());
  }

  // .masterproto.ClusterStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .masterproto.MachineType machine_type = 11;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 cluster_version = 12;
  if (this->cluster_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cluster_version());
  }

  // int32 max_client_conns = 16;
  if (this->max_client_conns() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_client_conns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ClusterBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ClusterBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ClusterBaseInfo)
    MergeFrom(*source);
  }
}

void ClusterBaseInfo::MergeFrom(const ClusterBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ClusterBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.storage_info().size() > 0) {

    storage_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_info_);
  }
  if (from.logic_cluster_id().size() > 0) {

    logic_cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logic_cluster_id_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.cluster_type() != 0) {
    set_cluster_type(from.cluster_type());
  }
  if (from.replicate_set_num() != 0) {
    set_replicate_set_num(from.replicate_set_num());
  }
  if (from.secondary_num() != 0) {
    set_secondary_num(from.secondary_num());
  }
  if (from.mongo_version() != 0) {
    set_mongo_version(from.mongo_version());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.cluster_version() != 0) {
    set_cluster_version(from.cluster_version());
  }
  if (from.max_client_conns() != 0) {
    set_max_client_conns(from.max_client_conns());
  }
}

void ClusterBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ClusterBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterBaseInfo::CopyFrom(const ClusterBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ClusterBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterBaseInfo::IsInitialized() const {
  return true;
}

void ClusterBaseInfo::Swap(ClusterBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterBaseInfo::InternalSwap(ClusterBaseInfo* other) {
  cluster_id_.Swap(&other->cluster_id_);
  storage_info_.Swap(&other->storage_info_);
  logic_cluster_id_.Swap(&other->logic_cluster_id_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(quota_, other->quota_);
  std::swap(app_id_, other->app_id_);
  std::swap(cluster_type_, other->cluster_type_);
  std::swap(replicate_set_num_, other->replicate_set_num_);
  std::swap(secondary_num_, other->secondary_num_);
  std::swap(mongo_version_, other->mongo_version_);
  std::swap(status_, other->status_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(cluster_version_, other->cluster_version_);
  std::swap(max_client_conns_, other->max_client_conns_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterBaseInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterBaseInfo

// string cluster_id = 1;
void ClusterBaseInfo::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.cluster_id)
  return cluster_id_.GetNoArena();
}
void ClusterBaseInfo::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.cluster_id)
}
#if LANG_CXX11
void ClusterBaseInfo::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.cluster_id)
}
#endif
void ClusterBaseInfo::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.cluster_id)
}
void ClusterBaseInfo::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.cluster_id)
}
::std::string* ClusterBaseInfo::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.cluster_id)
}

// int64 app_id = 2;
void ClusterBaseInfo::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ClusterBaseInfo::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.app_id)
  return app_id_;
}
void ClusterBaseInfo::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.app_id)
}

// .masterproto.ClusterType cluster_type = 3;
void ClusterBaseInfo::clear_cluster_type() {
  cluster_type_ = 0;
}
::masterproto::ClusterType ClusterBaseInfo::cluster_type() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.cluster_type)
  return static_cast< ::masterproto::ClusterType >(cluster_type_);
}
void ClusterBaseInfo::set_cluster_type(::masterproto::ClusterType value) {
  
  cluster_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.cluster_type)
}

// string storage_info = 4;
void ClusterBaseInfo::clear_storage_info() {
  storage_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::storage_info() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.storage_info)
  return storage_info_.GetNoArena();
}
void ClusterBaseInfo::set_storage_info(const ::std::string& value) {
  
  storage_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.storage_info)
}
#if LANG_CXX11
void ClusterBaseInfo::set_storage_info(::std::string&& value) {
  
  storage_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.storage_info)
}
#endif
void ClusterBaseInfo::set_storage_info(const char* value) {
  
  storage_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.storage_info)
}
void ClusterBaseInfo::set_storage_info(const char* value, size_t size) {
  
  storage_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.storage_info)
}
::std::string* ClusterBaseInfo::mutable_storage_info() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.storage_info)
  return storage_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_storage_info() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.storage_info)
  
  return storage_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_storage_info(::std::string* storage_info) {
  if (storage_info != NULL) {
    
  } else {
    
  }
  storage_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_info);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.storage_info)
}

// int32 replicate_set_num = 5;
void ClusterBaseInfo::clear_replicate_set_num() {
  replicate_set_num_ = 0;
}
::google::protobuf::int32 ClusterBaseInfo::replicate_set_num() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.replicate_set_num)
  return replicate_set_num_;
}
void ClusterBaseInfo::set_replicate_set_num(::google::protobuf::int32 value) {
  
  replicate_set_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.replicate_set_num)
}

// int32 secondary_num = 6;
void ClusterBaseInfo::clear_secondary_num() {
  secondary_num_ = 0;
}
::google::protobuf::int32 ClusterBaseInfo::secondary_num() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.secondary_num)
  return secondary_num_;
}
void ClusterBaseInfo::set_secondary_num(::google::protobuf::int32 value) {
  
  secondary_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.secondary_num)
}

// .cmongoproto.MongoVersion mongo_version = 7;
void ClusterBaseInfo::clear_mongo_version() {
  mongo_version_ = 0;
}
::cmongoproto::MongoVersion ClusterBaseInfo::mongo_version() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.mongo_version)
  return static_cast< ::cmongoproto::MongoVersion >(mongo_version_);
}
void ClusterBaseInfo::set_mongo_version(::cmongoproto::MongoVersion value) {
  
  mongo_version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.mongo_version)
}

// .cmongoproto.ResourceDesc quota = 8;
bool ClusterBaseInfo::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void ClusterBaseInfo::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& ClusterBaseInfo::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* ClusterBaseInfo::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* ClusterBaseInfo::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void ClusterBaseInfo::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.quota)
}

// .masterproto.ClusterStatus status = 9;
void ClusterBaseInfo::clear_status() {
  status_ = 0;
}
::masterproto::ClusterStatus ClusterBaseInfo::status() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.status)
  return static_cast< ::masterproto::ClusterStatus >(status_);
}
void ClusterBaseInfo::set_status(::masterproto::ClusterStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.status)
}

// string logic_cluster_id = 10;
void ClusterBaseInfo::clear_logic_cluster_id() {
  logic_cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::logic_cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.logic_cluster_id)
  return logic_cluster_id_.GetNoArena();
}
void ClusterBaseInfo::set_logic_cluster_id(const ::std::string& value) {
  
  logic_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.logic_cluster_id)
}
#if LANG_CXX11
void ClusterBaseInfo::set_logic_cluster_id(::std::string&& value) {
  
  logic_cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.logic_cluster_id)
}
#endif
void ClusterBaseInfo::set_logic_cluster_id(const char* value) {
  
  logic_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.logic_cluster_id)
}
void ClusterBaseInfo::set_logic_cluster_id(const char* value, size_t size) {
  
  logic_cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.logic_cluster_id)
}
::std::string* ClusterBaseInfo::mutable_logic_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.logic_cluster_id)
  return logic_cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_logic_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.logic_cluster_id)
  
  return logic_cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_logic_cluster_id(::std::string* logic_cluster_id) {
  if (logic_cluster_id != NULL) {
    
  } else {
    
  }
  logic_cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logic_cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.logic_cluster_id)
}

// .masterproto.MachineType machine_type = 11;
void ClusterBaseInfo::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType ClusterBaseInfo::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void ClusterBaseInfo::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.machine_type)
}

// int32 cluster_version = 12;
void ClusterBaseInfo::clear_cluster_version() {
  cluster_version_ = 0;
}
::google::protobuf::int32 ClusterBaseInfo::cluster_version() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.cluster_version)
  return cluster_version_;
}
void ClusterBaseInfo::set_cluster_version(::google::protobuf::int32 value) {
  
  cluster_version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.cluster_version)
}

// string proxy_version = 13;
void ClusterBaseInfo::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.proxy_version)
  return proxy_version_.GetNoArena();
}
void ClusterBaseInfo::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.proxy_version)
}
#if LANG_CXX11
void ClusterBaseInfo::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.proxy_version)
}
#endif
void ClusterBaseInfo::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.proxy_version)
}
void ClusterBaseInfo::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.proxy_version)
}
::std::string* ClusterBaseInfo::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.proxy_version)
}

// string mongod_subversion = 14;
void ClusterBaseInfo::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void ClusterBaseInfo::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.mongod_subversion)
}
#if LANG_CXX11
void ClusterBaseInfo::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.mongod_subversion)
}
#endif
void ClusterBaseInfo::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.mongod_subversion)
}
void ClusterBaseInfo::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.mongod_subversion)
}
::std::string* ClusterBaseInfo::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.mongod_subversion)
}

// string dynamo_proxy_version = 15;
void ClusterBaseInfo::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterBaseInfo::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void ClusterBaseInfo::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.dynamo_proxy_version)
}
#if LANG_CXX11
void ClusterBaseInfo::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterBaseInfo.dynamo_proxy_version)
}
#endif
void ClusterBaseInfo::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterBaseInfo.dynamo_proxy_version)
}
void ClusterBaseInfo::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterBaseInfo.dynamo_proxy_version)
}
::std::string* ClusterBaseInfo::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterBaseInfo.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterBaseInfo::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterBaseInfo.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterBaseInfo::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterBaseInfo.dynamo_proxy_version)
}

// int32 max_client_conns = 16;
void ClusterBaseInfo::clear_max_client_conns() {
  max_client_conns_ = 0;
}
::google::protobuf::int32 ClusterBaseInfo::max_client_conns() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterBaseInfo.max_client_conns)
  return max_client_conns_;
}
void ClusterBaseInfo::set_max_client_conns(::google::protobuf::int32 value) {
  
  max_client_conns_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ClusterBaseInfo.max_client_conns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterExtraInfo::kCustomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterExtraInfo::ClusterExtraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ClusterExtraInfo)
}
ClusterExtraInfo::ClusterExtraInfo(const ClusterExtraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_data().size() > 0) {
    custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ClusterExtraInfo)
}

void ClusterExtraInfo::SharedCtor() {
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClusterExtraInfo::~ClusterExtraInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ClusterExtraInfo)
  SharedDtor();
}

void ClusterExtraInfo::SharedDtor() {
  custom_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterExtraInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[3].descriptor;
}

const ClusterExtraInfo& ClusterExtraInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterExtraInfo* ClusterExtraInfo::New(::google::protobuf::Arena* arena) const {
  ClusterExtraInfo* n = new ClusterExtraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ClusterExtraInfo)
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClusterExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ClusterExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string custom_data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_data().data(), this->custom_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ClusterExtraInfo.custom_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ClusterExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ClusterExtraInfo)
  return false;
#undef DO_
}

void ClusterExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ClusterExtraInfo)
  // string custom_data = 1;
  if (this->custom_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_data().data(), this->custom_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterExtraInfo.custom_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->custom_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ClusterExtraInfo)
}

::google::protobuf::uint8* ClusterExtraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ClusterExtraInfo)
  // string custom_data = 1;
  if (this->custom_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_data().data(), this->custom_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ClusterExtraInfo.custom_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custom_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ClusterExtraInfo)
  return target;
}

size_t ClusterExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ClusterExtraInfo)
  size_t total_size = 0;

  // string custom_data = 1;
  if (this->custom_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ClusterExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterExtraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterExtraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ClusterExtraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ClusterExtraInfo)
    MergeFrom(*source);
  }
}

void ClusterExtraInfo::MergeFrom(const ClusterExtraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ClusterExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.custom_data().size() > 0) {

    custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
  }
}

void ClusterExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ClusterExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterExtraInfo::CopyFrom(const ClusterExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ClusterExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterExtraInfo::IsInitialized() const {
  return true;
}

void ClusterExtraInfo::Swap(ClusterExtraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterExtraInfo::InternalSwap(ClusterExtraInfo* other) {
  custom_data_.Swap(&other->custom_data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterExtraInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterExtraInfo

// string custom_data = 1;
void ClusterExtraInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterExtraInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterExtraInfo.custom_data)
  return custom_data_.GetNoArena();
}
void ClusterExtraInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ClusterExtraInfo.custom_data)
}
#if LANG_CXX11
void ClusterExtraInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ClusterExtraInfo.custom_data)
}
#endif
void ClusterExtraInfo::set_custom_data(const char* value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ClusterExtraInfo.custom_data)
}
void ClusterExtraInfo::set_custom_data(const char* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ClusterExtraInfo.custom_data)
}
::std::string* ClusterExtraInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterExtraInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterExtraInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterExtraInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterExtraInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterExtraInfo.custom_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicateSetInfo::kRsNameFieldNumber;
const int ReplicateSetInfo::kMongodListFieldNumber;
const int ReplicateSetInfo::kProxyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicateSetInfo::ReplicateSetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ReplicateSetInfo)
}
ReplicateSetInfo::ReplicateSetInfo(const ReplicateSetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mongod_list_(from.mongod_list_),
      proxy_list_(from.proxy_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rsname().size() > 0) {
    rsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsname_);
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ReplicateSetInfo)
}

void ReplicateSetInfo::SharedCtor() {
  rsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReplicateSetInfo::~ReplicateSetInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ReplicateSetInfo)
  SharedDtor();
}

void ReplicateSetInfo::SharedDtor() {
  rsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplicateSetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateSetInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[4].descriptor;
}

const ReplicateSetInfo& ReplicateSetInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicateSetInfo* ReplicateSetInfo::New(::google::protobuf::Arena* arena) const {
  ReplicateSetInfo* n = new ReplicateSetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicateSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ReplicateSetInfo)
  mongod_list_.Clear();
  proxy_list_.Clear();
  rsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReplicateSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ReplicateSetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rsName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsname().data(), this->rsname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ReplicateSetInfo.rsName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ContainerInfo mongod_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mongod_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo proxy_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_proxy_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ReplicateSetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ReplicateSetInfo)
  return false;
#undef DO_
}

void ReplicateSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ReplicateSetInfo)
  // string rsName = 1;
  if (this->rsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsname().data(), this->rsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ReplicateSetInfo.rsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rsname(), output);
  }

  // repeated .masterproto.ContainerInfo mongod_list = 2;
  for (unsigned int i = 0, n = this->mongod_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mongod_list(i), output);
  }

  // repeated .masterproto.ContainerInfo proxy_list = 3;
  for (unsigned int i = 0, n = this->proxy_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proxy_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ReplicateSetInfo)
}

::google::protobuf::uint8* ReplicateSetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ReplicateSetInfo)
  // string rsName = 1;
  if (this->rsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsname().data(), this->rsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ReplicateSetInfo.rsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rsname(), target);
  }

  // repeated .masterproto.ContainerInfo mongod_list = 2;
  for (unsigned int i = 0, n = this->mongod_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mongod_list(i), false, target);
  }

  // repeated .masterproto.ContainerInfo proxy_list = 3;
  for (unsigned int i = 0, n = this->proxy_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->proxy_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ReplicateSetInfo)
  return target;
}

size_t ReplicateSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ReplicateSetInfo)
  size_t total_size = 0;

  // repeated .masterproto.ContainerInfo mongod_list = 2;
  {
    unsigned int count = this->mongod_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mongod_list(i));
    }
  }

  // repeated .masterproto.ContainerInfo proxy_list = 3;
  {
    unsigned int count = this->proxy_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_list(i));
    }
  }

  // string rsName = 1;
  if (this->rsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ReplicateSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateSetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicateSetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ReplicateSetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ReplicateSetInfo)
    MergeFrom(*source);
  }
}

void ReplicateSetInfo::MergeFrom(const ReplicateSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ReplicateSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mongod_list_.MergeFrom(from.mongod_list_);
  proxy_list_.MergeFrom(from.proxy_list_);
  if (from.rsname().size() > 0) {

    rsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsname_);
  }
}

void ReplicateSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ReplicateSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateSetInfo::CopyFrom(const ReplicateSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ReplicateSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateSetInfo::IsInitialized() const {
  return true;
}

void ReplicateSetInfo::Swap(ReplicateSetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicateSetInfo::InternalSwap(ReplicateSetInfo* other) {
  mongod_list_.UnsafeArenaSwap(&other->mongod_list_);
  proxy_list_.UnsafeArenaSwap(&other->proxy_list_);
  rsname_.Swap(&other->rsname_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicateSetInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicateSetInfo

// string rsName = 1;
void ReplicateSetInfo::clear_rsname() {
  rsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReplicateSetInfo::rsname() const {
  // @@protoc_insertion_point(field_get:masterproto.ReplicateSetInfo.rsName)
  return rsname_.GetNoArena();
}
void ReplicateSetInfo::set_rsname(const ::std::string& value) {
  
  rsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ReplicateSetInfo.rsName)
}
#if LANG_CXX11
void ReplicateSetInfo::set_rsname(::std::string&& value) {
  
  rsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ReplicateSetInfo.rsName)
}
#endif
void ReplicateSetInfo::set_rsname(const char* value) {
  
  rsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ReplicateSetInfo.rsName)
}
void ReplicateSetInfo::set_rsname(const char* value, size_t size) {
  
  rsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ReplicateSetInfo.rsName)
}
::std::string* ReplicateSetInfo::mutable_rsname() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ReplicateSetInfo.rsName)
  return rsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReplicateSetInfo::release_rsname() {
  // @@protoc_insertion_point(field_release:masterproto.ReplicateSetInfo.rsName)
  
  return rsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReplicateSetInfo::set_allocated_rsname(::std::string* rsname) {
  if (rsname != NULL) {
    
  } else {
    
  }
  rsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsname);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ReplicateSetInfo.rsName)
}

// repeated .masterproto.ContainerInfo mongod_list = 2;
int ReplicateSetInfo::mongod_list_size() const {
  return mongod_list_.size();
}
void ReplicateSetInfo::clear_mongod_list() {
  mongod_list_.Clear();
}
const ::masterproto::ContainerInfo& ReplicateSetInfo::mongod_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ReplicateSetInfo.mongod_list)
  return mongod_list_.Get(index);
}
::masterproto::ContainerInfo* ReplicateSetInfo::mutable_mongod_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ReplicateSetInfo.mongod_list)
  return mongod_list_.Mutable(index);
}
::masterproto::ContainerInfo* ReplicateSetInfo::add_mongod_list() {
  // @@protoc_insertion_point(field_add:masterproto.ReplicateSetInfo.mongod_list)
  return mongod_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ReplicateSetInfo::mutable_mongod_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ReplicateSetInfo.mongod_list)
  return &mongod_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ReplicateSetInfo::mongod_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ReplicateSetInfo.mongod_list)
  return mongod_list_;
}

// repeated .masterproto.ContainerInfo proxy_list = 3;
int ReplicateSetInfo::proxy_list_size() const {
  return proxy_list_.size();
}
void ReplicateSetInfo::clear_proxy_list() {
  proxy_list_.Clear();
}
const ::masterproto::ContainerInfo& ReplicateSetInfo::proxy_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ReplicateSetInfo.proxy_list)
  return proxy_list_.Get(index);
}
::masterproto::ContainerInfo* ReplicateSetInfo::mutable_proxy_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ReplicateSetInfo.proxy_list)
  return proxy_list_.Mutable(index);
}
::masterproto::ContainerInfo* ReplicateSetInfo::add_proxy_list() {
  // @@protoc_insertion_point(field_add:masterproto.ReplicateSetInfo.proxy_list)
  return proxy_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ReplicateSetInfo::mutable_proxy_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ReplicateSetInfo.proxy_list)
  return &proxy_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ReplicateSetInfo::proxy_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ReplicateSetInfo.proxy_list)
  return proxy_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfo::kBaseInfoFieldNumber;
const int ClusterInfo::kRsListFieldNumber;
const int ClusterInfo::kMongosListFieldNumber;
const int ClusterInfo::kConfigListFieldNumber;
const int ClusterInfo::kProxyListFieldNumber;
const int ClusterInfo::kDynamoProxyListFieldNumber;
const int ClusterInfo::kExtraInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfo::ClusterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rs_list_(from.rs_list_),
      mongos_list_(from.mongos_list_),
      config_list_(from.config_list_),
      proxy_list_(from.proxy_list_),
      dynamo_proxy_list_(from.dynamo_proxy_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_info()) {
    base_info_ = new ::masterproto::ClusterBaseInfo(*from.base_info_);
  } else {
    base_info_ = NULL;
  }
  if (from.has_extra_info()) {
    extra_info_ = new ::masterproto::ClusterExtraInfo(*from.extra_info_);
  } else {
    extra_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  ::memset(&base_info_, 0, reinterpret_cast<char*>(&extra_info_) -
    reinterpret_cast<char*>(&base_info_) + sizeof(extra_info_));
  _cached_size_ = 0;
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ClusterInfo)
  SharedDtor();
}

void ClusterInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_info_;
  }
  if (this != internal_default_instance()) {
    delete extra_info_;
  }
}

void ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[5].descriptor;
}

const ClusterInfo& ClusterInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterInfo* ClusterInfo::New(::google::protobuf::Arena* arena) const {
  ClusterInfo* n = new ClusterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ClusterInfo)
  rs_list_.Clear();
  mongos_list_.Clear();
  config_list_.Clear();
  proxy_list_.Clear();
  dynamo_proxy_list_.Clear();
  if (GetArenaNoVirtual() == NULL && base_info_ != NULL) {
    delete base_info_;
  }
  base_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) {
    delete extra_info_;
  }
  extra_info_ = NULL;
}

bool ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ClusterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .masterproto.ClusterBaseInfo base_info = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ReplicateSetInfo rs_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rs_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo mongos_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mongos_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo config_list = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo proxy_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_proxy_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo dynamo_proxy_list = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dynamo_proxy_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .masterproto.ClusterExtraInfo extra_info = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ClusterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ClusterInfo)
  return false;
#undef DO_
}

void ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ClusterInfo)
  // .masterproto.ClusterBaseInfo base_info = 1;
  if (this->has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_info_, output);
  }

  // repeated .masterproto.ReplicateSetInfo rs_list = 2;
  for (unsigned int i = 0, n = this->rs_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rs_list(i), output);
  }

  // repeated .masterproto.ContainerInfo mongos_list = 3;
  for (unsigned int i = 0, n = this->mongos_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mongos_list(i), output);
  }

  // repeated .masterproto.ContainerInfo config_list = 4;
  for (unsigned int i = 0, n = this->config_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->config_list(i), output);
  }

  // repeated .masterproto.ContainerInfo proxy_list = 5;
  for (unsigned int i = 0, n = this->proxy_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->proxy_list(i), output);
  }

  // repeated .masterproto.ContainerInfo dynamo_proxy_list = 6;
  for (unsigned int i = 0, n = this->dynamo_proxy_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dynamo_proxy_list(i), output);
  }

  // .masterproto.ClusterExtraInfo extra_info = 7;
  if (this->has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->extra_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ClusterInfo)
}

::google::protobuf::uint8* ClusterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ClusterInfo)
  // .masterproto.ClusterBaseInfo base_info = 1;
  if (this->has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_info_, false, target);
  }

  // repeated .masterproto.ReplicateSetInfo rs_list = 2;
  for (unsigned int i = 0, n = this->rs_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rs_list(i), false, target);
  }

  // repeated .masterproto.ContainerInfo mongos_list = 3;
  for (unsigned int i = 0, n = this->mongos_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mongos_list(i), false, target);
  }

  // repeated .masterproto.ContainerInfo config_list = 4;
  for (unsigned int i = 0, n = this->config_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->config_list(i), false, target);
  }

  // repeated .masterproto.ContainerInfo proxy_list = 5;
  for (unsigned int i = 0, n = this->proxy_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->proxy_list(i), false, target);
  }

  // repeated .masterproto.ContainerInfo dynamo_proxy_list = 6;
  for (unsigned int i = 0, n = this->dynamo_proxy_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->dynamo_proxy_list(i), false, target);
  }

  // .masterproto.ClusterExtraInfo extra_info = 7;
  if (this->has_extra_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->extra_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ClusterInfo)
  size_t total_size = 0;

  // repeated .masterproto.ReplicateSetInfo rs_list = 2;
  {
    unsigned int count = this->rs_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rs_list(i));
    }
  }

  // repeated .masterproto.ContainerInfo mongos_list = 3;
  {
    unsigned int count = this->mongos_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mongos_list(i));
    }
  }

  // repeated .masterproto.ContainerInfo config_list = 4;
  {
    unsigned int count = this->config_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_list(i));
    }
  }

  // repeated .masterproto.ContainerInfo proxy_list = 5;
  {
    unsigned int count = this->proxy_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_list(i));
    }
  }

  // repeated .masterproto.ContainerInfo dynamo_proxy_list = 6;
  {
    unsigned int count = this->dynamo_proxy_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamo_proxy_list(i));
    }
  }

  // .masterproto.ClusterBaseInfo base_info = 1;
  if (this->has_base_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_info_);
  }

  // .masterproto.ClusterExtraInfo extra_info = 7;
  if (this->has_extra_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ClusterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rs_list_.MergeFrom(from.rs_list_);
  mongos_list_.MergeFrom(from.mongos_list_);
  config_list_.MergeFrom(from.config_list_);
  proxy_list_.MergeFrom(from.proxy_list_);
  dynamo_proxy_list_.MergeFrom(from.dynamo_proxy_list_);
  if (from.has_base_info()) {
    mutable_base_info()->::masterproto::ClusterBaseInfo::MergeFrom(from.base_info());
  }
  if (from.has_extra_info()) {
    mutable_extra_info()->::masterproto::ClusterExtraInfo::MergeFrom(from.extra_info());
  }
}

void ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::Swap(ClusterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfo::InternalSwap(ClusterInfo* other) {
  rs_list_.UnsafeArenaSwap(&other->rs_list_);
  mongos_list_.UnsafeArenaSwap(&other->mongos_list_);
  config_list_.UnsafeArenaSwap(&other->config_list_);
  proxy_list_.UnsafeArenaSwap(&other->proxy_list_);
  dynamo_proxy_list_.UnsafeArenaSwap(&other->dynamo_proxy_list_);
  std::swap(base_info_, other->base_info_);
  std::swap(extra_info_, other->extra_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfo

// .masterproto.ClusterBaseInfo base_info = 1;
bool ClusterInfo::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
void ClusterInfo::clear_base_info() {
  if (GetArenaNoVirtual() == NULL && base_info_ != NULL) delete base_info_;
  base_info_ = NULL;
}
const ::masterproto::ClusterBaseInfo& ClusterInfo::base_info() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.base_info)
  return base_info_ != NULL ? *base_info_
                         : *::masterproto::ClusterBaseInfo::internal_default_instance();
}
::masterproto::ClusterBaseInfo* ClusterInfo::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::masterproto::ClusterBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.base_info)
  return base_info_;
}
::masterproto::ClusterBaseInfo* ClusterInfo::release_base_info() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterInfo.base_info)
  
  ::masterproto::ClusterBaseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
void ClusterInfo::set_allocated_base_info(::masterproto::ClusterBaseInfo* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterInfo.base_info)
}

// repeated .masterproto.ReplicateSetInfo rs_list = 2;
int ClusterInfo::rs_list_size() const {
  return rs_list_.size();
}
void ClusterInfo::clear_rs_list() {
  rs_list_.Clear();
}
const ::masterproto::ReplicateSetInfo& ClusterInfo::rs_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.rs_list)
  return rs_list_.Get(index);
}
::masterproto::ReplicateSetInfo* ClusterInfo::mutable_rs_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.rs_list)
  return rs_list_.Mutable(index);
}
::masterproto::ReplicateSetInfo* ClusterInfo::add_rs_list() {
  // @@protoc_insertion_point(field_add:masterproto.ClusterInfo.rs_list)
  return rs_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ReplicateSetInfo >*
ClusterInfo::mutable_rs_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ClusterInfo.rs_list)
  return &rs_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ReplicateSetInfo >&
ClusterInfo::rs_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ClusterInfo.rs_list)
  return rs_list_;
}

// repeated .masterproto.ContainerInfo mongos_list = 3;
int ClusterInfo::mongos_list_size() const {
  return mongos_list_.size();
}
void ClusterInfo::clear_mongos_list() {
  mongos_list_.Clear();
}
const ::masterproto::ContainerInfo& ClusterInfo::mongos_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.mongos_list)
  return mongos_list_.Get(index);
}
::masterproto::ContainerInfo* ClusterInfo::mutable_mongos_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.mongos_list)
  return mongos_list_.Mutable(index);
}
::masterproto::ContainerInfo* ClusterInfo::add_mongos_list() {
  // @@protoc_insertion_point(field_add:masterproto.ClusterInfo.mongos_list)
  return mongos_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ClusterInfo::mutable_mongos_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ClusterInfo.mongos_list)
  return &mongos_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ClusterInfo::mongos_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ClusterInfo.mongos_list)
  return mongos_list_;
}

// repeated .masterproto.ContainerInfo config_list = 4;
int ClusterInfo::config_list_size() const {
  return config_list_.size();
}
void ClusterInfo::clear_config_list() {
  config_list_.Clear();
}
const ::masterproto::ContainerInfo& ClusterInfo::config_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.config_list)
  return config_list_.Get(index);
}
::masterproto::ContainerInfo* ClusterInfo::mutable_config_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.config_list)
  return config_list_.Mutable(index);
}
::masterproto::ContainerInfo* ClusterInfo::add_config_list() {
  // @@protoc_insertion_point(field_add:masterproto.ClusterInfo.config_list)
  return config_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ClusterInfo::mutable_config_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ClusterInfo.config_list)
  return &config_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ClusterInfo::config_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ClusterInfo.config_list)
  return config_list_;
}

// repeated .masterproto.ContainerInfo proxy_list = 5;
int ClusterInfo::proxy_list_size() const {
  return proxy_list_.size();
}
void ClusterInfo::clear_proxy_list() {
  proxy_list_.Clear();
}
const ::masterproto::ContainerInfo& ClusterInfo::proxy_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.proxy_list)
  return proxy_list_.Get(index);
}
::masterproto::ContainerInfo* ClusterInfo::mutable_proxy_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.proxy_list)
  return proxy_list_.Mutable(index);
}
::masterproto::ContainerInfo* ClusterInfo::add_proxy_list() {
  // @@protoc_insertion_point(field_add:masterproto.ClusterInfo.proxy_list)
  return proxy_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ClusterInfo::mutable_proxy_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ClusterInfo.proxy_list)
  return &proxy_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ClusterInfo::proxy_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ClusterInfo.proxy_list)
  return proxy_list_;
}

// repeated .masterproto.ContainerInfo dynamo_proxy_list = 6;
int ClusterInfo::dynamo_proxy_list_size() const {
  return dynamo_proxy_list_.size();
}
void ClusterInfo::clear_dynamo_proxy_list() {
  dynamo_proxy_list_.Clear();
}
const ::masterproto::ContainerInfo& ClusterInfo::dynamo_proxy_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.dynamo_proxy_list)
  return dynamo_proxy_list_.Get(index);
}
::masterproto::ContainerInfo* ClusterInfo::mutable_dynamo_proxy_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.dynamo_proxy_list)
  return dynamo_proxy_list_.Mutable(index);
}
::masterproto::ContainerInfo* ClusterInfo::add_dynamo_proxy_list() {
  // @@protoc_insertion_point(field_add:masterproto.ClusterInfo.dynamo_proxy_list)
  return dynamo_proxy_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ClusterInfo::mutable_dynamo_proxy_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ClusterInfo.dynamo_proxy_list)
  return &dynamo_proxy_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ClusterInfo::dynamo_proxy_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ClusterInfo.dynamo_proxy_list)
  return dynamo_proxy_list_;
}

// .masterproto.ClusterExtraInfo extra_info = 7;
bool ClusterInfo::has_extra_info() const {
  return this != internal_default_instance() && extra_info_ != NULL;
}
void ClusterInfo::clear_extra_info() {
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) delete extra_info_;
  extra_info_ = NULL;
}
const ::masterproto::ClusterExtraInfo& ClusterInfo::extra_info() const {
  // @@protoc_insertion_point(field_get:masterproto.ClusterInfo.extra_info)
  return extra_info_ != NULL ? *extra_info_
                         : *::masterproto::ClusterExtraInfo::internal_default_instance();
}
::masterproto::ClusterExtraInfo* ClusterInfo::mutable_extra_info() {
  
  if (extra_info_ == NULL) {
    extra_info_ = new ::masterproto::ClusterExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ClusterInfo.extra_info)
  return extra_info_;
}
::masterproto::ClusterExtraInfo* ClusterInfo::release_extra_info() {
  // @@protoc_insertion_point(field_release:masterproto.ClusterInfo.extra_info)
  
  ::masterproto::ClusterExtraInfo* temp = extra_info_;
  extra_info_ = NULL;
  return temp;
}
void ClusterInfo::set_allocated_extra_info(::masterproto::ClusterExtraInfo* extra_info) {
  delete extra_info_;
  extra_info_ = extra_info;
  if (extra_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ClusterInfo.extra_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobInfo::kJobIdFieldNumber;
const int JobInfo::kJobTypeFieldNumber;
const int JobInfo::kJobStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobInfo::JobInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.JobInfo)
}
JobInfo::JobInfo(const JobInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&job_status_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_status_));
  // @@protoc_insertion_point(copy_constructor:masterproto.JobInfo)
}

void JobInfo::SharedCtor() {
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&job_status_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_status_));
  _cached_size_ = 0;
}

JobInfo::~JobInfo() {
  // @@protoc_insertion_point(destructor:masterproto.JobInfo)
  SharedDtor();
}

void JobInfo::SharedDtor() {
}

void JobInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[6].descriptor;
}

const JobInfo& JobInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobInfo* JobInfo::New(::google::protobuf::Arena* arena) const {
  JobInfo* n = new JobInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.JobInfo)
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&job_status_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_status_));
}

bool JobInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.JobInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 job_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobStatus job_status = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_status(static_cast< ::masterproto::JobStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.JobInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.JobInfo)
  return false;
#undef DO_
}

void JobInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.JobInfo)
  // int64 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->job_id(), output);
  }

  // .masterproto.JobType job_type = 2;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_type(), output);
  }

  // .masterproto.JobStatus job_status = 3;
  if (this->job_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.JobInfo)
}

::google::protobuf::uint8* JobInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.JobInfo)
  // int64 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->job_id(), target);
  }

  // .masterproto.JobType job_type = 2;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_type(), target);
  }

  // .masterproto.JobStatus job_status = 3;
  if (this->job_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.JobInfo)
  return target;
}

size_t JobInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.JobInfo)
  size_t total_size = 0;

  // int64 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // .masterproto.JobType job_type = 2;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // .masterproto.JobStatus job_status = 3;
  if (this->job_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.JobInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JobInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.JobInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.JobInfo)
    MergeFrom(*source);
  }
}

void JobInfo::MergeFrom(const JobInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.JobInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.job_status() != 0) {
    set_job_status(from.job_status());
  }
}

void JobInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobInfo::CopyFrom(const JobInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.JobInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInfo::IsInitialized() const {
  return true;
}

void JobInfo::Swap(JobInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobInfo::InternalSwap(JobInfo* other) {
  std::swap(job_id_, other->job_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(job_status_, other->job_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobInfo

// int64 job_id = 1;
void JobInfo::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 JobInfo::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.JobInfo.job_id)
  return job_id_;
}
void JobInfo::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.JobInfo.job_id)
}

// .masterproto.JobType job_type = 2;
void JobInfo::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType JobInfo::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.JobInfo.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void JobInfo::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.JobInfo.job_type)
}

// .masterproto.JobStatus job_status = 3;
void JobInfo::clear_job_status() {
  job_status_ = 0;
}
::masterproto::JobStatus JobInfo::job_status() const {
  // @@protoc_insertion_point(field_get:masterproto.JobInfo.job_status)
  return static_cast< ::masterproto::JobStatus >(job_status_);
}
void JobInfo::set_job_status(::masterproto::JobStatus value) {
  
  job_status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.JobInfo.job_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupInfo::kStartTimeFieldNumber;
const int BackupInfo::kEndTimeFieldNumber;
const int BackupInfo::kBackupSizeFieldNumber;
const int BackupInfo::kBackupNumFieldNumber;
const int BackupInfo::kTypeFieldNumber;
const int BackupInfo::kBackupStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupInfo::BackupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BackupInfo)
}
BackupInfo::BackupInfo(const BackupInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  ::memcpy(&backup_size_, &from.backup_size_,
    reinterpret_cast<char*>(&backup_status_) -
    reinterpret_cast<char*>(&backup_size_) + sizeof(backup_status_));
  // @@protoc_insertion_point(copy_constructor:masterproto.BackupInfo)
}

void BackupInfo::SharedCtor() {
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&backup_size_, 0, reinterpret_cast<char*>(&backup_status_) -
    reinterpret_cast<char*>(&backup_size_) + sizeof(backup_status_));
  _cached_size_ = 0;
}

BackupInfo::~BackupInfo() {
  // @@protoc_insertion_point(destructor:masterproto.BackupInfo)
  SharedDtor();
}

void BackupInfo::SharedDtor() {
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[7].descriptor;
}

const BackupInfo& BackupInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupInfo* BackupInfo::New(::google::protobuf::Arena* arena) const {
  BackupInfo* n = new BackupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BackupInfo)
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&backup_size_, 0, reinterpret_cast<char*>(&backup_status_) -
    reinterpret_cast<char*>(&backup_size_) + sizeof(backup_status_));
}

bool BackupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BackupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start_time = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupInfo.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupInfo.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 backup_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &backup_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backup_num = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backup_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool type = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobStatus backup_status = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_backup_status(static_cast< ::masterproto::JobStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BackupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BackupInfo)
  return false;
#undef DO_
}

void BackupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BackupInfo)
  // string start_time = 1;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupInfo.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_time(), output);
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupInfo.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_time(), output);
  }

  // int64 backup_size = 3;
  if (this->backup_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->backup_size(), output);
  }

  // int32 backup_num = 4;
  if (this->backup_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->backup_num(), output);
  }

  // bool type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->type(), output);
  }

  // .masterproto.JobStatus backup_status = 6;
  if (this->backup_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->backup_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BackupInfo)
}

::google::protobuf::uint8* BackupInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BackupInfo)
  // string start_time = 1;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupInfo.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_time(), target);
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupInfo.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_time(), target);
  }

  // int64 backup_size = 3;
  if (this->backup_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->backup_size(), target);
  }

  // int32 backup_num = 4;
  if (this->backup_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->backup_num(), target);
  }

  // bool type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->type(), target);
  }

  // .masterproto.JobStatus backup_status = 6;
  if (this->backup_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->backup_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BackupInfo)
  return target;
}

size_t BackupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BackupInfo)
  size_t total_size = 0;

  // string start_time = 1;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // int64 backup_size = 3;
  if (this->backup_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->backup_size());
  }

  // int32 backup_num = 4;
  if (this->backup_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backup_num());
  }

  // bool type = 5;
  if (this->type() != 0) {
    total_size += 1 + 1;
  }

  // .masterproto.JobStatus backup_status = 6;
  if (this->backup_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->backup_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BackupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BackupInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BackupInfo)
    MergeFrom(*source);
  }
}

void BackupInfo::MergeFrom(const BackupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BackupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.backup_size() != 0) {
    set_backup_size(from.backup_size());
  }
  if (from.backup_num() != 0) {
    set_backup_num(from.backup_num());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.backup_status() != 0) {
    set_backup_status(from.backup_status());
  }
}

void BackupInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BackupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupInfo::CopyFrom(const BackupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BackupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupInfo::IsInitialized() const {
  return true;
}

void BackupInfo::Swap(BackupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupInfo::InternalSwap(BackupInfo* other) {
  start_time_.Swap(&other->start_time_);
  end_time_.Swap(&other->end_time_);
  std::swap(backup_size_, other->backup_size_);
  std::swap(backup_num_, other->backup_num_);
  std::swap(type_, other->type_);
  std::swap(backup_status_, other->backup_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupInfo

// string start_time = 1;
void BackupInfo::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupInfo::start_time() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.start_time)
  return start_time_.GetNoArena();
}
void BackupInfo::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.start_time)
}
#if LANG_CXX11
void BackupInfo::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupInfo.start_time)
}
#endif
void BackupInfo::set_start_time(const char* value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupInfo.start_time)
}
void BackupInfo::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupInfo.start_time)
}
::std::string* BackupInfo::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupInfo.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:masterproto.BackupInfo.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupInfo::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupInfo.start_time)
}

// string end_time = 2;
void BackupInfo::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupInfo::end_time() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.end_time)
  return end_time_.GetNoArena();
}
void BackupInfo::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.end_time)
}
#if LANG_CXX11
void BackupInfo::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupInfo.end_time)
}
#endif
void BackupInfo::set_end_time(const char* value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupInfo.end_time)
}
void BackupInfo::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupInfo.end_time)
}
::std::string* BackupInfo::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupInfo.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:masterproto.BackupInfo.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupInfo::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupInfo.end_time)
}

// int64 backup_size = 3;
void BackupInfo::clear_backup_size() {
  backup_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BackupInfo::backup_size() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.backup_size)
  return backup_size_;
}
void BackupInfo::set_backup_size(::google::protobuf::int64 value) {
  
  backup_size_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.backup_size)
}

// int32 backup_num = 4;
void BackupInfo::clear_backup_num() {
  backup_num_ = 0;
}
::google::protobuf::int32 BackupInfo::backup_num() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.backup_num)
  return backup_num_;
}
void BackupInfo::set_backup_num(::google::protobuf::int32 value) {
  
  backup_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.backup_num)
}

// bool type = 5;
void BackupInfo::clear_type() {
  type_ = false;
}
bool BackupInfo::type() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.type)
  return type_;
}
void BackupInfo::set_type(bool value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.type)
}

// .masterproto.JobStatus backup_status = 6;
void BackupInfo::clear_backup_status() {
  backup_status_ = 0;
}
::masterproto::JobStatus BackupInfo::backup_status() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupInfo.backup_status)
  return static_cast< ::masterproto::JobStatus >(backup_status_);
}
void BackupInfo::set_backup_status(::masterproto::JobStatus value) {
  
  backup_status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupInfo.backup_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProxyChgInfo::kClusterIdFieldNumber;
const int ProxyChgInfo::kOffWorkFieldNumber;
const int ProxyChgInfo::kOnWorkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProxyChgInfo::ProxyChgInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ProxyChgInfo)
}
ProxyChgInfo::ProxyChgInfo(const ProxyChgInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      off_work_(from.off_work_),
      on_work_(from.on_work_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ProxyChgInfo)
}

void ProxyChgInfo::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProxyChgInfo::~ProxyChgInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ProxyChgInfo)
  SharedDtor();
}

void ProxyChgInfo::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProxyChgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyChgInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[8].descriptor;
}

const ProxyChgInfo& ProxyChgInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProxyChgInfo* ProxyChgInfo::New(::google::protobuf::Arena* arena) const {
  ProxyChgInfo* n = new ProxyChgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProxyChgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ProxyChgInfo)
  off_work_.Clear();
  on_work_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProxyChgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ProxyChgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgInfo.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ContainerInfo off_work = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_off_work()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo on_work = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_on_work()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ProxyChgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ProxyChgInfo)
  return false;
#undef DO_
}

void ProxyChgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ProxyChgInfo)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgInfo.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  // repeated .masterproto.ContainerInfo off_work = 2;
  for (unsigned int i = 0, n = this->off_work_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->off_work(i), output);
  }

  // repeated .masterproto.ContainerInfo on_work = 3;
  for (unsigned int i = 0, n = this->on_work_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->on_work(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ProxyChgInfo)
}

::google::protobuf::uint8* ProxyChgInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ProxyChgInfo)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgInfo.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  // repeated .masterproto.ContainerInfo off_work = 2;
  for (unsigned int i = 0, n = this->off_work_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->off_work(i), false, target);
  }

  // repeated .masterproto.ContainerInfo on_work = 3;
  for (unsigned int i = 0, n = this->on_work_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->on_work(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ProxyChgInfo)
  return target;
}

size_t ProxyChgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ProxyChgInfo)
  size_t total_size = 0;

  // repeated .masterproto.ContainerInfo off_work = 2;
  {
    unsigned int count = this->off_work_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->off_work(i));
    }
  }

  // repeated .masterproto.ContainerInfo on_work = 3;
  {
    unsigned int count = this->on_work_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->on_work(i));
    }
  }

  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyChgInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ProxyChgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyChgInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProxyChgInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ProxyChgInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ProxyChgInfo)
    MergeFrom(*source);
  }
}

void ProxyChgInfo::MergeFrom(const ProxyChgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ProxyChgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  off_work_.MergeFrom(from.off_work_);
  on_work_.MergeFrom(from.on_work_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void ProxyChgInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ProxyChgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyChgInfo::CopyFrom(const ProxyChgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ProxyChgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyChgInfo::IsInitialized() const {
  return true;
}

void ProxyChgInfo::Swap(ProxyChgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProxyChgInfo::InternalSwap(ProxyChgInfo* other) {
  off_work_.UnsafeArenaSwap(&other->off_work_);
  on_work_.UnsafeArenaSwap(&other->on_work_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProxyChgInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyChgInfo

// string cluster_id = 1;
void ProxyChgInfo::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgInfo.cluster_id)
  return cluster_id_.GetNoArena();
}
void ProxyChgInfo::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgInfo.cluster_id)
}
#if LANG_CXX11
void ProxyChgInfo::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgInfo.cluster_id)
}
#endif
void ProxyChgInfo::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgInfo.cluster_id)
}
void ProxyChgInfo::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgInfo.cluster_id)
}
::std::string* ProxyChgInfo::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgInfo.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgInfo::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgInfo.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgInfo::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgInfo.cluster_id)
}

// repeated .masterproto.ContainerInfo off_work = 2;
int ProxyChgInfo::off_work_size() const {
  return off_work_.size();
}
void ProxyChgInfo::clear_off_work() {
  off_work_.Clear();
}
const ::masterproto::ContainerInfo& ProxyChgInfo::off_work(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgInfo.off_work)
  return off_work_.Get(index);
}
::masterproto::ContainerInfo* ProxyChgInfo::mutable_off_work(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgInfo.off_work)
  return off_work_.Mutable(index);
}
::masterproto::ContainerInfo* ProxyChgInfo::add_off_work() {
  // @@protoc_insertion_point(field_add:masterproto.ProxyChgInfo.off_work)
  return off_work_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ProxyChgInfo::mutable_off_work() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ProxyChgInfo.off_work)
  return &off_work_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ProxyChgInfo::off_work() const {
  // @@protoc_insertion_point(field_list:masterproto.ProxyChgInfo.off_work)
  return off_work_;
}

// repeated .masterproto.ContainerInfo on_work = 3;
int ProxyChgInfo::on_work_size() const {
  return on_work_.size();
}
void ProxyChgInfo::clear_on_work() {
  on_work_.Clear();
}
const ::masterproto::ContainerInfo& ProxyChgInfo::on_work(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgInfo.on_work)
  return on_work_.Get(index);
}
::masterproto::ContainerInfo* ProxyChgInfo::mutable_on_work(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgInfo.on_work)
  return on_work_.Mutable(index);
}
::masterproto::ContainerInfo* ProxyChgInfo::add_on_work() {
  // @@protoc_insertion_point(field_add:masterproto.ProxyChgInfo.on_work)
  return on_work_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
ProxyChgInfo::mutable_on_work() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ProxyChgInfo.on_work)
  return &on_work_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
ProxyChgInfo::on_work() const {
  // @@protoc_insertion_point(field_list:masterproto.ProxyChgInfo.on_work)
  return on_work_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OplogInfo::kRsNameFieldNumber;
const int OplogInfo::kLogSizeFieldNumber;
const int OplogInfo::kUsedFieldNumber;
const int OplogInfo::kTimeDiffSecsFieldNumber;
const int OplogInfo::kTFirstFieldNumber;
const int OplogInfo::kTLastFieldNumber;
const int OplogInfo::kOplogFirstFieldNumber;
const int OplogInfo::kOplogLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OplogInfo::OplogInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.OplogInfo)
}
OplogInfo::OplogInfo(const OplogInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  ::memcpy(&log_size_, &from.log_size_,
    reinterpret_cast<char*>(&t_last_) -
    reinterpret_cast<char*>(&log_size_) + sizeof(t_last_));
  // @@protoc_insertion_point(copy_constructor:masterproto.OplogInfo)
}

void OplogInfo::SharedCtor() {
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_size_, 0, reinterpret_cast<char*>(&t_last_) -
    reinterpret_cast<char*>(&log_size_) + sizeof(t_last_));
  _cached_size_ = 0;
}

OplogInfo::~OplogInfo() {
  // @@protoc_insertion_point(destructor:masterproto.OplogInfo)
  SharedDtor();
}

void OplogInfo::SharedDtor() {
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OplogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OplogInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[9].descriptor;
}

const OplogInfo& OplogInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

OplogInfo* OplogInfo::New(::google::protobuf::Arena* arena) const {
  OplogInfo* n = new OplogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OplogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.OplogInfo)
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_size_, 0, reinterpret_cast<char*>(&t_last_) -
    reinterpret_cast<char*>(&log_size_) + sizeof(t_last_));
}

bool OplogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.OplogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rs_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.OplogInfo.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_diff_secs = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_diff_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 t_first = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 t_last = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 oplog_first = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oplog_first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 oplog_last = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oplog_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.OplogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.OplogInfo)
  return false;
#undef DO_
}

void OplogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.OplogInfo)
  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.OplogInfo.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rs_name(), output);
  }

  // uint64 log_size = 2;
  if (this->log_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->log_size(), output);
  }

  // uint64 used = 3;
  if (this->used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->used(), output);
  }

  // int32 time_diff_secs = 4;
  if (this->time_diff_secs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_diff_secs(), output);
  }

  // int32 t_first = 5;
  if (this->t_first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->t_first(), output);
  }

  // int32 t_last = 6;
  if (this->t_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->t_last(), output);
  }

  // int64 oplog_first = 7;
  if (this->oplog_first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->oplog_first(), output);
  }

  // int64 oplog_last = 8;
  if (this->oplog_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->oplog_last(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.OplogInfo)
}

::google::protobuf::uint8* OplogInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.OplogInfo)
  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.OplogInfo.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rs_name(), target);
  }

  // uint64 log_size = 2;
  if (this->log_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->log_size(), target);
  }

  // uint64 used = 3;
  if (this->used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->used(), target);
  }

  // int32 time_diff_secs = 4;
  if (this->time_diff_secs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_diff_secs(), target);
  }

  // int32 t_first = 5;
  if (this->t_first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->t_first(), target);
  }

  // int32 t_last = 6;
  if (this->t_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->t_last(), target);
  }

  // int64 oplog_first = 7;
  if (this->oplog_first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->oplog_first(), target);
  }

  // int64 oplog_last = 8;
  if (this->oplog_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->oplog_last(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.OplogInfo)
  return target;
}

size_t OplogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.OplogInfo)
  size_t total_size = 0;

  // string rs_name = 1;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // uint64 log_size = 2;
  if (this->log_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_size());
  }

  // uint64 used = 3;
  if (this->used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used());
  }

  // int32 time_diff_secs = 4;
  if (this->time_diff_secs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_diff_secs());
  }

  // int32 t_first = 5;
  if (this->t_first() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->t_first());
  }

  // int64 oplog_first = 7;
  if (this->oplog_first() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->oplog_first());
  }

  // int64 oplog_last = 8;
  if (this->oplog_last() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->oplog_last());
  }

  // int32 t_last = 6;
  if (this->t_last() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->t_last());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OplogInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.OplogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OplogInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OplogInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.OplogInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.OplogInfo)
    MergeFrom(*source);
  }
}

void OplogInfo::MergeFrom(const OplogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.OplogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.log_size() != 0) {
    set_log_size(from.log_size());
  }
  if (from.used() != 0) {
    set_used(from.used());
  }
  if (from.time_diff_secs() != 0) {
    set_time_diff_secs(from.time_diff_secs());
  }
  if (from.t_first() != 0) {
    set_t_first(from.t_first());
  }
  if (from.oplog_first() != 0) {
    set_oplog_first(from.oplog_first());
  }
  if (from.oplog_last() != 0) {
    set_oplog_last(from.oplog_last());
  }
  if (from.t_last() != 0) {
    set_t_last(from.t_last());
  }
}

void OplogInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.OplogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OplogInfo::CopyFrom(const OplogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.OplogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OplogInfo::IsInitialized() const {
  return true;
}

void OplogInfo::Swap(OplogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OplogInfo::InternalSwap(OplogInfo* other) {
  rs_name_.Swap(&other->rs_name_);
  std::swap(log_size_, other->log_size_);
  std::swap(used_, other->used_);
  std::swap(time_diff_secs_, other->time_diff_secs_);
  std::swap(t_first_, other->t_first_);
  std::swap(oplog_first_, other->oplog_first_);
  std::swap(oplog_last_, other->oplog_last_);
  std::swap(t_last_, other->t_last_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OplogInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OplogInfo

// string rs_name = 1;
void OplogInfo::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OplogInfo::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.rs_name)
  return rs_name_.GetNoArena();
}
void OplogInfo::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.rs_name)
}
#if LANG_CXX11
void OplogInfo::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.OplogInfo.rs_name)
}
#endif
void OplogInfo::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.OplogInfo.rs_name)
}
void OplogInfo::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.OplogInfo.rs_name)
}
::std::string* OplogInfo::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.OplogInfo.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OplogInfo::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.OplogInfo.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OplogInfo::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.OplogInfo.rs_name)
}

// uint64 log_size = 2;
void OplogInfo::clear_log_size() {
  log_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 OplogInfo::log_size() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.log_size)
  return log_size_;
}
void OplogInfo::set_log_size(::google::protobuf::uint64 value) {
  
  log_size_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.log_size)
}

// uint64 used = 3;
void OplogInfo::clear_used() {
  used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 OplogInfo::used() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.used)
  return used_;
}
void OplogInfo::set_used(::google::protobuf::uint64 value) {
  
  used_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.used)
}

// int32 time_diff_secs = 4;
void OplogInfo::clear_time_diff_secs() {
  time_diff_secs_ = 0;
}
::google::protobuf::int32 OplogInfo::time_diff_secs() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.time_diff_secs)
  return time_diff_secs_;
}
void OplogInfo::set_time_diff_secs(::google::protobuf::int32 value) {
  
  time_diff_secs_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.time_diff_secs)
}

// int32 t_first = 5;
void OplogInfo::clear_t_first() {
  t_first_ = 0;
}
::google::protobuf::int32 OplogInfo::t_first() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.t_first)
  return t_first_;
}
void OplogInfo::set_t_first(::google::protobuf::int32 value) {
  
  t_first_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.t_first)
}

// int32 t_last = 6;
void OplogInfo::clear_t_last() {
  t_last_ = 0;
}
::google::protobuf::int32 OplogInfo::t_last() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.t_last)
  return t_last_;
}
void OplogInfo::set_t_last(::google::protobuf::int32 value) {
  
  t_last_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.t_last)
}

// int64 oplog_first = 7;
void OplogInfo::clear_oplog_first() {
  oplog_first_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OplogInfo::oplog_first() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.oplog_first)
  return oplog_first_;
}
void OplogInfo::set_oplog_first(::google::protobuf::int64 value) {
  
  oplog_first_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.oplog_first)
}

// int64 oplog_last = 8;
void OplogInfo::clear_oplog_last() {
  oplog_last_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OplogInfo::oplog_last() const {
  // @@protoc_insertion_point(field_get:masterproto.OplogInfo.oplog_last)
  return oplog_last_;
}
void OplogInfo::set_oplog_last(::google::protobuf::int64 value) {
  
  oplog_last_ = value;
  // @@protoc_insertion_point(field_set:masterproto.OplogInfo.oplog_last)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterfacePart::kInterfaceNameFieldNumber;
const int InterfacePart::kParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterfacePart::InterfacePart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.InterfacePart)
}
InterfacePart::InterfacePart(const InterfacePart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interfacename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interfacename().size() > 0) {
    interfacename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfacename_);
  }
  if (from.has_para()) {
    para_ = new ::masterproto::ProxyChgInfo(*from.para_);
  } else {
    para_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.InterfacePart)
}

void InterfacePart::SharedCtor() {
  interfacename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  para_ = NULL;
  _cached_size_ = 0;
}

InterfacePart::~InterfacePart() {
  // @@protoc_insertion_point(destructor:masterproto.InterfacePart)
  SharedDtor();
}

void InterfacePart::SharedDtor() {
  interfacename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete para_;
  }
}

void InterfacePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterfacePart::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[10].descriptor;
}

const InterfacePart& InterfacePart::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterfacePart* InterfacePart::New(::google::protobuf::Arena* arena) const {
  InterfacePart* n = new InterfacePart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterfacePart::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.InterfacePart)
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && para_ != NULL) {
    delete para_;
  }
  para_ = NULL;
}

bool InterfacePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.InterfacePart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string interfaceName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfacename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfacename().data(), this->interfacename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.InterfacePart.interfaceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ProxyChgInfo para = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_para()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.InterfacePart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.InterfacePart)
  return false;
#undef DO_
}

void InterfacePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.InterfacePart)
  // string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.InterfacePart.interfaceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interfacename(), output);
  }

  // .masterproto.ProxyChgInfo para = 2;
  if (this->has_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->para_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.InterfacePart)
}

::google::protobuf::uint8* InterfacePart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.InterfacePart)
  // string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.InterfacePart.interfaceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interfacename(), target);
  }

  // .masterproto.ProxyChgInfo para = 2;
  if (this->has_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->para_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.InterfacePart)
  return target;
}

size_t InterfacePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.InterfacePart)
  size_t total_size = 0;

  // string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfacename());
  }

  // .masterproto.ProxyChgInfo para = 2;
  if (this->has_para()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->para_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterfacePart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.InterfacePart)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfacePart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterfacePart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.InterfacePart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.InterfacePart)
    MergeFrom(*source);
  }
}

void InterfacePart::MergeFrom(const InterfacePart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.InterfacePart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.interfacename().size() > 0) {

    interfacename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfacename_);
  }
  if (from.has_para()) {
    mutable_para()->::masterproto::ProxyChgInfo::MergeFrom(from.para());
  }
}

void InterfacePart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.InterfacePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfacePart::CopyFrom(const InterfacePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.InterfacePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfacePart::IsInitialized() const {
  return true;
}

void InterfacePart::Swap(InterfacePart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterfacePart::InternalSwap(InterfacePart* other) {
  interfacename_.Swap(&other->interfacename_);
  std::swap(para_, other->para_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterfacePart::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterfacePart

// string interfaceName = 1;
void InterfacePart::clear_interfacename() {
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InterfacePart::interfacename() const {
  // @@protoc_insertion_point(field_get:masterproto.InterfacePart.interfaceName)
  return interfacename_.GetNoArena();
}
void InterfacePart::set_interfacename(const ::std::string& value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.InterfacePart.interfaceName)
}
#if LANG_CXX11
void InterfacePart::set_interfacename(::std::string&& value) {
  
  interfacename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.InterfacePart.interfaceName)
}
#endif
void InterfacePart::set_interfacename(const char* value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.InterfacePart.interfaceName)
}
void InterfacePart::set_interfacename(const char* value, size_t size) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.InterfacePart.interfaceName)
}
::std::string* InterfacePart::mutable_interfacename() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.InterfacePart.interfaceName)
  return interfacename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InterfacePart::release_interfacename() {
  // @@protoc_insertion_point(field_release:masterproto.InterfacePart.interfaceName)
  
  return interfacename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InterfacePart::set_allocated_interfacename(::std::string* interfacename) {
  if (interfacename != NULL) {
    
  } else {
    
  }
  interfacename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfacename);
  // @@protoc_insertion_point(field_set_allocated:masterproto.InterfacePart.interfaceName)
}

// .masterproto.ProxyChgInfo para = 2;
bool InterfacePart::has_para() const {
  return this != internal_default_instance() && para_ != NULL;
}
void InterfacePart::clear_para() {
  if (GetArenaNoVirtual() == NULL && para_ != NULL) delete para_;
  para_ = NULL;
}
const ::masterproto::ProxyChgInfo& InterfacePart::para() const {
  // @@protoc_insertion_point(field_get:masterproto.InterfacePart.para)
  return para_ != NULL ? *para_
                         : *::masterproto::ProxyChgInfo::internal_default_instance();
}
::masterproto::ProxyChgInfo* InterfacePart::mutable_para() {
  
  if (para_ == NULL) {
    para_ = new ::masterproto::ProxyChgInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.InterfacePart.para)
  return para_;
}
::masterproto::ProxyChgInfo* InterfacePart::release_para() {
  // @@protoc_insertion_point(field_release:masterproto.InterfacePart.para)
  
  ::masterproto::ProxyChgInfo* temp = para_;
  para_ = NULL;
  return temp;
}
void InterfacePart::set_allocated_para(::masterproto::ProxyChgInfo* para) {
  delete para_;
  para_ = para;
  if (para) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.InterfacePart.para)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProxyChgReq::kVersionFieldNumber;
const int ProxyChgReq::kCallerFieldNumber;
const int ProxyChgReq::kCalleeFieldNumber;
const int ProxyChgReq::kPasswordFieldNumber;
const int ProxyChgReq::kEventIdFieldNumber;
const int ProxyChgReq::kTimestampFieldNumber;
const int ProxyChgReq::kInterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProxyChgReq::ProxyChgReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ProxyChgReq)
}
ProxyChgReq::ProxyChgReq(const ProxyChgReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  caller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.caller().size() > 0) {
    caller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_);
  }
  callee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.callee().size() > 0) {
    callee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callee_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_interface()) {
    interface_ = new ::masterproto::InterfacePart(*from.interface_);
  } else {
    interface_ = NULL;
  }
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ProxyChgReq)
}

void ProxyChgReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interface_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&interface_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

ProxyChgReq::~ProxyChgReq() {
  // @@protoc_insertion_point(destructor:masterproto.ProxyChgReq)
  SharedDtor();
}

void ProxyChgReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete interface_;
  }
}

void ProxyChgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyChgReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[11].descriptor;
}

const ProxyChgReq& ProxyChgReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProxyChgReq* ProxyChgReq::New(::google::protobuf::Arena* arena) const {
  ProxyChgReq* n = new ProxyChgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProxyChgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ProxyChgReq)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(timestamp_));
}

bool ProxyChgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ProxyChgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgReq.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string caller = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->caller().data(), this->caller().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgReq.caller"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string callee = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->callee().data(), this->callee().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgReq.callee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 event_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.InterfacePart interface = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ProxyChgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ProxyChgReq)
  return false;
#undef DO_
}

void ProxyChgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ProxyChgReq)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.caller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->caller(), output);
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.callee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->callee(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // int64 event_id = 5;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->event_id(), output);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // .masterproto.InterfacePart interface = 7;
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->interface_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ProxyChgReq)
}

::google::protobuf::uint8* ProxyChgReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ProxyChgReq)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.caller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caller(), target);
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.callee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callee(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // int64 event_id = 5;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->event_id(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // .masterproto.InterfacePart interface = 7;
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->interface_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ProxyChgReq)
  return target;
}

size_t ProxyChgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ProxyChgReq)
  size_t total_size = 0;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller());
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->callee());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .masterproto.InterfacePart interface = 7;
  if (this->has_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interface_);
  }

  // int64 event_id = 5;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->event_id());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyChgReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ProxyChgReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyChgReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProxyChgReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ProxyChgReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ProxyChgReq)
    MergeFrom(*source);
  }
}

void ProxyChgReq::MergeFrom(const ProxyChgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ProxyChgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.caller().size() > 0) {

    caller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_);
  }
  if (from.callee().size() > 0) {

    callee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callee_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_interface()) {
    mutable_interface()->::masterproto::InterfacePart::MergeFrom(from.interface());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ProxyChgReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ProxyChgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyChgReq::CopyFrom(const ProxyChgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ProxyChgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyChgReq::IsInitialized() const {
  return true;
}

void ProxyChgReq::Swap(ProxyChgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProxyChgReq::InternalSwap(ProxyChgReq* other) {
  version_.Swap(&other->version_);
  caller_.Swap(&other->caller_);
  callee_.Swap(&other->callee_);
  password_.Swap(&other->password_);
  std::swap(interface_, other->interface_);
  std::swap(event_id_, other->event_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProxyChgReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyChgReq

// string version = 1;
void ProxyChgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgReq::version() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.version)
  return version_.GetNoArena();
}
void ProxyChgReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.version)
}
#if LANG_CXX11
void ProxyChgReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgReq.version)
}
#endif
void ProxyChgReq::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgReq.version)
}
void ProxyChgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgReq.version)
}
::std::string* ProxyChgReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgReq::release_version() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgReq.version)
}

// string caller = 2;
void ProxyChgReq::clear_caller() {
  caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgReq::caller() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.caller)
  return caller_.GetNoArena();
}
void ProxyChgReq::set_caller(const ::std::string& value) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.caller)
}
#if LANG_CXX11
void ProxyChgReq::set_caller(::std::string&& value) {
  
  caller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgReq.caller)
}
#endif
void ProxyChgReq::set_caller(const char* value) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgReq.caller)
}
void ProxyChgReq::set_caller(const char* value, size_t size) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgReq.caller)
}
::std::string* ProxyChgReq::mutable_caller() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgReq.caller)
  return caller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgReq::release_caller() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgReq.caller)
  
  return caller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgReq::set_allocated_caller(::std::string* caller) {
  if (caller != NULL) {
    
  } else {
    
  }
  caller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgReq.caller)
}

// string callee = 3;
void ProxyChgReq::clear_callee() {
  callee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgReq::callee() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.callee)
  return callee_.GetNoArena();
}
void ProxyChgReq::set_callee(const ::std::string& value) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.callee)
}
#if LANG_CXX11
void ProxyChgReq::set_callee(::std::string&& value) {
  
  callee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgReq.callee)
}
#endif
void ProxyChgReq::set_callee(const char* value) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgReq.callee)
}
void ProxyChgReq::set_callee(const char* value, size_t size) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgReq.callee)
}
::std::string* ProxyChgReq::mutable_callee() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgReq.callee)
  return callee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgReq::release_callee() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgReq.callee)
  
  return callee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgReq::set_allocated_callee(::std::string* callee) {
  if (callee != NULL) {
    
  } else {
    
  }
  callee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callee);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgReq.callee)
}

// string password = 4;
void ProxyChgReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgReq::password() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.password)
  return password_.GetNoArena();
}
void ProxyChgReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.password)
}
#if LANG_CXX11
void ProxyChgReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgReq.password)
}
#endif
void ProxyChgReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgReq.password)
}
void ProxyChgReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgReq.password)
}
::std::string* ProxyChgReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgReq::release_password() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgReq.password)
}

// int64 event_id = 5;
void ProxyChgReq::clear_event_id() {
  event_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProxyChgReq::event_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.event_id)
  return event_id_;
}
void ProxyChgReq::set_event_id(::google::protobuf::int64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.event_id)
}

// int64 timestamp = 6;
void ProxyChgReq::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProxyChgReq::timestamp() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.timestamp)
  return timestamp_;
}
void ProxyChgReq::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgReq.timestamp)
}

// .masterproto.InterfacePart interface = 7;
bool ProxyChgReq::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
void ProxyChgReq::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) delete interface_;
  interface_ = NULL;
}
const ::masterproto::InterfacePart& ProxyChgReq::interface() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgReq.interface)
  return interface_ != NULL ? *interface_
                         : *::masterproto::InterfacePart::internal_default_instance();
}
::masterproto::InterfacePart* ProxyChgReq::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::masterproto::InterfacePart;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgReq.interface)
  return interface_;
}
::masterproto::InterfacePart* ProxyChgReq::release_interface() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgReq.interface)
  
  ::masterproto::InterfacePart* temp = interface_;
  interface_ = NULL;
  return temp;
}
void ProxyChgReq::set_allocated_interface(::masterproto::InterfacePart* interface) {
  delete interface_;
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgReq.interface)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProxyChgRsp::kVersionFieldNumber;
const int ProxyChgRsp::kCallerFieldNumber;
const int ProxyChgRsp::kCalleeFieldNumber;
const int ProxyChgRsp::kEventIdFieldNumber;
const int ProxyChgRsp::kTimestampFieldNumber;
const int ProxyChgRsp::kReturnCodeFieldNumber;
const int ProxyChgRsp::kReturnMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProxyChgRsp::ProxyChgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ProxyChgRsp)
}
ProxyChgRsp::ProxyChgRsp(const ProxyChgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  caller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.caller().size() > 0) {
    caller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_);
  }
  callee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.callee().size() > 0) {
    callee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callee_);
  }
  return_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.return_msg().size() > 0) {
    return_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.return_msg_);
  }
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&return_code_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(return_code_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ProxyChgRsp)
}

void ProxyChgRsp::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&return_code_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(return_code_));
  _cached_size_ = 0;
}

ProxyChgRsp::~ProxyChgRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ProxyChgRsp)
  SharedDtor();
}

void ProxyChgRsp::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProxyChgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyChgRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[12].descriptor;
}

const ProxyChgRsp& ProxyChgRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProxyChgRsp* ProxyChgRsp::New(::google::protobuf::Arena* arena) const {
  ProxyChgRsp* n = new ProxyChgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProxyChgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ProxyChgRsp)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&return_code_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(return_code_));
}

bool ProxyChgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ProxyChgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgRsp.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string caller = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->caller().data(), this->caller().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgRsp.caller"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string callee = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->callee().data(), this->callee().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgRsp.callee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 event_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 return_code = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string return_msg = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->return_msg().data(), this->return_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ProxyChgRsp.return_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ProxyChgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ProxyChgRsp)
  return false;
#undef DO_
}

void ProxyChgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ProxyChgRsp)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.caller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->caller(), output);
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.callee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->callee(), output);
  }

  // int64 event_id = 4;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->event_id(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // int32 return_code = 6;
  if (this->return_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->return_code(), output);
  }

  // string return_msg = 7;
  if (this->return_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.return_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->return_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ProxyChgRsp)
}

::google::protobuf::uint8* ProxyChgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ProxyChgRsp)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller().data(), this->caller().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.caller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caller(), target);
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callee().data(), this->callee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.callee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callee(), target);
  }

  // int64 event_id = 4;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->event_id(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // int32 return_code = 6;
  if (this->return_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->return_code(), target);
  }

  // string return_msg = 7;
  if (this->return_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->return_msg().data(), this->return_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ProxyChgRsp.return_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->return_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ProxyChgRsp)
  return target;
}

size_t ProxyChgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ProxyChgRsp)
  size_t total_size = 0;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller());
  }

  // string callee = 3;
  if (this->callee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->callee());
  }

  // string return_msg = 7;
  if (this->return_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->return_msg());
  }

  // int64 event_id = 4;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->event_id());
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 return_code = 6;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->return_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyChgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ProxyChgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyChgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProxyChgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ProxyChgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ProxyChgRsp)
    MergeFrom(*source);
  }
}

void ProxyChgRsp::MergeFrom(const ProxyChgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ProxyChgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.caller().size() > 0) {

    caller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_);
  }
  if (from.callee().size() > 0) {

    callee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callee_);
  }
  if (from.return_msg().size() > 0) {

    return_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.return_msg_);
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void ProxyChgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ProxyChgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyChgRsp::CopyFrom(const ProxyChgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ProxyChgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyChgRsp::IsInitialized() const {
  return true;
}

void ProxyChgRsp::Swap(ProxyChgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProxyChgRsp::InternalSwap(ProxyChgRsp* other) {
  version_.Swap(&other->version_);
  caller_.Swap(&other->caller_);
  callee_.Swap(&other->callee_);
  return_msg_.Swap(&other->return_msg_);
  std::swap(event_id_, other->event_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(return_code_, other->return_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProxyChgRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProxyChgRsp

// string version = 1;
void ProxyChgRsp::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgRsp::version() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.version)
  return version_.GetNoArena();
}
void ProxyChgRsp::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.version)
}
#if LANG_CXX11
void ProxyChgRsp::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgRsp.version)
}
#endif
void ProxyChgRsp::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgRsp.version)
}
void ProxyChgRsp::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgRsp.version)
}
::std::string* ProxyChgRsp::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgRsp.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgRsp::release_version() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgRsp.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgRsp::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgRsp.version)
}

// string caller = 2;
void ProxyChgRsp::clear_caller() {
  caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgRsp::caller() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.caller)
  return caller_.GetNoArena();
}
void ProxyChgRsp::set_caller(const ::std::string& value) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.caller)
}
#if LANG_CXX11
void ProxyChgRsp::set_caller(::std::string&& value) {
  
  caller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgRsp.caller)
}
#endif
void ProxyChgRsp::set_caller(const char* value) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgRsp.caller)
}
void ProxyChgRsp::set_caller(const char* value, size_t size) {
  
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgRsp.caller)
}
::std::string* ProxyChgRsp::mutable_caller() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgRsp.caller)
  return caller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgRsp::release_caller() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgRsp.caller)
  
  return caller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgRsp::set_allocated_caller(::std::string* caller) {
  if (caller != NULL) {
    
  } else {
    
  }
  caller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgRsp.caller)
}

// string callee = 3;
void ProxyChgRsp::clear_callee() {
  callee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgRsp::callee() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.callee)
  return callee_.GetNoArena();
}
void ProxyChgRsp::set_callee(const ::std::string& value) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.callee)
}
#if LANG_CXX11
void ProxyChgRsp::set_callee(::std::string&& value) {
  
  callee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgRsp.callee)
}
#endif
void ProxyChgRsp::set_callee(const char* value) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgRsp.callee)
}
void ProxyChgRsp::set_callee(const char* value, size_t size) {
  
  callee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgRsp.callee)
}
::std::string* ProxyChgRsp::mutable_callee() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgRsp.callee)
  return callee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgRsp::release_callee() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgRsp.callee)
  
  return callee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgRsp::set_allocated_callee(::std::string* callee) {
  if (callee != NULL) {
    
  } else {
    
  }
  callee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callee);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgRsp.callee)
}

// int64 event_id = 4;
void ProxyChgRsp::clear_event_id() {
  event_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProxyChgRsp::event_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.event_id)
  return event_id_;
}
void ProxyChgRsp::set_event_id(::google::protobuf::int64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.event_id)
}

// int64 timestamp = 5;
void ProxyChgRsp::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProxyChgRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.timestamp)
  return timestamp_;
}
void ProxyChgRsp::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.timestamp)
}

// int32 return_code = 6;
void ProxyChgRsp::clear_return_code() {
  return_code_ = 0;
}
::google::protobuf::int32 ProxyChgRsp::return_code() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.return_code)
  return return_code_;
}
void ProxyChgRsp::set_return_code(::google::protobuf::int32 value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.return_code)
}

// string return_msg = 7;
void ProxyChgRsp::clear_return_msg() {
  return_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProxyChgRsp::return_msg() const {
  // @@protoc_insertion_point(field_get:masterproto.ProxyChgRsp.return_msg)
  return return_msg_.GetNoArena();
}
void ProxyChgRsp::set_return_msg(const ::std::string& value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ProxyChgRsp.return_msg)
}
#if LANG_CXX11
void ProxyChgRsp::set_return_msg(::std::string&& value) {
  
  return_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ProxyChgRsp.return_msg)
}
#endif
void ProxyChgRsp::set_return_msg(const char* value) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ProxyChgRsp.return_msg)
}
void ProxyChgRsp::set_return_msg(const char* value, size_t size) {
  
  return_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ProxyChgRsp.return_msg)
}
::std::string* ProxyChgRsp::mutable_return_msg() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ProxyChgRsp.return_msg)
  return return_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProxyChgRsp::release_return_msg() {
  // @@protoc_insertion_point(field_release:masterproto.ProxyChgRsp.return_msg)
  
  return return_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProxyChgRsp::set_allocated_return_msg(::std::string* return_msg) {
  if (return_msg != NULL) {
    
  } else {
    
  }
  return_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_msg);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ProxyChgRsp.return_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddResourceReq::kHeaderFieldNumber;
const int AddResourceReq::kMachineIpFieldNumber;
const int AddResourceReq::kRegionIdFieldNumber;
const int AddResourceReq::kSetIdFieldNumber;
const int AddResourceReq::kMachineTypeFieldNumber;
const int AddResourceReq::kResDescFieldNumber;
const int AddResourceReq::kMemoryURVFieldNumber;
const int AddResourceReq::kNumURVFieldNumber;
const int AddResourceReq::kIdcIdFieldNumber;
const int AddResourceReq::kRackIdFieldNumber;
const int AddResourceReq::kWorkerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddResourceReq::AddResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddResourceReq)
}
AddResourceReq::AddResourceReq(const AddResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  worker_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.worker_version().size() > 0) {
    worker_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_res_desc()) {
    res_desc_ = new ::cmongoproto::ResourceDesc(*from.res_desc_);
  } else {
    res_desc_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&rack_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(rack_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.AddResourceReq)
}

void AddResourceReq::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&rack_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(rack_id_));
  _cached_size_ = 0;
}

AddResourceReq::~AddResourceReq() {
  // @@protoc_insertion_point(destructor:masterproto.AddResourceReq)
  SharedDtor();
}

void AddResourceReq::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete res_desc_;
  }
}

void AddResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResourceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[13].descriptor;
}

const AddResourceReq& AddResourceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddResourceReq* AddResourceReq::New(::google::protobuf::Arena* arena) const {
  AddResourceReq* n = new AddResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddResourceReq)
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && res_desc_ != NULL) {
    delete res_desc_;
  }
  res_desc_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&rack_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(rack_id_));
}

bool AddResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddResourceReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc res_desc = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memory_URV = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_urv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_URV = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_urv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 idc_id = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rack_id = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rack_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string worker_version = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_version().data(), this->worker_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddResourceReq.worker_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddResourceReq)
  return false;
#undef DO_
}

void AddResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddResourceReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_ip(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // .masterproto.MachineType machine_type = 5;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->machine_type(), output);
  }

  // .cmongoproto.ResourceDesc res_desc = 6;
  if (this->has_res_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->res_desc_, output);
  }

  // int32 memory_URV = 7;
  if (this->memory_urv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->memory_urv(), output);
  }

  // int32 num_URV = 8;
  if (this->num_urv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_urv(), output);
  }

  // int32 idc_id = 9;
  if (this->idc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->idc_id(), output);
  }

  // int32 rack_id = 10;
  if (this->rack_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rack_id(), output);
  }

  // string worker_version = 11;
  if (this->worker_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_version().data(), this->worker_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddResourceReq.worker_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->worker_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddResourceReq)
}

::google::protobuf::uint8* AddResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddResourceReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_ip(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // .masterproto.MachineType machine_type = 5;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->machine_type(), target);
  }

  // .cmongoproto.ResourceDesc res_desc = 6;
  if (this->has_res_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->res_desc_, false, target);
  }

  // int32 memory_URV = 7;
  if (this->memory_urv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->memory_urv(), target);
  }

  // int32 num_URV = 8;
  if (this->num_urv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_urv(), target);
  }

  // int32 idc_id = 9;
  if (this->idc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->idc_id(), target);
  }

  // int32 rack_id = 10;
  if (this->rack_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rack_id(), target);
  }

  // string worker_version = 11;
  if (this->worker_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_version().data(), this->worker_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddResourceReq.worker_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->worker_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddResourceReq)
  return target;
}

size_t AddResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddResourceReq)
  size_t total_size = 0;

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // string worker_version = 11;
  if (this->worker_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc res_desc = 6;
  if (this->has_res_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_desc_);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .masterproto.MachineType machine_type = 5;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 memory_URV = 7;
  if (this->memory_urv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memory_urv());
  }

  // int32 num_URV = 8;
  if (this->num_urv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_urv());
  }

  // int32 idc_id = 9;
  if (this->idc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idc_id());
  }

  // int32 rack_id = 10;
  if (this->rack_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddResourceReq)
    MergeFrom(*source);
  }
}

void AddResourceReq::MergeFrom(const AddResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.worker_version().size() > 0) {

    worker_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_res_desc()) {
    mutable_res_desc()->::cmongoproto::ResourceDesc::MergeFrom(from.res_desc());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.memory_urv() != 0) {
    set_memory_urv(from.memory_urv());
  }
  if (from.num_urv() != 0) {
    set_num_urv(from.num_urv());
  }
  if (from.idc_id() != 0) {
    set_idc_id(from.idc_id());
  }
  if (from.rack_id() != 0) {
    set_rack_id(from.rack_id());
  }
}

void AddResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResourceReq::CopyFrom(const AddResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResourceReq::IsInitialized() const {
  return true;
}

void AddResourceReq::Swap(AddResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddResourceReq::InternalSwap(AddResourceReq* other) {
  machine_ip_.Swap(&other->machine_ip_);
  worker_version_.Swap(&other->worker_version_);
  std::swap(header_, other->header_);
  std::swap(res_desc_, other->res_desc_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(memory_urv_, other->memory_urv_);
  std::swap(num_urv_, other->num_urv_);
  std::swap(idc_id_, other->idc_id_);
  std::swap(rack_id_, other->rack_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddResourceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddResourceReq

// .cmongoproto.ReqHeader header = 1;
bool AddResourceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddResourceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& AddResourceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* AddResourceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddResourceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* AddResourceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddResourceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddResourceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddResourceReq.header)
}

// string machine_ip = 2;
void AddResourceReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddResourceReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void AddResourceReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.machine_ip)
}
#if LANG_CXX11
void AddResourceReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddResourceReq.machine_ip)
}
#endif
void AddResourceReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddResourceReq.machine_ip)
}
void AddResourceReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddResourceReq.machine_ip)
}
::std::string* AddResourceReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddResourceReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddResourceReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.AddResourceReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddResourceReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddResourceReq.machine_ip)
}

// int32 region_id = 3;
void AddResourceReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 AddResourceReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.region_id)
  return region_id_;
}
void AddResourceReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.region_id)
}

// int32 set_id = 4;
void AddResourceReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 AddResourceReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.set_id)
  return set_id_;
}
void AddResourceReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.set_id)
}

// .masterproto.MachineType machine_type = 5;
void AddResourceReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType AddResourceReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void AddResourceReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.machine_type)
}

// .cmongoproto.ResourceDesc res_desc = 6;
bool AddResourceReq::has_res_desc() const {
  return this != internal_default_instance() && res_desc_ != NULL;
}
void AddResourceReq::clear_res_desc() {
  if (GetArenaNoVirtual() == NULL && res_desc_ != NULL) delete res_desc_;
  res_desc_ = NULL;
}
const ::cmongoproto::ResourceDesc& AddResourceReq::res_desc() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.res_desc)
  return res_desc_ != NULL ? *res_desc_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* AddResourceReq::mutable_res_desc() {
  
  if (res_desc_ == NULL) {
    res_desc_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddResourceReq.res_desc)
  return res_desc_;
}
::cmongoproto::ResourceDesc* AddResourceReq::release_res_desc() {
  // @@protoc_insertion_point(field_release:masterproto.AddResourceReq.res_desc)
  
  ::cmongoproto::ResourceDesc* temp = res_desc_;
  res_desc_ = NULL;
  return temp;
}
void AddResourceReq::set_allocated_res_desc(::cmongoproto::ResourceDesc* res_desc) {
  delete res_desc_;
  res_desc_ = res_desc;
  if (res_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddResourceReq.res_desc)
}

// int32 memory_URV = 7;
void AddResourceReq::clear_memory_urv() {
  memory_urv_ = 0;
}
::google::protobuf::int32 AddResourceReq::memory_urv() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.memory_URV)
  return memory_urv_;
}
void AddResourceReq::set_memory_urv(::google::protobuf::int32 value) {
  
  memory_urv_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.memory_URV)
}

// int32 num_URV = 8;
void AddResourceReq::clear_num_urv() {
  num_urv_ = 0;
}
::google::protobuf::int32 AddResourceReq::num_urv() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.num_URV)
  return num_urv_;
}
void AddResourceReq::set_num_urv(::google::protobuf::int32 value) {
  
  num_urv_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.num_URV)
}

// int32 idc_id = 9;
void AddResourceReq::clear_idc_id() {
  idc_id_ = 0;
}
::google::protobuf::int32 AddResourceReq::idc_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.idc_id)
  return idc_id_;
}
void AddResourceReq::set_idc_id(::google::protobuf::int32 value) {
  
  idc_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.idc_id)
}

// int32 rack_id = 10;
void AddResourceReq::clear_rack_id() {
  rack_id_ = 0;
}
::google::protobuf::int32 AddResourceReq::rack_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.rack_id)
  return rack_id_;
}
void AddResourceReq::set_rack_id(::google::protobuf::int32 value) {
  
  rack_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.rack_id)
}

// string worker_version = 11;
void AddResourceReq::clear_worker_version() {
  worker_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddResourceReq::worker_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceReq.worker_version)
  return worker_version_.GetNoArena();
}
void AddResourceReq::set_worker_version(const ::std::string& value) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddResourceReq.worker_version)
}
#if LANG_CXX11
void AddResourceReq::set_worker_version(::std::string&& value) {
  
  worker_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddResourceReq.worker_version)
}
#endif
void AddResourceReq::set_worker_version(const char* value) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddResourceReq.worker_version)
}
void AddResourceReq::set_worker_version(const char* value, size_t size) {
  
  worker_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddResourceReq.worker_version)
}
::std::string* AddResourceReq::mutable_worker_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddResourceReq.worker_version)
  return worker_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddResourceReq::release_worker_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddResourceReq.worker_version)
  
  return worker_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddResourceReq::set_allocated_worker_version(::std::string* worker_version) {
  if (worker_version != NULL) {
    
  } else {
    
  }
  worker_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddResourceReq.worker_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddResourceRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddResourceRsp::AddResourceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddResourceRsp)
}
AddResourceRsp::AddResourceRsp(const AddResourceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.AddResourceRsp)
}

void AddResourceRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AddResourceRsp::~AddResourceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.AddResourceRsp)
  SharedDtor();
}

void AddResourceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AddResourceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResourceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[14].descriptor;
}

const AddResourceRsp& AddResourceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddResourceRsp* AddResourceRsp::New(::google::protobuf::Arena* arena) const {
  AddResourceRsp* n = new AddResourceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddResourceRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AddResourceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddResourceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddResourceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddResourceRsp)
  return false;
#undef DO_
}

void AddResourceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddResourceRsp)
}

::google::protobuf::uint8* AddResourceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddResourceRsp)
  return target;
}

size_t AddResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddResourceRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResourceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResourceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddResourceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddResourceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddResourceRsp)
    MergeFrom(*source);
  }
}

void AddResourceRsp::MergeFrom(const AddResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void AddResourceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResourceRsp::CopyFrom(const AddResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResourceRsp::IsInitialized() const {
  return true;
}

void AddResourceRsp::Swap(AddResourceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddResourceRsp::InternalSwap(AddResourceRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddResourceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddResourceRsp

// .cmongoproto.ResHeader header = 1;
bool AddResourceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddResourceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& AddResourceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddResourceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* AddResourceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddResourceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* AddResourceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddResourceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddResourceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddResourceRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockResourceReq::kHeaderFieldNumber;
const int BlockResourceReq::kMachineIpFieldNumber;
const int BlockResourceReq::kRegionIdFieldNumber;
const int BlockResourceReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockResourceReq::BlockResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BlockResourceReq)
}
BlockResourceReq::BlockResourceReq(const BlockResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.BlockResourceReq)
}

void BlockResourceReq::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

BlockResourceReq::~BlockResourceReq() {
  // @@protoc_insertion_point(destructor:masterproto.BlockResourceReq)
  SharedDtor();
}

void BlockResourceReq::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BlockResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockResourceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[15].descriptor;
}

const BlockResourceReq& BlockResourceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockResourceReq* BlockResourceReq::New(::google::protobuf::Arena* arena) const {
  BlockResourceReq* n = new BlockResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BlockResourceReq)
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool BlockResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BlockResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BlockResourceReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BlockResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BlockResourceReq)
  return false;
#undef DO_
}

void BlockResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BlockResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BlockResourceReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_ip(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BlockResourceReq)
}

::google::protobuf::uint8* BlockResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BlockResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BlockResourceReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_ip(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BlockResourceReq)
  return target;
}

size_t BlockResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BlockResourceReq)
  size_t total_size = 0;

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BlockResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BlockResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BlockResourceReq)
    MergeFrom(*source);
  }
}

void BlockResourceReq::MergeFrom(const BlockResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BlockResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void BlockResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BlockResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResourceReq::CopyFrom(const BlockResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BlockResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResourceReq::IsInitialized() const {
  return true;
}

void BlockResourceReq::Swap(BlockResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockResourceReq::InternalSwap(BlockResourceReq* other) {
  machine_ip_.Swap(&other->machine_ip_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockResourceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockResourceReq

// .cmongoproto.ReqHeader header = 1;
bool BlockResourceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BlockResourceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& BlockResourceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BlockResourceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* BlockResourceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BlockResourceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* BlockResourceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BlockResourceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BlockResourceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BlockResourceReq.header)
}

// string machine_ip = 2;
void BlockResourceReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockResourceReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.BlockResourceReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void BlockResourceReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BlockResourceReq.machine_ip)
}
#if LANG_CXX11
void BlockResourceReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BlockResourceReq.machine_ip)
}
#endif
void BlockResourceReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BlockResourceReq.machine_ip)
}
void BlockResourceReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BlockResourceReq.machine_ip)
}
::std::string* BlockResourceReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BlockResourceReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockResourceReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.BlockResourceReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockResourceReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BlockResourceReq.machine_ip)
}

// int32 region_id = 3;
void BlockResourceReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 BlockResourceReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BlockResourceReq.region_id)
  return region_id_;
}
void BlockResourceReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BlockResourceReq.region_id)
}

// int32 set_id = 4;
void BlockResourceReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 BlockResourceReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BlockResourceReq.set_id)
  return set_id_;
}
void BlockResourceReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BlockResourceReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnblockResourceReq::kHeaderFieldNumber;
const int UnblockResourceReq::kMachineIpFieldNumber;
const int UnblockResourceReq::kRegionIdFieldNumber;
const int UnblockResourceReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnblockResourceReq::UnblockResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.UnblockResourceReq)
}
UnblockResourceReq::UnblockResourceReq(const UnblockResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.UnblockResourceReq)
}

void UnblockResourceReq::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

UnblockResourceReq::~UnblockResourceReq() {
  // @@protoc_insertion_point(destructor:masterproto.UnblockResourceReq)
  SharedDtor();
}

void UnblockResourceReq::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UnblockResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnblockResourceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[16].descriptor;
}

const UnblockResourceReq& UnblockResourceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnblockResourceReq* UnblockResourceReq::New(::google::protobuf::Arena* arena) const {
  UnblockResourceReq* n = new UnblockResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnblockResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.UnblockResourceReq)
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool UnblockResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.UnblockResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.UnblockResourceReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.UnblockResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.UnblockResourceReq)
  return false;
#undef DO_
}

void UnblockResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.UnblockResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UnblockResourceReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_ip(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.UnblockResourceReq)
}

::google::protobuf::uint8* UnblockResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.UnblockResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UnblockResourceReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_ip(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.UnblockResourceReq)
  return target;
}

size_t UnblockResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.UnblockResourceReq)
  size_t total_size = 0;

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnblockResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.UnblockResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnblockResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnblockResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.UnblockResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.UnblockResourceReq)
    MergeFrom(*source);
  }
}

void UnblockResourceReq::MergeFrom(const UnblockResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.UnblockResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void UnblockResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.UnblockResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnblockResourceReq::CopyFrom(const UnblockResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.UnblockResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockResourceReq::IsInitialized() const {
  return true;
}

void UnblockResourceReq::Swap(UnblockResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnblockResourceReq::InternalSwap(UnblockResourceReq* other) {
  machine_ip_.Swap(&other->machine_ip_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnblockResourceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnblockResourceReq

// .cmongoproto.ReqHeader header = 1;
bool UnblockResourceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UnblockResourceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& UnblockResourceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.UnblockResourceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* UnblockResourceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.UnblockResourceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* UnblockResourceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.UnblockResourceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UnblockResourceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.UnblockResourceReq.header)
}

// string machine_ip = 2;
void UnblockResourceReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnblockResourceReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.UnblockResourceReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void UnblockResourceReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.UnblockResourceReq.machine_ip)
}
#if LANG_CXX11
void UnblockResourceReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.UnblockResourceReq.machine_ip)
}
#endif
void UnblockResourceReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.UnblockResourceReq.machine_ip)
}
void UnblockResourceReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.UnblockResourceReq.machine_ip)
}
::std::string* UnblockResourceReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.UnblockResourceReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnblockResourceReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.UnblockResourceReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnblockResourceReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.UnblockResourceReq.machine_ip)
}

// int32 region_id = 3;
void UnblockResourceReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 UnblockResourceReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.UnblockResourceReq.region_id)
  return region_id_;
}
void UnblockResourceReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UnblockResourceReq.region_id)
}

// int32 set_id = 4;
void UnblockResourceReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 UnblockResourceReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.UnblockResourceReq.set_id)
  return set_id_;
}
void UnblockResourceReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UnblockResourceReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockResourceRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockResourceRsp::BlockResourceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BlockResourceRsp)
}
BlockResourceRsp::BlockResourceRsp(const BlockResourceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.BlockResourceRsp)
}

void BlockResourceRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

BlockResourceRsp::~BlockResourceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.BlockResourceRsp)
  SharedDtor();
}

void BlockResourceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BlockResourceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockResourceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[17].descriptor;
}

const BlockResourceRsp& BlockResourceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockResourceRsp* BlockResourceRsp::New(::google::protobuf::Arena* arena) const {
  BlockResourceRsp* n = new BlockResourceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BlockResourceRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool BlockResourceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BlockResourceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BlockResourceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BlockResourceRsp)
  return false;
#undef DO_
}

void BlockResourceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BlockResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BlockResourceRsp)
}

::google::protobuf::uint8* BlockResourceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BlockResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BlockResourceRsp)
  return target;
}

size_t BlockResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BlockResourceRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockResourceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BlockResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResourceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockResourceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BlockResourceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BlockResourceRsp)
    MergeFrom(*source);
  }
}

void BlockResourceRsp::MergeFrom(const BlockResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BlockResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void BlockResourceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BlockResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResourceRsp::CopyFrom(const BlockResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BlockResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResourceRsp::IsInitialized() const {
  return true;
}

void BlockResourceRsp::Swap(BlockResourceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockResourceRsp::InternalSwap(BlockResourceRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockResourceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockResourceRsp

// .cmongoproto.ResHeader header = 1;
bool BlockResourceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BlockResourceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& BlockResourceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BlockResourceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* BlockResourceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BlockResourceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* BlockResourceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BlockResourceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BlockResourceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BlockResourceRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnblockResourceRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnblockResourceRsp::UnblockResourceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.UnblockResourceRsp)
}
UnblockResourceRsp::UnblockResourceRsp(const UnblockResourceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.UnblockResourceRsp)
}

void UnblockResourceRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

UnblockResourceRsp::~UnblockResourceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.UnblockResourceRsp)
  SharedDtor();
}

void UnblockResourceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UnblockResourceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnblockResourceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[18].descriptor;
}

const UnblockResourceRsp& UnblockResourceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnblockResourceRsp* UnblockResourceRsp::New(::google::protobuf::Arena* arena) const {
  UnblockResourceRsp* n = new UnblockResourceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnblockResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.UnblockResourceRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool UnblockResourceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.UnblockResourceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.UnblockResourceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.UnblockResourceRsp)
  return false;
#undef DO_
}

void UnblockResourceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.UnblockResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.UnblockResourceRsp)
}

::google::protobuf::uint8* UnblockResourceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.UnblockResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.UnblockResourceRsp)
  return target;
}

size_t UnblockResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.UnblockResourceRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnblockResourceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.UnblockResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UnblockResourceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnblockResourceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.UnblockResourceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.UnblockResourceRsp)
    MergeFrom(*source);
  }
}

void UnblockResourceRsp::MergeFrom(const UnblockResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.UnblockResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void UnblockResourceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.UnblockResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnblockResourceRsp::CopyFrom(const UnblockResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.UnblockResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockResourceRsp::IsInitialized() const {
  return true;
}

void UnblockResourceRsp::Swap(UnblockResourceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnblockResourceRsp::InternalSwap(UnblockResourceRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnblockResourceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnblockResourceRsp

// .cmongoproto.ResHeader header = 1;
bool UnblockResourceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UnblockResourceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& UnblockResourceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.UnblockResourceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* UnblockResourceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.UnblockResourceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* UnblockResourceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.UnblockResourceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UnblockResourceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.UnblockResourceRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelResourceReq::kHeaderFieldNumber;
const int DelResourceReq::kMachineIpFieldNumber;
const int DelResourceReq::kRegionIdFieldNumber;
const int DelResourceReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelResourceReq::DelResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelResourceReq)
}
DelResourceReq::DelResourceReq(const DelResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.DelResourceReq)
}

void DelResourceReq::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

DelResourceReq::~DelResourceReq() {
  // @@protoc_insertion_point(destructor:masterproto.DelResourceReq)
  SharedDtor();
}

void DelResourceReq::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelResourceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[19].descriptor;
}

const DelResourceReq& DelResourceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelResourceReq* DelResourceReq::New(::google::protobuf::Arena* arena) const {
  DelResourceReq* n = new DelResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelResourceReq)
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool DelResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelResourceReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelResourceReq)
  return false;
#undef DO_
}

void DelResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelResourceReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_ip(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelResourceReq)
}

::google::protobuf::uint8* DelResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelResourceReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_ip(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelResourceReq)
  return target;
}

size_t DelResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelResourceReq)
  size_t total_size = 0;

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelResourceReq)
    MergeFrom(*source);
  }
}

void DelResourceReq::MergeFrom(const DelResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void DelResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelResourceReq::CopyFrom(const DelResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelResourceReq::IsInitialized() const {
  return true;
}

void DelResourceReq::Swap(DelResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelResourceReq::InternalSwap(DelResourceReq* other) {
  machine_ip_.Swap(&other->machine_ip_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelResourceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelResourceReq

// .cmongoproto.ReqHeader header = 1;
bool DelResourceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelResourceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DelResourceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelResourceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DelResourceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelResourceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DelResourceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelResourceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelResourceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelResourceReq.header)
}

// string machine_ip = 2;
void DelResourceReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelResourceReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.DelResourceReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void DelResourceReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelResourceReq.machine_ip)
}
#if LANG_CXX11
void DelResourceReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelResourceReq.machine_ip)
}
#endif
void DelResourceReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelResourceReq.machine_ip)
}
void DelResourceReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelResourceReq.machine_ip)
}
::std::string* DelResourceReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelResourceReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelResourceReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.DelResourceReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelResourceReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelResourceReq.machine_ip)
}

// int32 region_id = 3;
void DelResourceReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 DelResourceReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelResourceReq.region_id)
  return region_id_;
}
void DelResourceReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelResourceReq.region_id)
}

// int32 set_id = 4;
void DelResourceReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 DelResourceReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelResourceReq.set_id)
  return set_id_;
}
void DelResourceReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelResourceReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelResourceRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelResourceRsp::DelResourceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelResourceRsp)
}
DelResourceRsp::DelResourceRsp(const DelResourceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelResourceRsp)
}

void DelResourceRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelResourceRsp::~DelResourceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DelResourceRsp)
  SharedDtor();
}

void DelResourceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelResourceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelResourceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[20].descriptor;
}

const DelResourceRsp& DelResourceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelResourceRsp* DelResourceRsp::New(::google::protobuf::Arena* arena) const {
  DelResourceRsp* n = new DelResourceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelResourceRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DelResourceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelResourceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelResourceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelResourceRsp)
  return false;
#undef DO_
}

void DelResourceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelResourceRsp)
}

::google::protobuf::uint8* DelResourceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelResourceRsp)
  return target;
}

size_t DelResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelResourceRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelResourceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelResourceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelResourceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelResourceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelResourceRsp)
    MergeFrom(*source);
  }
}

void DelResourceRsp::MergeFrom(const DelResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DelResourceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelResourceRsp::CopyFrom(const DelResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelResourceRsp::IsInitialized() const {
  return true;
}

void DelResourceRsp::Swap(DelResourceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelResourceRsp::InternalSwap(DelResourceRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelResourceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelResourceRsp

// .cmongoproto.ResHeader header = 1;
bool DelResourceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelResourceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DelResourceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelResourceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DelResourceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelResourceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DelResourceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelResourceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelResourceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelResourceRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResourceReq::kHeaderFieldNumber;
const int QueryResourceReq::kRegionIdFieldNumber;
const int QueryResourceReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResourceReq::QueryResourceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryResourceReq)
}
QueryResourceReq::QueryResourceReq(const QueryResourceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryResourceReq)
}

void QueryResourceReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

QueryResourceReq::~QueryResourceReq() {
  // @@protoc_insertion_point(destructor:masterproto.QueryResourceReq)
  SharedDtor();
}

void QueryResourceReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResourceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[21].descriptor;
}

const QueryResourceReq& QueryResourceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryResourceReq* QueryResourceReq::New(::google::protobuf::Arena* arena) const {
  QueryResourceReq* n = new QueryResourceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResourceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryResourceReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool QueryResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryResourceReq)
  return false;
#undef DO_
}

void QueryResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryResourceReq)
}

::google::protobuf::uint8* QueryResourceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryResourceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryResourceReq)
  return target;
}

size_t QueryResourceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryResourceReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResourceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResourceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryResourceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryResourceReq)
    MergeFrom(*source);
  }
}

void QueryResourceReq::MergeFrom(const QueryResourceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryResourceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void QueryResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResourceReq::CopyFrom(const QueryResourceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryResourceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResourceReq::IsInitialized() const {
  return true;
}

void QueryResourceReq::Swap(QueryResourceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResourceReq::InternalSwap(QueryResourceReq* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResourceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryResourceReq

// .cmongoproto.ReqHeader header = 1;
bool QueryResourceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryResourceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& QueryResourceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* QueryResourceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryResourceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* QueryResourceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryResourceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryResourceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryResourceReq.header)
}

// int32 region_id = 2;
void QueryResourceReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 QueryResourceReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceReq.region_id)
  return region_id_;
}
void QueryResourceReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryResourceReq.region_id)
}

// int32 set_id = 3;
void QueryResourceReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 QueryResourceReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceReq.set_id)
  return set_id_;
}
void QueryResourceReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryResourceReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResourceRsp::kHeaderFieldNumber;
const int QueryResourceRsp::kRegionIdFieldNumber;
const int QueryResourceRsp::kSetIdFieldNumber;
const int QueryResourceRsp::kMachineListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResourceRsp::QueryResourceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryResourceRsp)
}
QueryResourceRsp::QueryResourceRsp(const QueryResourceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      machine_list_(from.machine_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryResourceRsp)
}

void QueryResourceRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

QueryResourceRsp::~QueryResourceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.QueryResourceRsp)
  SharedDtor();
}

void QueryResourceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryResourceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResourceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[22].descriptor;
}

const QueryResourceRsp& QueryResourceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryResourceRsp* QueryResourceRsp::New(::google::protobuf::Arena* arena) const {
  QueryResourceRsp* n = new QueryResourceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryResourceRsp)
  machine_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool QueryResourceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryResourceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.MachineInfo machine_list = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_machine_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryResourceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryResourceRsp)
  return false;
#undef DO_
}

void QueryResourceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // repeated .masterproto.MachineInfo machine_list = 4;
  for (unsigned int i = 0, n = this->machine_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->machine_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryResourceRsp)
}

::google::protobuf::uint8* QueryResourceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryResourceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // repeated .masterproto.MachineInfo machine_list = 4;
  for (unsigned int i = 0, n = this->machine_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->machine_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryResourceRsp)
  return target;
}

size_t QueryResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryResourceRsp)
  size_t total_size = 0;

  // repeated .masterproto.MachineInfo machine_list = 4;
  {
    unsigned int count = this->machine_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_list(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResourceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResourceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryResourceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryResourceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryResourceRsp)
    MergeFrom(*source);
  }
}

void QueryResourceRsp::MergeFrom(const QueryResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_list_.MergeFrom(from.machine_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void QueryResourceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResourceRsp::CopyFrom(const QueryResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResourceRsp::IsInitialized() const {
  return true;
}

void QueryResourceRsp::Swap(QueryResourceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResourceRsp::InternalSwap(QueryResourceRsp* other) {
  machine_list_.UnsafeArenaSwap(&other->machine_list_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryResourceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryResourceRsp

// .cmongoproto.ResHeader header = 1;
bool QueryResourceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryResourceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& QueryResourceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* QueryResourceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryResourceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* QueryResourceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryResourceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryResourceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryResourceRsp.header)
}

// int32 region_id = 2;
void QueryResourceRsp::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 QueryResourceRsp::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceRsp.region_id)
  return region_id_;
}
void QueryResourceRsp::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryResourceRsp.region_id)
}

// int32 set_id = 3;
void QueryResourceRsp::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 QueryResourceRsp::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceRsp.set_id)
  return set_id_;
}
void QueryResourceRsp::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryResourceRsp.set_id)
}

// repeated .masterproto.MachineInfo machine_list = 4;
int QueryResourceRsp::machine_list_size() const {
  return machine_list_.size();
}
void QueryResourceRsp::clear_machine_list() {
  machine_list_.Clear();
}
const ::masterproto::MachineInfo& QueryResourceRsp::machine_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.QueryResourceRsp.machine_list)
  return machine_list_.Get(index);
}
::masterproto::MachineInfo* QueryResourceRsp::mutable_machine_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.QueryResourceRsp.machine_list)
  return machine_list_.Mutable(index);
}
::masterproto::MachineInfo* QueryResourceRsp::add_machine_list() {
  // @@protoc_insertion_point(field_add:masterproto.QueryResourceRsp.machine_list)
  return machine_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::MachineInfo >*
QueryResourceRsp::mutable_machine_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.QueryResourceRsp.machine_list)
  return &machine_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::MachineInfo >&
QueryResourceRsp::machine_list() const {
  // @@protoc_insertion_point(field_list:masterproto.QueryResourceRsp.machine_list)
  return machine_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateContainerReq::kHeaderFieldNumber;
const int MigrateContainerReq::kClusterIdFieldNumber;
const int MigrateContainerReq::kMachineIpFieldNumber;
const int MigrateContainerReq::kContainerIdFieldNumber;
const int MigrateContainerReq::kContainerPortFieldNumber;
const int MigrateContainerReq::kQuotaFieldNumber;
const int MigrateContainerReq::kDestIpFieldNumber;
const int MigrateContainerReq::kCloseCgroupFieldNumber;
const int MigrateContainerReq::kMachineTypeFieldNumber;
const int MigrateContainerReq::kProxyVersionFieldNumber;
const int MigrateContainerReq::kMongodSubversionFieldNumber;
const int MigrateContainerReq::kDynamoProxyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateContainerReq::MigrateContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateContainerReq)
}
MigrateContainerReq::MigrateContainerReq(const MigrateContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_ip().size() > 0) {
    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&container_id_, &from.container_id_,
    reinterpret_cast<char*>(&machine_type_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(machine_type_));
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateContainerReq)
}

void MigrateContainerReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&machine_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(machine_type_));
  _cached_size_ = 0;
}

MigrateContainerReq::~MigrateContainerReq() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateContainerReq)
  SharedDtor();
}

void MigrateContainerReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void MigrateContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateContainerReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[23].descriptor;
}

const MigrateContainerReq& MigrateContainerReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateContainerReq* MigrateContainerReq::New(::google::protobuf::Arena* arena) const {
  MigrateContainerReq* n = new MigrateContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateContainerReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&container_id_, 0, reinterpret_cast<char*>(&machine_type_) -
    reinterpret_cast<char*>(&container_id_) + sizeof(machine_type_));
}

bool MigrateContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 container_port = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_ip = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_ip().data(), this->dest_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.dest_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_cgroup = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_cgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateContainerReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateContainerReq)
  return false;
#undef DO_
}

void MigrateContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string machine_ip = 3;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_ip(), output);
  }

  // int32 container_id = 4;
  if (this->container_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->container_id(), output);
  }

  // int32 container_port = 5;
  if (this->container_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->container_port(), output);
  }

  // .cmongoproto.ResourceDesc quota = 6;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->quota_, output);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.dest_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dest_ip(), output);
  }

  // int32 close_cgroup = 8;
  if (this->close_cgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->close_cgroup(), output);
  }

  // .masterproto.MachineType machine_type = 9;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->machine_type(), output);
  }

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->proxy_version(), output);
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->dynamo_proxy_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateContainerReq)
}

::google::protobuf::uint8* MigrateContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string machine_ip = 3;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_ip(), target);
  }

  // int32 container_id = 4;
  if (this->container_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->container_id(), target);
  }

  // int32 container_port = 5;
  if (this->container_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->container_port(), target);
  }

  // .cmongoproto.ResourceDesc quota = 6;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->quota_, false, target);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.dest_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dest_ip(), target);
  }

  // int32 close_cgroup = 8;
  if (this->close_cgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->close_cgroup(), target);
  }

  // .masterproto.MachineType machine_type = 9;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->machine_type(), target);
  }

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->proxy_version(), target);
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateContainerReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->dynamo_proxy_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateContainerReq)
  return target;
}

size_t MigrateContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateContainerReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string machine_ip = 3;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_ip());
  }

  // string proxy_version = 18;
  if (this->proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 19;
  if (this->mongod_subversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 20;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 6;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // int32 container_id = 4;
  if (this->container_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_id());
  }

  // int32 container_port = 5;
  if (this->container_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->container_port());
  }

  // int32 close_cgroup = 8;
  if (this->close_cgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_cgroup());
  }

  // .masterproto.MachineType machine_type = 9;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateContainerReq)
    MergeFrom(*source);
  }
}

void MigrateContainerReq::MergeFrom(const MigrateContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.dest_ip().size() > 0) {

    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.container_id() != 0) {
    set_container_id(from.container_id());
  }
  if (from.container_port() != 0) {
    set_container_port(from.container_port());
  }
  if (from.close_cgroup() != 0) {
    set_close_cgroup(from.close_cgroup());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
}

void MigrateContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateContainerReq::CopyFrom(const MigrateContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateContainerReq::IsInitialized() const {
  return true;
}

void MigrateContainerReq::Swap(MigrateContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateContainerReq::InternalSwap(MigrateContainerReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  machine_ip_.Swap(&other->machine_ip_);
  dest_ip_.Swap(&other->dest_ip_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(container_id_, other->container_id_);
  std::swap(container_port_, other->container_port_);
  std::swap(close_cgroup_, other->close_cgroup_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateContainerReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateContainerReq

// .cmongoproto.ReqHeader header = 1;
bool MigrateContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& MigrateContainerReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* MigrateContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* MigrateContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.header)
}

// string cluster_id = 2;
void MigrateContainerReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void MigrateContainerReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.cluster_id)
}
#if LANG_CXX11
void MigrateContainerReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.cluster_id)
}
#endif
void MigrateContainerReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.cluster_id)
}
void MigrateContainerReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.cluster_id)
}
::std::string* MigrateContainerReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.cluster_id)
}

// string machine_ip = 3;
void MigrateContainerReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void MigrateContainerReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.machine_ip)
}
#if LANG_CXX11
void MigrateContainerReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.machine_ip)
}
#endif
void MigrateContainerReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.machine_ip)
}
void MigrateContainerReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.machine_ip)
}
::std::string* MigrateContainerReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.machine_ip)
}

// int32 container_id = 4;
void MigrateContainerReq::clear_container_id() {
  container_id_ = 0;
}
::google::protobuf::int32 MigrateContainerReq::container_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.container_id)
  return container_id_;
}
void MigrateContainerReq::set_container_id(::google::protobuf::int32 value) {
  
  container_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.container_id)
}

// int32 container_port = 5;
void MigrateContainerReq::clear_container_port() {
  container_port_ = 0;
}
::google::protobuf::int32 MigrateContainerReq::container_port() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.container_port)
  return container_port_;
}
void MigrateContainerReq::set_container_port(::google::protobuf::int32 value) {
  
  container_port_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.container_port)
}

// .cmongoproto.ResourceDesc quota = 6;
bool MigrateContainerReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void MigrateContainerReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& MigrateContainerReq::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* MigrateContainerReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* MigrateContainerReq::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void MigrateContainerReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.quota)
}

// string dest_ip = 7;
void MigrateContainerReq::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::dest_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.dest_ip)
  return dest_ip_.GetNoArena();
}
void MigrateContainerReq::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.dest_ip)
}
#if LANG_CXX11
void MigrateContainerReq::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.dest_ip)
}
#endif
void MigrateContainerReq::set_dest_ip(const char* value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.dest_ip)
}
void MigrateContainerReq::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.dest_ip)
}
::std::string* MigrateContainerReq::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_dest_ip() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.dest_ip)
}

// int32 close_cgroup = 8;
void MigrateContainerReq::clear_close_cgroup() {
  close_cgroup_ = 0;
}
::google::protobuf::int32 MigrateContainerReq::close_cgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.close_cgroup)
  return close_cgroup_;
}
void MigrateContainerReq::set_close_cgroup(::google::protobuf::int32 value) {
  
  close_cgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.close_cgroup)
}

// .masterproto.MachineType machine_type = 9;
void MigrateContainerReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType MigrateContainerReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void MigrateContainerReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.machine_type)
}

// string proxy_version = 18;
void MigrateContainerReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void MigrateContainerReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.proxy_version)
}
#if LANG_CXX11
void MigrateContainerReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.proxy_version)
}
#endif
void MigrateContainerReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.proxy_version)
}
void MigrateContainerReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.proxy_version)
}
::std::string* MigrateContainerReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.proxy_version)
}

// string mongod_subversion = 19;
void MigrateContainerReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void MigrateContainerReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.mongod_subversion)
}
#if LANG_CXX11
void MigrateContainerReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.mongod_subversion)
}
#endif
void MigrateContainerReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.mongod_subversion)
}
void MigrateContainerReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.mongod_subversion)
}
::std::string* MigrateContainerReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.mongod_subversion)
}

// string dynamo_proxy_version = 20;
void MigrateContainerReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateContainerReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void MigrateContainerReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateContainerReq.dynamo_proxy_version)
}
#if LANG_CXX11
void MigrateContainerReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateContainerReq.dynamo_proxy_version)
}
#endif
void MigrateContainerReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateContainerReq.dynamo_proxy_version)
}
void MigrateContainerReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateContainerReq.dynamo_proxy_version)
}
::std::string* MigrateContainerReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateContainerReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateContainerReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerReq.dynamo_proxy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateContainerRsp::kHeaderFieldNumber;
const int MigrateContainerRsp::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateContainerRsp::MigrateContainerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateContainerRsp)
}
MigrateContainerRsp::MigrateContainerRsp(const MigrateContainerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_container()) {
    container_ = new ::masterproto::ContainerInfo(*from.container_);
  } else {
    container_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateContainerRsp)
}

void MigrateContainerRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_));
  _cached_size_ = 0;
}

MigrateContainerRsp::~MigrateContainerRsp() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateContainerRsp)
  SharedDtor();
}

void MigrateContainerRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete container_;
  }
}

void MigrateContainerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateContainerRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[24].descriptor;
}

const MigrateContainerRsp& MigrateContainerRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateContainerRsp* MigrateContainerRsp::New(::google::protobuf::Arena* arena) const {
  MigrateContainerRsp* n = new MigrateContainerRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateContainerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateContainerRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && container_ != NULL) {
    delete container_;
  }
  container_ = NULL;
}

bool MigrateContainerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateContainerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ContainerInfo container = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateContainerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateContainerRsp)
  return false;
#undef DO_
}

void MigrateContainerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->container_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateContainerRsp)
}

::google::protobuf::uint8* MigrateContainerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->container_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateContainerRsp)
  return target;
}

size_t MigrateContainerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateContainerRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateContainerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateContainerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateContainerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateContainerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateContainerRsp)
    MergeFrom(*source);
  }
}

void MigrateContainerRsp::MergeFrom(const MigrateContainerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_container()) {
    mutable_container()->::masterproto::ContainerInfo::MergeFrom(from.container());
  }
}

void MigrateContainerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateContainerRsp::CopyFrom(const MigrateContainerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateContainerRsp::IsInitialized() const {
  return true;
}

void MigrateContainerRsp::Swap(MigrateContainerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateContainerRsp::InternalSwap(MigrateContainerRsp* other) {
  std::swap(header_, other->header_);
  std::swap(container_, other->container_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateContainerRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateContainerRsp

// .cmongoproto.ResHeader header = 1;
bool MigrateContainerRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateContainerRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& MigrateContainerRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* MigrateContainerRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerRsp.header)
  return header_;
}
::cmongoproto::ResHeader* MigrateContainerRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateContainerRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerRsp.header)
}

// .masterproto.ContainerInfo container = 2;
bool MigrateContainerRsp::has_container() const {
  return this != internal_default_instance() && container_ != NULL;
}
void MigrateContainerRsp::clear_container() {
  if (GetArenaNoVirtual() == NULL && container_ != NULL) delete container_;
  container_ = NULL;
}
const ::masterproto::ContainerInfo& MigrateContainerRsp::container() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateContainerRsp.container)
  return container_ != NULL ? *container_
                         : *::masterproto::ContainerInfo::internal_default_instance();
}
::masterproto::ContainerInfo* MigrateContainerRsp::mutable_container() {
  
  if (container_ == NULL) {
    container_ = new ::masterproto::ContainerInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateContainerRsp.container)
  return container_;
}
::masterproto::ContainerInfo* MigrateContainerRsp::release_container() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateContainerRsp.container)
  
  ::masterproto::ContainerInfo* temp = container_;
  container_ = NULL;
  return temp;
}
void MigrateContainerRsp::set_allocated_container(::masterproto::ContainerInfo* container) {
  delete container_;
  container_ = container;
  if (container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateContainerRsp.container)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContainerReq::kHeaderFieldNumber;
const int AddContainerReq::kClusterIdFieldNumber;
const int AddContainerReq::kRsNameFieldNumber;
const int AddContainerReq::kMachineTypeFieldNumber;
const int AddContainerReq::kQuotaFieldNumber;
const int AddContainerReq::kCloseCgroupFieldNumber;
const int AddContainerReq::kDestIpFieldNumber;
const int AddContainerReq::kContainerTypeFieldNumber;
const int AddContainerReq::kProxyVersionFieldNumber;
const int AddContainerReq::kMongodSubversionFieldNumber;
const int AddContainerReq::kDynamoProxyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContainerReq::AddContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddContainerReq)
}
AddContainerReq::AddContainerReq(const AddContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_ip().size() > 0) {
    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&machine_type_, &from.machine_type_,
    reinterpret_cast<char*>(&container_type_) -
    reinterpret_cast<char*>(&machine_type_) + sizeof(container_type_));
  // @@protoc_insertion_point(copy_constructor:masterproto.AddContainerReq)
}

void AddContainerReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_type_));
  _cached_size_ = 0;
}

AddContainerReq::~AddContainerReq() {
  // @@protoc_insertion_point(destructor:masterproto.AddContainerReq)
  SharedDtor();
}

void AddContainerReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void AddContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContainerReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[25].descriptor;
}

const AddContainerReq& AddContainerReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContainerReq* AddContainerReq::New(::google::protobuf::Arena* arena) const {
  AddContainerReq* n = new AddContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddContainerReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&machine_type_, 0, reinterpret_cast<char*>(&container_type_) -
    reinterpret_cast<char*>(&machine_type_) + sizeof(container_type_));
}

bool AddContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_cgroup = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_cgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_ip = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_ip().data(), this->dest_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.dest_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddContainerReq)
  return false;
#undef DO_
}

void AddContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rs_name(), output);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->machine_type(), output);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->quota_, output);
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close_cgroup(), output);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.dest_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dest_ip(), output);
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->container_type(), output);
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->proxy_version(), output);
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dynamo_proxy_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddContainerReq)
}

::google::protobuf::uint8* AddContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rs_name(), target);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->machine_type(), target);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->quota_, false, target);
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close_cgroup(), target);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.dest_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dest_ip(), target);
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->container_type(), target);
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->proxy_version(), target);
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dynamo_proxy_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddContainerReq)
  return target;
}

size_t AddContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddContainerReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_ip());
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_cgroup());
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddContainerReq)
    MergeFrom(*source);
  }
}

void AddContainerReq::MergeFrom(const AddContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.dest_ip().size() > 0) {

    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.close_cgroup() != 0) {
    set_close_cgroup(from.close_cgroup());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
}

void AddContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContainerReq::CopyFrom(const AddContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContainerReq::IsInitialized() const {
  return true;
}

void AddContainerReq::Swap(AddContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContainerReq::InternalSwap(AddContainerReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  rs_name_.Swap(&other->rs_name_);
  dest_ip_.Swap(&other->dest_ip_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(close_cgroup_, other->close_cgroup_);
  std::swap(container_type_, other->container_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContainerReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContainerReq

// .cmongoproto.ReqHeader header = 1;
bool AddContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& AddContainerReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* AddContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* AddContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.header)
}

// string cluster_id = 2;
void AddContainerReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void AddContainerReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.cluster_id)
}
#if LANG_CXX11
void AddContainerReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.cluster_id)
}
#endif
void AddContainerReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.cluster_id)
}
void AddContainerReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.cluster_id)
}
::std::string* AddContainerReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.cluster_id)
}

// string rs_name = 3;
void AddContainerReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.rs_name)
  return rs_name_.GetNoArena();
}
void AddContainerReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.rs_name)
}
#if LANG_CXX11
void AddContainerReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.rs_name)
}
#endif
void AddContainerReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.rs_name)
}
void AddContainerReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.rs_name)
}
::std::string* AddContainerReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.rs_name)
}

// .masterproto.MachineType machine_type = 4;
void AddContainerReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType AddContainerReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void AddContainerReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.machine_type)
}

// .cmongoproto.ResourceDesc quota = 5;
bool AddContainerReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void AddContainerReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& AddContainerReq::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* AddContainerReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* AddContainerReq::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void AddContainerReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.quota)
}

// int32 close_cgroup = 6;
void AddContainerReq::clear_close_cgroup() {
  close_cgroup_ = 0;
}
::google::protobuf::int32 AddContainerReq::close_cgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.close_cgroup)
  return close_cgroup_;
}
void AddContainerReq::set_close_cgroup(::google::protobuf::int32 value) {
  
  close_cgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.close_cgroup)
}

// string dest_ip = 7;
void AddContainerReq::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::dest_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.dest_ip)
  return dest_ip_.GetNoArena();
}
void AddContainerReq::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.dest_ip)
}
#if LANG_CXX11
void AddContainerReq::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.dest_ip)
}
#endif
void AddContainerReq::set_dest_ip(const char* value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.dest_ip)
}
void AddContainerReq::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.dest_ip)
}
::std::string* AddContainerReq::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_dest_ip() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.dest_ip)
}

// .cmongoproto.MongoType container_type = 8;
void AddContainerReq::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType AddContainerReq::container_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void AddContainerReq::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.container_type)
}

// string proxy_version = 9;
void AddContainerReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void AddContainerReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.proxy_version)
}
#if LANG_CXX11
void AddContainerReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.proxy_version)
}
#endif
void AddContainerReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.proxy_version)
}
void AddContainerReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.proxy_version)
}
::std::string* AddContainerReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.proxy_version)
}

// string mongod_subversion = 10;
void AddContainerReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void AddContainerReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.mongod_subversion)
}
#if LANG_CXX11
void AddContainerReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.mongod_subversion)
}
#endif
void AddContainerReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.mongod_subversion)
}
void AddContainerReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.mongod_subversion)
}
::std::string* AddContainerReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.mongod_subversion)
}

// string dynamo_proxy_version = 11;
void AddContainerReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void AddContainerReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerReq.dynamo_proxy_version)
}
#if LANG_CXX11
void AddContainerReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerReq.dynamo_proxy_version)
}
#endif
void AddContainerReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerReq.dynamo_proxy_version)
}
void AddContainerReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerReq.dynamo_proxy_version)
}
::std::string* AddContainerReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerReq.dynamo_proxy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContainerRsp::kHeaderFieldNumber;
const int AddContainerRsp::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContainerRsp::AddContainerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddContainerRsp)
}
AddContainerRsp::AddContainerRsp(const AddContainerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_container()) {
    container_ = new ::masterproto::ContainerInfo(*from.container_);
  } else {
    container_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.AddContainerRsp)
}

void AddContainerRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_));
  _cached_size_ = 0;
}

AddContainerRsp::~AddContainerRsp() {
  // @@protoc_insertion_point(destructor:masterproto.AddContainerRsp)
  SharedDtor();
}

void AddContainerRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete container_;
  }
}

void AddContainerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContainerRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[26].descriptor;
}

const AddContainerRsp& AddContainerRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContainerRsp* AddContainerRsp::New(::google::protobuf::Arena* arena) const {
  AddContainerRsp* n = new AddContainerRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContainerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddContainerRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && container_ != NULL) {
    delete container_;
  }
  container_ = NULL;
}

bool AddContainerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddContainerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ContainerInfo container = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddContainerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddContainerRsp)
  return false;
#undef DO_
}

void AddContainerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->container_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddContainerRsp)
}

::google::protobuf::uint8* AddContainerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->container_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddContainerRsp)
  return target;
}

size_t AddContainerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddContainerRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ContainerInfo container = 2;
  if (this->has_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContainerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContainerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContainerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddContainerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddContainerRsp)
    MergeFrom(*source);
  }
}

void AddContainerRsp::MergeFrom(const AddContainerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_container()) {
    mutable_container()->::masterproto::ContainerInfo::MergeFrom(from.container());
  }
}

void AddContainerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContainerRsp::CopyFrom(const AddContainerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContainerRsp::IsInitialized() const {
  return true;
}

void AddContainerRsp::Swap(AddContainerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContainerRsp::InternalSwap(AddContainerRsp* other) {
  std::swap(header_, other->header_);
  std::swap(container_, other->container_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContainerRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContainerRsp

// .cmongoproto.ResHeader header = 1;
bool AddContainerRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddContainerRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& AddContainerRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* AddContainerRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerRsp.header)
  return header_;
}
::cmongoproto::ResHeader* AddContainerRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddContainerRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerRsp.header)
}

// .masterproto.ContainerInfo container = 2;
bool AddContainerRsp::has_container() const {
  return this != internal_default_instance() && container_ != NULL;
}
void AddContainerRsp::clear_container() {
  if (GetArenaNoVirtual() == NULL && container_ != NULL) delete container_;
  container_ = NULL;
}
const ::masterproto::ContainerInfo& AddContainerRsp::container() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerRsp.container)
  return container_ != NULL ? *container_
                         : *::masterproto::ContainerInfo::internal_default_instance();
}
::masterproto::ContainerInfo* AddContainerRsp::mutable_container() {
  
  if (container_ == NULL) {
    container_ = new ::masterproto::ContainerInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerRsp.container)
  return container_;
}
::masterproto::ContainerInfo* AddContainerRsp::release_container() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerRsp.container)
  
  ::masterproto::ContainerInfo* temp = container_;
  container_ = NULL;
  return temp;
}
void AddContainerRsp::set_allocated_container(::masterproto::ContainerInfo* container) {
  delete container_;
  container_ = container;
  if (container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerRsp.container)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContainerReq::kHeaderFieldNumber;
const int DelContainerReq::kClusterIdFieldNumber;
const int DelContainerReq::kRsNameFieldNumber;
const int DelContainerReq::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContainerReq::DelContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelContainerReq)
}
DelContainerReq::DelContainerReq(const DelContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_container()) {
    container_ = new ::masterproto::ContainerInfo(*from.container_);
  } else {
    container_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelContainerReq)
}

void DelContainerReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_));
  _cached_size_ = 0;
}

DelContainerReq::~DelContainerReq() {
  // @@protoc_insertion_point(destructor:masterproto.DelContainerReq)
  SharedDtor();
}

void DelContainerReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete container_;
  }
}

void DelContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContainerReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[27].descriptor;
}

const DelContainerReq& DelContainerReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContainerReq* DelContainerReq::New(::google::protobuf::Arena* arena) const {
  DelContainerReq* n = new DelContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelContainerReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && container_ != NULL) {
    delete container_;
  }
  container_ = NULL;
}

bool DelContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelContainerReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelContainerReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ContainerInfo container = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelContainerReq)
  return false;
#undef DO_
}

void DelContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelContainerReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelContainerReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rs_name(), output);
  }

  // .masterproto.ContainerInfo container = 4;
  if (this->has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->container_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelContainerReq)
}

::google::protobuf::uint8* DelContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelContainerReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelContainerReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rs_name(), target);
  }

  // .masterproto.ContainerInfo container = 4;
  if (this->has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->container_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelContainerReq)
  return target;
}

size_t DelContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelContainerReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ContainerInfo container = 4;
  if (this->has_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelContainerReq)
    MergeFrom(*source);
  }
}

void DelContainerReq::MergeFrom(const DelContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_container()) {
    mutable_container()->::masterproto::ContainerInfo::MergeFrom(from.container());
  }
}

void DelContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContainerReq::CopyFrom(const DelContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContainerReq::IsInitialized() const {
  return true;
}

void DelContainerReq::Swap(DelContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContainerReq::InternalSwap(DelContainerReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  rs_name_.Swap(&other->rs_name_);
  std::swap(header_, other->header_);
  std::swap(container_, other->container_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContainerReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContainerReq

// .cmongoproto.ReqHeader header = 1;
bool DelContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DelContainerReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DelContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DelContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelContainerReq.header)
}

// string cluster_id = 2;
void DelContainerReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelContainerReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelContainerReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DelContainerReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelContainerReq.cluster_id)
}
#if LANG_CXX11
void DelContainerReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelContainerReq.cluster_id)
}
#endif
void DelContainerReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelContainerReq.cluster_id)
}
void DelContainerReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelContainerReq.cluster_id)
}
::std::string* DelContainerReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelContainerReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelContainerReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DelContainerReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelContainerReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelContainerReq.cluster_id)
}

// string rs_name = 3;
void DelContainerReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelContainerReq::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.DelContainerReq.rs_name)
  return rs_name_.GetNoArena();
}
void DelContainerReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelContainerReq.rs_name)
}
#if LANG_CXX11
void DelContainerReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelContainerReq.rs_name)
}
#endif
void DelContainerReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelContainerReq.rs_name)
}
void DelContainerReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelContainerReq.rs_name)
}
::std::string* DelContainerReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelContainerReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelContainerReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.DelContainerReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelContainerReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelContainerReq.rs_name)
}

// .masterproto.ContainerInfo container = 4;
bool DelContainerReq::has_container() const {
  return this != internal_default_instance() && container_ != NULL;
}
void DelContainerReq::clear_container() {
  if (GetArenaNoVirtual() == NULL && container_ != NULL) delete container_;
  container_ = NULL;
}
const ::masterproto::ContainerInfo& DelContainerReq::container() const {
  // @@protoc_insertion_point(field_get:masterproto.DelContainerReq.container)
  return container_ != NULL ? *container_
                         : *::masterproto::ContainerInfo::internal_default_instance();
}
::masterproto::ContainerInfo* DelContainerReq::mutable_container() {
  
  if (container_ == NULL) {
    container_ = new ::masterproto::ContainerInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelContainerReq.container)
  return container_;
}
::masterproto::ContainerInfo* DelContainerReq::release_container() {
  // @@protoc_insertion_point(field_release:masterproto.DelContainerReq.container)
  
  ::masterproto::ContainerInfo* temp = container_;
  container_ = NULL;
  return temp;
}
void DelContainerReq::set_allocated_container(::masterproto::ContainerInfo* container) {
  delete container_;
  container_ = container;
  if (container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelContainerReq.container)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelContainerRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelContainerRsp::DelContainerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelContainerRsp)
}
DelContainerRsp::DelContainerRsp(const DelContainerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelContainerRsp)
}

void DelContainerRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelContainerRsp::~DelContainerRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DelContainerRsp)
  SharedDtor();
}

void DelContainerRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelContainerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelContainerRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[28].descriptor;
}

const DelContainerRsp& DelContainerRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelContainerRsp* DelContainerRsp::New(::google::protobuf::Arena* arena) const {
  DelContainerRsp* n = new DelContainerRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelContainerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelContainerRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DelContainerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelContainerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelContainerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelContainerRsp)
  return false;
#undef DO_
}

void DelContainerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelContainerRsp)
}

::google::protobuf::uint8* DelContainerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelContainerRsp)
  return target;
}

size_t DelContainerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelContainerRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelContainerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelContainerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelContainerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelContainerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelContainerRsp)
    MergeFrom(*source);
  }
}

void DelContainerRsp::MergeFrom(const DelContainerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DelContainerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelContainerRsp::CopyFrom(const DelContainerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelContainerRsp::IsInitialized() const {
  return true;
}

void DelContainerRsp::Swap(DelContainerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelContainerRsp::InternalSwap(DelContainerRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelContainerRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelContainerRsp

// .cmongoproto.ResHeader header = 1;
bool DelContainerRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelContainerRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DelContainerRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelContainerRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DelContainerRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelContainerRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DelContainerRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelContainerRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelContainerRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelContainerRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContainerAsyncReq::kHeaderFieldNumber;
const int AddContainerAsyncReq::kClusterIdFieldNumber;
const int AddContainerAsyncReq::kRsNameFieldNumber;
const int AddContainerAsyncReq::kMachineTypeFieldNumber;
const int AddContainerAsyncReq::kQuotaFieldNumber;
const int AddContainerAsyncReq::kCloseCgroupFieldNumber;
const int AddContainerAsyncReq::kDestIpFieldNumber;
const int AddContainerAsyncReq::kContainerTypeFieldNumber;
const int AddContainerAsyncReq::kProxyVersionFieldNumber;
const int AddContainerAsyncReq::kMongodSubversionFieldNumber;
const int AddContainerAsyncReq::kDynamoProxyVersionFieldNumber;
const int AddContainerAsyncReq::kJobIdFieldNumber;
const int AddContainerAsyncReq::kJobTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContainerAsyncReq::AddContainerAsyncReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddContainerAsyncReq)
}
AddContainerAsyncReq::AddContainerAsyncReq(const AddContainerAsyncReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_ip().size() > 0) {
    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&machine_type_, &from.machine_type_,
    reinterpret_cast<char*>(&job_id_) -
    reinterpret_cast<char*>(&machine_type_) + sizeof(job_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.AddContainerAsyncReq)
}

void AddContainerAsyncReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_id_));
  _cached_size_ = 0;
}

AddContainerAsyncReq::~AddContainerAsyncReq() {
  // @@protoc_insertion_point(destructor:masterproto.AddContainerAsyncReq)
  SharedDtor();
}

void AddContainerAsyncReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void AddContainerAsyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContainerAsyncReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[29].descriptor;
}

const AddContainerAsyncReq& AddContainerAsyncReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContainerAsyncReq* AddContainerAsyncReq::New(::google::protobuf::Arena* arena) const {
  AddContainerAsyncReq* n = new AddContainerAsyncReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContainerAsyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddContainerAsyncReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&machine_type_, 0, reinterpret_cast<char*>(&job_id_) -
    reinterpret_cast<char*>(&machine_type_) + sizeof(job_id_));
}

bool AddContainerAsyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddContainerAsyncReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_cgroup = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_cgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_ip = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_ip().data(), this->dest_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.dest_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddContainerAsyncReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 13;
      case 13: {
        if (tag == 104u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddContainerAsyncReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddContainerAsyncReq)
  return false;
#undef DO_
}

void AddContainerAsyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddContainerAsyncReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rs_name(), output);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->machine_type(), output);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->quota_, output);
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close_cgroup(), output);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.dest_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dest_ip(), output);
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->container_type(), output);
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->proxy_version(), output);
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dynamo_proxy_version(), output);
  }

  // int64 job_id = 12;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->job_id(), output);
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->job_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddContainerAsyncReq)
}

::google::protobuf::uint8* AddContainerAsyncReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddContainerAsyncReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rs_name(), target);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->machine_type(), target);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->quota_, false, target);
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close_cgroup(), target);
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.dest_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dest_ip(), target);
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->container_type(), target);
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->proxy_version(), target);
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddContainerAsyncReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dynamo_proxy_version(), target);
  }

  // int64 job_id = 12;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->job_id(), target);
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->job_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddContainerAsyncReq)
  return target;
}

size_t AddContainerAsyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddContainerAsyncReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string rs_name = 3;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // string dest_ip = 7;
  if (this->dest_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_ip());
  }

  // string proxy_version = 9;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 10;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 11;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 5;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // .masterproto.MachineType machine_type = 4;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 close_cgroup = 6;
  if (this->close_cgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_cgroup());
  }

  // .cmongoproto.MongoType container_type = 8;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int64 job_id = 12;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContainerAsyncReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddContainerAsyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContainerAsyncReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContainerAsyncReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddContainerAsyncReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddContainerAsyncReq)
    MergeFrom(*source);
  }
}

void AddContainerAsyncReq::MergeFrom(const AddContainerAsyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddContainerAsyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.dest_ip().size() > 0) {

    dest_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_ip_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.close_cgroup() != 0) {
    set_close_cgroup(from.close_cgroup());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
}

void AddContainerAsyncReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddContainerAsyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContainerAsyncReq::CopyFrom(const AddContainerAsyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddContainerAsyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContainerAsyncReq::IsInitialized() const {
  return true;
}

void AddContainerAsyncReq::Swap(AddContainerAsyncReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContainerAsyncReq::InternalSwap(AddContainerAsyncReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  rs_name_.Swap(&other->rs_name_);
  dest_ip_.Swap(&other->dest_ip_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(close_cgroup_, other->close_cgroup_);
  std::swap(container_type_, other->container_type_);
  std::swap(job_type_, other->job_type_);
  std::swap(job_id_, other->job_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContainerAsyncReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContainerAsyncReq

// .cmongoproto.ReqHeader header = 1;
bool AddContainerAsyncReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddContainerAsyncReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& AddContainerAsyncReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* AddContainerAsyncReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.header)
  return header_;
}
::cmongoproto::ReqHeader* AddContainerAsyncReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddContainerAsyncReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.header)
}

// string cluster_id = 2;
void AddContainerAsyncReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void AddContainerAsyncReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.cluster_id)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.cluster_id)
}
#endif
void AddContainerAsyncReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.cluster_id)
}
void AddContainerAsyncReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.cluster_id)
}
::std::string* AddContainerAsyncReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.cluster_id)
}

// string rs_name = 3;
void AddContainerAsyncReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.rs_name)
  return rs_name_.GetNoArena();
}
void AddContainerAsyncReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.rs_name)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.rs_name)
}
#endif
void AddContainerAsyncReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.rs_name)
}
void AddContainerAsyncReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.rs_name)
}
::std::string* AddContainerAsyncReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.rs_name)
}

// .masterproto.MachineType machine_type = 4;
void AddContainerAsyncReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType AddContainerAsyncReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void AddContainerAsyncReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.machine_type)
}

// .cmongoproto.ResourceDesc quota = 5;
bool AddContainerAsyncReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void AddContainerAsyncReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& AddContainerAsyncReq::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* AddContainerAsyncReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* AddContainerAsyncReq::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void AddContainerAsyncReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.quota)
}

// int32 close_cgroup = 6;
void AddContainerAsyncReq::clear_close_cgroup() {
  close_cgroup_ = 0;
}
::google::protobuf::int32 AddContainerAsyncReq::close_cgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.close_cgroup)
  return close_cgroup_;
}
void AddContainerAsyncReq::set_close_cgroup(::google::protobuf::int32 value) {
  
  close_cgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.close_cgroup)
}

// string dest_ip = 7;
void AddContainerAsyncReq::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::dest_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.dest_ip)
  return dest_ip_.GetNoArena();
}
void AddContainerAsyncReq::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.dest_ip)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.dest_ip)
}
#endif
void AddContainerAsyncReq::set_dest_ip(const char* value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.dest_ip)
}
void AddContainerAsyncReq::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.dest_ip)
}
::std::string* AddContainerAsyncReq::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_dest_ip() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.dest_ip)
}

// .cmongoproto.MongoType container_type = 8;
void AddContainerAsyncReq::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType AddContainerAsyncReq::container_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void AddContainerAsyncReq::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.container_type)
}

// string proxy_version = 9;
void AddContainerAsyncReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void AddContainerAsyncReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.proxy_version)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.proxy_version)
}
#endif
void AddContainerAsyncReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.proxy_version)
}
void AddContainerAsyncReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.proxy_version)
}
::std::string* AddContainerAsyncReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.proxy_version)
}

// string mongod_subversion = 10;
void AddContainerAsyncReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void AddContainerAsyncReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.mongod_subversion)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.mongod_subversion)
}
#endif
void AddContainerAsyncReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.mongod_subversion)
}
void AddContainerAsyncReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.mongod_subversion)
}
::std::string* AddContainerAsyncReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.mongod_subversion)
}

// string dynamo_proxy_version = 11;
void AddContainerAsyncReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddContainerAsyncReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void AddContainerAsyncReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
}
#if LANG_CXX11
void AddContainerAsyncReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
}
#endif
void AddContainerAsyncReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
}
void AddContainerAsyncReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
}
::std::string* AddContainerAsyncReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddContainerAsyncReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddContainerAsyncReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncReq.dynamo_proxy_version)
}

// int64 job_id = 12;
void AddContainerAsyncReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AddContainerAsyncReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.job_id)
  return job_id_;
}
void AddContainerAsyncReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.job_id)
}

// .masterproto.JobType job_type = 13;
void AddContainerAsyncReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType AddContainerAsyncReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void AddContainerAsyncReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddContainerAsyncReq.job_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddContainerAsyncRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddContainerAsyncRsp::AddContainerAsyncRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddContainerAsyncRsp)
}
AddContainerAsyncRsp::AddContainerAsyncRsp(const AddContainerAsyncRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.AddContainerAsyncRsp)
}

void AddContainerAsyncRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AddContainerAsyncRsp::~AddContainerAsyncRsp() {
  // @@protoc_insertion_point(destructor:masterproto.AddContainerAsyncRsp)
  SharedDtor();
}

void AddContainerAsyncRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AddContainerAsyncRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContainerAsyncRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[30].descriptor;
}

const AddContainerAsyncRsp& AddContainerAsyncRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddContainerAsyncRsp* AddContainerAsyncRsp::New(::google::protobuf::Arena* arena) const {
  AddContainerAsyncRsp* n = new AddContainerAsyncRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddContainerAsyncRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddContainerAsyncRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AddContainerAsyncRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddContainerAsyncRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddContainerAsyncRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddContainerAsyncRsp)
  return false;
#undef DO_
}

void AddContainerAsyncRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddContainerAsyncRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddContainerAsyncRsp)
}

::google::protobuf::uint8* AddContainerAsyncRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddContainerAsyncRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddContainerAsyncRsp)
  return target;
}

size_t AddContainerAsyncRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddContainerAsyncRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContainerAsyncRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddContainerAsyncRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddContainerAsyncRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddContainerAsyncRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddContainerAsyncRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddContainerAsyncRsp)
    MergeFrom(*source);
  }
}

void AddContainerAsyncRsp::MergeFrom(const AddContainerAsyncRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddContainerAsyncRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void AddContainerAsyncRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddContainerAsyncRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContainerAsyncRsp::CopyFrom(const AddContainerAsyncRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddContainerAsyncRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContainerAsyncRsp::IsInitialized() const {
  return true;
}

void AddContainerAsyncRsp::Swap(AddContainerAsyncRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddContainerAsyncRsp::InternalSwap(AddContainerAsyncRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddContainerAsyncRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddContainerAsyncRsp

// .cmongoproto.ResHeader header = 1;
bool AddContainerAsyncRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddContainerAsyncRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& AddContainerAsyncRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddContainerAsyncRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* AddContainerAsyncRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddContainerAsyncRsp.header)
  return header_;
}
::cmongoproto::ResHeader* AddContainerAsyncRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddContainerAsyncRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddContainerAsyncRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddContainerAsyncRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateMachineReq::kHeaderFieldNumber;
const int MigrateMachineReq::kMachineIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateMachineReq::MigrateMachineReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateMachineReq)
}
MigrateMachineReq::MigrateMachineReq(const MigrateMachineReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_ip().size() > 0) {
    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateMachineReq)
}

void MigrateMachineReq::SharedCtor() {
  machine_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

MigrateMachineReq::~MigrateMachineReq() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateMachineReq)
  SharedDtor();
}

void MigrateMachineReq::SharedDtor() {
  machine_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MigrateMachineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateMachineReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[31].descriptor;
}

const MigrateMachineReq& MigrateMachineReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateMachineReq* MigrateMachineReq::New(::google::protobuf::Arena* arena) const {
  MigrateMachineReq* n = new MigrateMachineReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateMachineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateMachineReq)
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MigrateMachineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateMachineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateMachineReq.machine_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateMachineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateMachineReq)
  return false;
#undef DO_
}

void MigrateMachineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateMachineReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateMachineReq.machine_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateMachineReq)
}

::google::protobuf::uint8* MigrateMachineReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateMachineReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateMachineReq.machine_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateMachineReq)
  return target;
}

size_t MigrateMachineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateMachineReq)
  size_t total_size = 0;

  // string machine_ip = 2;
  if (this->machine_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_ip());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateMachineReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateMachineReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateMachineReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateMachineReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateMachineReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateMachineReq)
    MergeFrom(*source);
  }
}

void MigrateMachineReq::MergeFrom(const MigrateMachineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateMachineReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.machine_ip().size() > 0) {

    machine_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_ip_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void MigrateMachineReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateMachineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateMachineReq::CopyFrom(const MigrateMachineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateMachineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateMachineReq::IsInitialized() const {
  return true;
}

void MigrateMachineReq::Swap(MigrateMachineReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateMachineReq::InternalSwap(MigrateMachineReq* other) {
  machine_ip_.Swap(&other->machine_ip_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateMachineReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateMachineReq

// .cmongoproto.ReqHeader header = 1;
bool MigrateMachineReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateMachineReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& MigrateMachineReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* MigrateMachineReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineReq.header)
  return header_;
}
::cmongoproto::ReqHeader* MigrateMachineReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateMachineReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateMachineReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateMachineReq.header)
}

// string machine_ip = 2;
void MigrateMachineReq::clear_machine_ip() {
  machine_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateMachineReq::machine_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineReq.machine_ip)
  return machine_ip_.GetNoArena();
}
void MigrateMachineReq::set_machine_ip(const ::std::string& value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateMachineReq.machine_ip)
}
#if LANG_CXX11
void MigrateMachineReq::set_machine_ip(::std::string&& value) {
  
  machine_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateMachineReq.machine_ip)
}
#endif
void MigrateMachineReq::set_machine_ip(const char* value) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateMachineReq.machine_ip)
}
void MigrateMachineReq::set_machine_ip(const char* value, size_t size) {
  
  machine_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateMachineReq.machine_ip)
}
::std::string* MigrateMachineReq::mutable_machine_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineReq.machine_ip)
  return machine_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateMachineReq::release_machine_ip() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateMachineReq.machine_ip)
  
  return machine_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateMachineReq::set_allocated_machine_ip(::std::string* machine_ip) {
  if (machine_ip != NULL) {
    
  } else {
    
  }
  machine_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateMachineReq.machine_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerPair::kOldContainerFieldNumber;
const int ContainerPair::kNewContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerPair::ContainerPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ContainerPair)
}
ContainerPair::ContainerPair(const ContainerPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_container()) {
    old_container_ = new ::masterproto::ContainerInfo(*from.old_container_);
  } else {
    old_container_ = NULL;
  }
  if (from.has_new_container()) {
    new_container_ = new ::masterproto::ContainerInfo(*from.new_container_);
  } else {
    new_container_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ContainerPair)
}

void ContainerPair::SharedCtor() {
  ::memset(&old_container_, 0, reinterpret_cast<char*>(&new_container_) -
    reinterpret_cast<char*>(&old_container_) + sizeof(new_container_));
  _cached_size_ = 0;
}

ContainerPair::~ContainerPair() {
  // @@protoc_insertion_point(destructor:masterproto.ContainerPair)
  SharedDtor();
}

void ContainerPair::SharedDtor() {
  if (this != internal_default_instance()) {
    delete old_container_;
  }
  if (this != internal_default_instance()) {
    delete new_container_;
  }
}

void ContainerPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerPair::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[32].descriptor;
}

const ContainerPair& ContainerPair::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContainerPair* ContainerPair::New(::google::protobuf::Arena* arena) const {
  ContainerPair* n = new ContainerPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerPair::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ContainerPair)
  if (GetArenaNoVirtual() == NULL && old_container_ != NULL) {
    delete old_container_;
  }
  old_container_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_container_ != NULL) {
    delete new_container_;
  }
  new_container_ = NULL;
}

bool ContainerPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ContainerPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .masterproto.ContainerInfo old_container = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ContainerInfo new_container = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ContainerPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ContainerPair)
  return false;
#undef DO_
}

void ContainerPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ContainerPair)
  // .masterproto.ContainerInfo old_container = 1;
  if (this->has_old_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->old_container_, output);
  }

  // .masterproto.ContainerInfo new_container = 2;
  if (this->has_new_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_container_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ContainerPair)
}

::google::protobuf::uint8* ContainerPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ContainerPair)
  // .masterproto.ContainerInfo old_container = 1;
  if (this->has_old_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->old_container_, false, target);
  }

  // .masterproto.ContainerInfo new_container = 2;
  if (this->has_new_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_container_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ContainerPair)
  return target;
}

size_t ContainerPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ContainerPair)
  size_t total_size = 0;

  // .masterproto.ContainerInfo old_container = 1;
  if (this->has_old_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_container_);
  }

  // .masterproto.ContainerInfo new_container = 2;
  if (this->has_new_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ContainerPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ContainerPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ContainerPair)
    MergeFrom(*source);
  }
}

void ContainerPair::MergeFrom(const ContainerPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ContainerPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_container()) {
    mutable_old_container()->::masterproto::ContainerInfo::MergeFrom(from.old_container());
  }
  if (from.has_new_container()) {
    mutable_new_container()->::masterproto::ContainerInfo::MergeFrom(from.new_container());
  }
}

void ContainerPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ContainerPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerPair::CopyFrom(const ContainerPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ContainerPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerPair::IsInitialized() const {
  return true;
}

void ContainerPair::Swap(ContainerPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerPair::InternalSwap(ContainerPair* other) {
  std::swap(old_container_, other->old_container_);
  std::swap(new_container_, other->new_container_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerPair::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerPair

// .masterproto.ContainerInfo old_container = 1;
bool ContainerPair::has_old_container() const {
  return this != internal_default_instance() && old_container_ != NULL;
}
void ContainerPair::clear_old_container() {
  if (GetArenaNoVirtual() == NULL && old_container_ != NULL) delete old_container_;
  old_container_ = NULL;
}
const ::masterproto::ContainerInfo& ContainerPair::old_container() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerPair.old_container)
  return old_container_ != NULL ? *old_container_
                         : *::masterproto::ContainerInfo::internal_default_instance();
}
::masterproto::ContainerInfo* ContainerPair::mutable_old_container() {
  
  if (old_container_ == NULL) {
    old_container_ = new ::masterproto::ContainerInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerPair.old_container)
  return old_container_;
}
::masterproto::ContainerInfo* ContainerPair::release_old_container() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerPair.old_container)
  
  ::masterproto::ContainerInfo* temp = old_container_;
  old_container_ = NULL;
  return temp;
}
void ContainerPair::set_allocated_old_container(::masterproto::ContainerInfo* old_container) {
  delete old_container_;
  old_container_ = old_container;
  if (old_container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerPair.old_container)
}

// .masterproto.ContainerInfo new_container = 2;
bool ContainerPair::has_new_container() const {
  return this != internal_default_instance() && new_container_ != NULL;
}
void ContainerPair::clear_new_container() {
  if (GetArenaNoVirtual() == NULL && new_container_ != NULL) delete new_container_;
  new_container_ = NULL;
}
const ::masterproto::ContainerInfo& ContainerPair::new_container() const {
  // @@protoc_insertion_point(field_get:masterproto.ContainerPair.new_container)
  return new_container_ != NULL ? *new_container_
                         : *::masterproto::ContainerInfo::internal_default_instance();
}
::masterproto::ContainerInfo* ContainerPair::mutable_new_container() {
  
  if (new_container_ == NULL) {
    new_container_ = new ::masterproto::ContainerInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ContainerPair.new_container)
  return new_container_;
}
::masterproto::ContainerInfo* ContainerPair::release_new_container() {
  // @@protoc_insertion_point(field_release:masterproto.ContainerPair.new_container)
  
  ::masterproto::ContainerInfo* temp = new_container_;
  new_container_ = NULL;
  return temp;
}
void ContainerPair::set_allocated_new_container(::masterproto::ContainerInfo* new_container) {
  delete new_container_;
  new_container_ = new_container;
  if (new_container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ContainerPair.new_container)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateMachineRsp::kHeaderFieldNumber;
const int MigrateMachineRsp::kMigratedContainerPairsFieldNumber;
const int MigrateMachineRsp::kMigrateFailedContainersFieldNumber;
const int MigrateMachineRsp::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateMachineRsp::MigrateMachineRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateMachineRsp)
}
MigrateMachineRsp::MigrateMachineRsp(const MigrateMachineRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      migrated_container_pairs_(from.migrated_container_pairs_),
      migrate_failed_containers_(from.migrate_failed_containers_),
      errors_(from.errors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateMachineRsp)
}

void MigrateMachineRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

MigrateMachineRsp::~MigrateMachineRsp() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateMachineRsp)
  SharedDtor();
}

void MigrateMachineRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MigrateMachineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateMachineRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[33].descriptor;
}

const MigrateMachineRsp& MigrateMachineRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateMachineRsp* MigrateMachineRsp::New(::google::protobuf::Arena* arena) const {
  MigrateMachineRsp* n = new MigrateMachineRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateMachineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateMachineRsp)
  migrated_container_pairs_.Clear();
  migrate_failed_containers_.Clear();
  errors_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MigrateMachineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateMachineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ContainerPair migrated_container_pairs = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_migrated_container_pairs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .masterproto.ContainerInfo migrate_failed_containers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_migrate_failed_containers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string errors = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_errors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errors(this->errors_size() - 1).data(),
            this->errors(this->errors_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateMachineRsp.errors"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateMachineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateMachineRsp)
  return false;
#undef DO_
}

void MigrateMachineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateMachineRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.ContainerPair migrated_container_pairs = 2;
  for (unsigned int i = 0, n = this->migrated_container_pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->migrated_container_pairs(i), output);
  }

  // repeated .masterproto.ContainerInfo migrate_failed_containers = 3;
  for (unsigned int i = 0, n = this->migrate_failed_containers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->migrate_failed_containers(i), output);
  }

  // repeated string errors = 4;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errors(i).data(), this->errors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateMachineRsp.errors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->errors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateMachineRsp)
}

::google::protobuf::uint8* MigrateMachineRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateMachineRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.ContainerPair migrated_container_pairs = 2;
  for (unsigned int i = 0, n = this->migrated_container_pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->migrated_container_pairs(i), false, target);
  }

  // repeated .masterproto.ContainerInfo migrate_failed_containers = 3;
  for (unsigned int i = 0, n = this->migrate_failed_containers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->migrate_failed_containers(i), false, target);
  }

  // repeated string errors = 4;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errors(i).data(), this->errors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateMachineRsp.errors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->errors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateMachineRsp)
  return target;
}

size_t MigrateMachineRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateMachineRsp)
  size_t total_size = 0;

  // repeated .masterproto.ContainerPair migrated_container_pairs = 2;
  {
    unsigned int count = this->migrated_container_pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrated_container_pairs(i));
    }
  }

  // repeated .masterproto.ContainerInfo migrate_failed_containers = 3;
  {
    unsigned int count = this->migrate_failed_containers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrate_failed_containers(i));
    }
  }

  // repeated string errors = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->errors_size());
  for (int i = 0; i < this->errors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->errors(i));
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateMachineRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateMachineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateMachineRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateMachineRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateMachineRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateMachineRsp)
    MergeFrom(*source);
  }
}

void MigrateMachineRsp::MergeFrom(const MigrateMachineRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateMachineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  migrated_container_pairs_.MergeFrom(from.migrated_container_pairs_);
  migrate_failed_containers_.MergeFrom(from.migrate_failed_containers_);
  errors_.MergeFrom(from.errors_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void MigrateMachineRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateMachineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateMachineRsp::CopyFrom(const MigrateMachineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateMachineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateMachineRsp::IsInitialized() const {
  return true;
}

void MigrateMachineRsp::Swap(MigrateMachineRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateMachineRsp::InternalSwap(MigrateMachineRsp* other) {
  migrated_container_pairs_.UnsafeArenaSwap(&other->migrated_container_pairs_);
  migrate_failed_containers_.UnsafeArenaSwap(&other->migrate_failed_containers_);
  errors_.UnsafeArenaSwap(&other->errors_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateMachineRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateMachineRsp

// .cmongoproto.ResHeader header = 1;
bool MigrateMachineRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateMachineRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& MigrateMachineRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* MigrateMachineRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineRsp.header)
  return header_;
}
::cmongoproto::ResHeader* MigrateMachineRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateMachineRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateMachineRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateMachineRsp.header)
}

// repeated .masterproto.ContainerPair migrated_container_pairs = 2;
int MigrateMachineRsp::migrated_container_pairs_size() const {
  return migrated_container_pairs_.size();
}
void MigrateMachineRsp::clear_migrated_container_pairs() {
  migrated_container_pairs_.Clear();
}
const ::masterproto::ContainerPair& MigrateMachineRsp::migrated_container_pairs(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineRsp.migrated_container_pairs)
  return migrated_container_pairs_.Get(index);
}
::masterproto::ContainerPair* MigrateMachineRsp::mutable_migrated_container_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineRsp.migrated_container_pairs)
  return migrated_container_pairs_.Mutable(index);
}
::masterproto::ContainerPair* MigrateMachineRsp::add_migrated_container_pairs() {
  // @@protoc_insertion_point(field_add:masterproto.MigrateMachineRsp.migrated_container_pairs)
  return migrated_container_pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerPair >*
MigrateMachineRsp::mutable_migrated_container_pairs() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateMachineRsp.migrated_container_pairs)
  return &migrated_container_pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerPair >&
MigrateMachineRsp::migrated_container_pairs() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateMachineRsp.migrated_container_pairs)
  return migrated_container_pairs_;
}

// repeated .masterproto.ContainerInfo migrate_failed_containers = 3;
int MigrateMachineRsp::migrate_failed_containers_size() const {
  return migrate_failed_containers_.size();
}
void MigrateMachineRsp::clear_migrate_failed_containers() {
  migrate_failed_containers_.Clear();
}
const ::masterproto::ContainerInfo& MigrateMachineRsp::migrate_failed_containers(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineRsp.migrate_failed_containers)
  return migrate_failed_containers_.Get(index);
}
::masterproto::ContainerInfo* MigrateMachineRsp::mutable_migrate_failed_containers(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineRsp.migrate_failed_containers)
  return migrate_failed_containers_.Mutable(index);
}
::masterproto::ContainerInfo* MigrateMachineRsp::add_migrate_failed_containers() {
  // @@protoc_insertion_point(field_add:masterproto.MigrateMachineRsp.migrate_failed_containers)
  return migrate_failed_containers_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >*
MigrateMachineRsp::mutable_migrate_failed_containers() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateMachineRsp.migrate_failed_containers)
  return &migrate_failed_containers_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ContainerInfo >&
MigrateMachineRsp::migrate_failed_containers() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateMachineRsp.migrate_failed_containers)
  return migrate_failed_containers_;
}

// repeated string errors = 4;
int MigrateMachineRsp::errors_size() const {
  return errors_.size();
}
void MigrateMachineRsp::clear_errors() {
  errors_.Clear();
}
const ::std::string& MigrateMachineRsp::errors(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateMachineRsp.errors)
  return errors_.Get(index);
}
::std::string* MigrateMachineRsp::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateMachineRsp.errors)
  return errors_.Mutable(index);
}
void MigrateMachineRsp::set_errors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.MigrateMachineRsp.errors)
  errors_.Mutable(index)->assign(value);
}
void MigrateMachineRsp::set_errors(int index, const char* value) {
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateMachineRsp.errors)
}
void MigrateMachineRsp::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateMachineRsp.errors)
}
::std::string* MigrateMachineRsp::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.MigrateMachineRsp.errors)
  return errors_.Add();
}
void MigrateMachineRsp::add_errors(const ::std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.MigrateMachineRsp.errors)
}
void MigrateMachineRsp::add_errors(const char* value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.MigrateMachineRsp.errors)
}
void MigrateMachineRsp::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.MigrateMachineRsp.errors)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MigrateMachineRsp::errors() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateMachineRsp.errors)
  return errors_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MigrateMachineRsp::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateMachineRsp.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMachineReq::kHeaderFieldNumber;
const int QueryMachineReq::kIpListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMachineReq::QueryMachineReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryMachineReq)
}
QueryMachineReq::QueryMachineReq(const QueryMachineReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ip_list_(from.ip_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryMachineReq)
}

void QueryMachineReq::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

QueryMachineReq::~QueryMachineReq() {
  // @@protoc_insertion_point(destructor:masterproto.QueryMachineReq)
  SharedDtor();
}

void QueryMachineReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryMachineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMachineReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[34].descriptor;
}

const QueryMachineReq& QueryMachineReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryMachineReq* QueryMachineReq::New(::google::protobuf::Arena* arena) const {
  QueryMachineReq* n = new QueryMachineReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMachineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryMachineReq)
  ip_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool QueryMachineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryMachineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ip_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_list(this->ip_list_size() - 1).data(),
            this->ip_list(this->ip_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryMachineReq.ip_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryMachineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryMachineReq)
  return false;
#undef DO_
}

void QueryMachineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryMachineReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string ip_list = 2;
  for (int i = 0; i < this->ip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_list(i).data(), this->ip_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryMachineReq.ip_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryMachineReq)
}

::google::protobuf::uint8* QueryMachineReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryMachineReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string ip_list = 2;
  for (int i = 0; i < this->ip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_list(i).data(), this->ip_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryMachineReq.ip_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ip_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryMachineReq)
  return target;
}

size_t QueryMachineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryMachineReq)
  size_t total_size = 0;

  // repeated string ip_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_list_size());
  for (int i = 0; i < this->ip_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_list(i));
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMachineReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryMachineReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMachineReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMachineReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryMachineReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryMachineReq)
    MergeFrom(*source);
  }
}

void QueryMachineReq::MergeFrom(const QueryMachineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryMachineReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_list_.MergeFrom(from.ip_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void QueryMachineReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryMachineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMachineReq::CopyFrom(const QueryMachineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryMachineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMachineReq::IsInitialized() const {
  return true;
}

void QueryMachineReq::Swap(QueryMachineReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMachineReq::InternalSwap(QueryMachineReq* other) {
  ip_list_.UnsafeArenaSwap(&other->ip_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMachineReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMachineReq

// .cmongoproto.ReqHeader header = 1;
bool QueryMachineReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryMachineReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& QueryMachineReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryMachineReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* QueryMachineReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryMachineReq.header)
  return header_;
}
::cmongoproto::ReqHeader* QueryMachineReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryMachineReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryMachineReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryMachineReq.header)
}

// repeated string ip_list = 2;
int QueryMachineReq::ip_list_size() const {
  return ip_list_.size();
}
void QueryMachineReq::clear_ip_list() {
  ip_list_.Clear();
}
const ::std::string& QueryMachineReq::ip_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.QueryMachineReq.ip_list)
  return ip_list_.Get(index);
}
::std::string* QueryMachineReq::mutable_ip_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.QueryMachineReq.ip_list)
  return ip_list_.Mutable(index);
}
void QueryMachineReq::set_ip_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.QueryMachineReq.ip_list)
  ip_list_.Mutable(index)->assign(value);
}
void QueryMachineReq::set_ip_list(int index, const char* value) {
  ip_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.QueryMachineReq.ip_list)
}
void QueryMachineReq::set_ip_list(int index, const char* value, size_t size) {
  ip_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryMachineReq.ip_list)
}
::std::string* QueryMachineReq::add_ip_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.QueryMachineReq.ip_list)
  return ip_list_.Add();
}
void QueryMachineReq::add_ip_list(const ::std::string& value) {
  ip_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.QueryMachineReq.ip_list)
}
void QueryMachineReq::add_ip_list(const char* value) {
  ip_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.QueryMachineReq.ip_list)
}
void QueryMachineReq::add_ip_list(const char* value, size_t size) {
  ip_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.QueryMachineReq.ip_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryMachineReq::ip_list() const {
  // @@protoc_insertion_point(field_list:masterproto.QueryMachineReq.ip_list)
  return ip_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
QueryMachineReq::mutable_ip_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.QueryMachineReq.ip_list)
  return &ip_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMachineRsp::kHeaderFieldNumber;
const int QueryMachineRsp::kMachineListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMachineRsp::QueryMachineRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryMachineRsp)
}
QueryMachineRsp::QueryMachineRsp(const QueryMachineRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      machine_list_(from.machine_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryMachineRsp)
}

void QueryMachineRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

QueryMachineRsp::~QueryMachineRsp() {
  // @@protoc_insertion_point(destructor:masterproto.QueryMachineRsp)
  SharedDtor();
}

void QueryMachineRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryMachineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMachineRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[35].descriptor;
}

const QueryMachineRsp& QueryMachineRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryMachineRsp* QueryMachineRsp::New(::google::protobuf::Arena* arena) const {
  QueryMachineRsp* n = new QueryMachineRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMachineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryMachineRsp)
  machine_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool QueryMachineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryMachineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.MachineInfo machine_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_machine_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryMachineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryMachineRsp)
  return false;
#undef DO_
}

void QueryMachineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryMachineRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.MachineInfo machine_list = 2;
  for (unsigned int i = 0, n = this->machine_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machine_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryMachineRsp)
}

::google::protobuf::uint8* QueryMachineRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryMachineRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.MachineInfo machine_list = 2;
  for (unsigned int i = 0, n = this->machine_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->machine_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryMachineRsp)
  return target;
}

size_t QueryMachineRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryMachineRsp)
  size_t total_size = 0;

  // repeated .masterproto.MachineInfo machine_list = 2;
  {
    unsigned int count = this->machine_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_list(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMachineRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryMachineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMachineRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMachineRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryMachineRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryMachineRsp)
    MergeFrom(*source);
  }
}

void QueryMachineRsp::MergeFrom(const QueryMachineRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryMachineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_list_.MergeFrom(from.machine_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void QueryMachineRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryMachineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMachineRsp::CopyFrom(const QueryMachineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryMachineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMachineRsp::IsInitialized() const {
  return true;
}

void QueryMachineRsp::Swap(QueryMachineRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMachineRsp::InternalSwap(QueryMachineRsp* other) {
  machine_list_.UnsafeArenaSwap(&other->machine_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMachineRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMachineRsp

// .cmongoproto.ResHeader header = 1;
bool QueryMachineRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryMachineRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& QueryMachineRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryMachineRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* QueryMachineRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryMachineRsp.header)
  return header_;
}
::cmongoproto::ResHeader* QueryMachineRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryMachineRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryMachineRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryMachineRsp.header)
}

// repeated .masterproto.MachineInfo machine_list = 2;
int QueryMachineRsp::machine_list_size() const {
  return machine_list_.size();
}
void QueryMachineRsp::clear_machine_list() {
  machine_list_.Clear();
}
const ::masterproto::MachineInfo& QueryMachineRsp::machine_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.QueryMachineRsp.machine_list)
  return machine_list_.Get(index);
}
::masterproto::MachineInfo* QueryMachineRsp::mutable_machine_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.QueryMachineRsp.machine_list)
  return machine_list_.Mutable(index);
}
::masterproto::MachineInfo* QueryMachineRsp::add_machine_list() {
  // @@protoc_insertion_point(field_add:masterproto.QueryMachineRsp.machine_list)
  return machine_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::MachineInfo >*
QueryMachineRsp::mutable_machine_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.QueryMachineRsp.machine_list)
  return &machine_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::MachineInfo >&
QueryMachineRsp::machine_list() const {
  // @@protoc_insertion_point(field_list:masterproto.QueryMachineRsp.machine_list)
  return machine_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterReq::kHeaderFieldNumber;
const int CreateClusterReq::kJobIdFieldNumber;
const int CreateClusterReq::kAppIdFieldNumber;
const int CreateClusterReq::kRegionIdFieldNumber;
const int CreateClusterReq::kSetIdFieldNumber;
const int CreateClusterReq::kClusterIdFieldNumber;
const int CreateClusterReq::kReplicateSetNumFieldNumber;
const int CreateClusterReq::kSecondaryNumFieldNumber;
const int CreateClusterReq::kClusterTypeFieldNumber;
const int CreateClusterReq::kMachineTypeFieldNumber;
const int CreateClusterReq::kQuotaFieldNumber;
const int CreateClusterReq::kVersionFieldNumber;
const int CreateClusterReq::kJobTypeFieldNumber;
const int CreateClusterReq::kCloseCgroupFieldNumber;
const int CreateClusterReq::kProxyNumFieldNumber;
const int CreateClusterReq::kClusterVerFieldNumber;
const int CreateClusterReq::kExtraInfoFieldNumber;
const int CreateClusterReq::kUseDynamoFieldNumber;
const int CreateClusterReq::kProxyVersionFieldNumber;
const int CreateClusterReq::kMongodSubversionFieldNumber;
const int CreateClusterReq::kDynamoProxyVersionFieldNumber;
const int CreateClusterReq::kMaxClientConnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterReq::CreateClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateClusterReq)
}
CreateClusterReq::CreateClusterReq(const CreateClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  if (from.has_extra_info()) {
    extra_info_ = new ::masterproto::ClusterExtraInfo(*from.extra_info_);
  } else {
    extra_info_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(max_client_conns_));
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateClusterReq)
}

void CreateClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&header_) + sizeof(max_client_conns_));
  _cached_size_ = 0;
}

CreateClusterReq::~CreateClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.CreateClusterReq)
  SharedDtor();
}

void CreateClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
  if (this != internal_default_instance()) {
    delete extra_info_;
  }
}

void CreateClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[36].descriptor;
}

const CreateClusterReq& CreateClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateClusterReq* CreateClusterReq::New(::google::protobuf::Arena* arena) const {
  CreateClusterReq* n = new CreateClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) {
    delete extra_info_;
  }
  extra_info_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&max_client_conns_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(max_client_conns_));
}

bool CreateClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replicate_set_num = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicate_set_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 secondary_num = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondary_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterType cluster_type = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cluster_type(static_cast< ::masterproto::ClusterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoVersion version = 12;
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version(static_cast< ::cmongoproto::MongoVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 13;
      case 13: {
        if (tag == 104u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 closeCgroup = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closecgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 proxy_num = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cluster_ver = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterExtraInfo extra_info = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 use_dynamo = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_dynamo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateClusterReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateClusterReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateClusterReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_client_conns = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_client_conns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateClusterReq)
  return false;
#undef DO_
}

void CreateClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->app_id(), output);
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->region_id(), output);
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->set_id(), output);
  }

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cluster_id(), output);
  }

  // int32 replicate_set_num = 7;
  if (this->replicate_set_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->replicate_set_num(), output);
  }

  // int32 secondary_num = 8;
  if (this->secondary_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->secondary_num(), output);
  }

  // .masterproto.ClusterType cluster_type = 9;
  if (this->cluster_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->cluster_type(), output);
  }

  // .masterproto.MachineType machine_type = 10;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->machine_type(), output);
  }

  // .cmongoproto.ResourceDesc quota = 11;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->quota_, output);
  }

  // .cmongoproto.MongoVersion version = 12;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->version(), output);
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->job_type(), output);
  }

  // int32 closeCgroup = 14;
  if (this->closecgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->closecgroup(), output);
  }

  // int32 proxy_num = 15;
  if (this->proxy_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->proxy_num(), output);
  }

  // int32 cluster_ver = 16;
  if (this->cluster_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cluster_ver(), output);
  }

  // .masterproto.ClusterExtraInfo extra_info = 17;
  if (this->has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->extra_info_, output);
  }

  // int32 use_dynamo = 18;
  if (this->use_dynamo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->use_dynamo(), output);
  }

  // string proxy_version = 19;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->proxy_version(), output);
  }

  // string mongod_subversion = 20;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 21;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->dynamo_proxy_version(), output);
  }

  // int32 max_client_conns = 22;
  if (this->max_client_conns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->max_client_conns(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateClusterReq)
}

::google::protobuf::uint8* CreateClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->app_id(), target);
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->region_id(), target);
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->set_id(), target);
  }

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_id(), target);
  }

  // int32 replicate_set_num = 7;
  if (this->replicate_set_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->replicate_set_num(), target);
  }

  // int32 secondary_num = 8;
  if (this->secondary_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->secondary_num(), target);
  }

  // .masterproto.ClusterType cluster_type = 9;
  if (this->cluster_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->cluster_type(), target);
  }

  // .masterproto.MachineType machine_type = 10;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->machine_type(), target);
  }

  // .cmongoproto.ResourceDesc quota = 11;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->quota_, false, target);
  }

  // .cmongoproto.MongoVersion version = 12;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->version(), target);
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->job_type(), target);
  }

  // int32 closeCgroup = 14;
  if (this->closecgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->closecgroup(), target);
  }

  // int32 proxy_num = 15;
  if (this->proxy_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->proxy_num(), target);
  }

  // int32 cluster_ver = 16;
  if (this->cluster_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cluster_ver(), target);
  }

  // .masterproto.ClusterExtraInfo extra_info = 17;
  if (this->has_extra_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->extra_info_, false, target);
  }

  // int32 use_dynamo = 18;
  if (this->use_dynamo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->use_dynamo(), target);
  }

  // string proxy_version = 19;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->proxy_version(), target);
  }

  // string mongod_subversion = 20;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 21;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateClusterReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->dynamo_proxy_version(), target);
  }

  // int32 max_client_conns = 22;
  if (this->max_client_conns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->max_client_conns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateClusterReq)
  return target;
}

size_t CreateClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateClusterReq)
  size_t total_size = 0;

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string proxy_version = 19;
  if (this->proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 20;
  if (this->mongod_subversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 21;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 11;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // .masterproto.ClusterExtraInfo extra_info = 17;
  if (this->has_extra_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_info_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // int32 replicate_set_num = 7;
  if (this->replicate_set_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicate_set_num());
  }

  // int32 secondary_num = 8;
  if (this->secondary_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->secondary_num());
  }

  // .masterproto.ClusterType cluster_type = 9;
  if (this->cluster_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cluster_type());
  }

  // .masterproto.MachineType machine_type = 10;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // .cmongoproto.MongoVersion version = 12;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
  }

  // .masterproto.JobType job_type = 13;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int32 closeCgroup = 14;
  if (this->closecgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closecgroup());
  }

  // int32 proxy_num = 15;
  if (this->proxy_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proxy_num());
  }

  // int32 cluster_ver = 16;
  if (this->cluster_ver() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cluster_ver());
  }

  // int32 use_dynamo = 18;
  if (this->use_dynamo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_dynamo());
  }

  // int32 max_client_conns = 22;
  if (this->max_client_conns() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_client_conns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateClusterReq)
    MergeFrom(*source);
  }
}

void CreateClusterReq::MergeFrom(const CreateClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.has_extra_info()) {
    mutable_extra_info()->::masterproto::ClusterExtraInfo::MergeFrom(from.extra_info());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.replicate_set_num() != 0) {
    set_replicate_set_num(from.replicate_set_num());
  }
  if (from.secondary_num() != 0) {
    set_secondary_num(from.secondary_num());
  }
  if (from.cluster_type() != 0) {
    set_cluster_type(from.cluster_type());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.closecgroup() != 0) {
    set_closecgroup(from.closecgroup());
  }
  if (from.proxy_num() != 0) {
    set_proxy_num(from.proxy_num());
  }
  if (from.cluster_ver() != 0) {
    set_cluster_ver(from.cluster_ver());
  }
  if (from.use_dynamo() != 0) {
    set_use_dynamo(from.use_dynamo());
  }
  if (from.max_client_conns() != 0) {
    set_max_client_conns(from.max_client_conns());
  }
}

void CreateClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterReq::CopyFrom(const CreateClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClusterReq::IsInitialized() const {
  return true;
}

void CreateClusterReq::Swap(CreateClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterReq::InternalSwap(CreateClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(extra_info_, other->extra_info_);
  std::swap(job_id_, other->job_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(replicate_set_num_, other->replicate_set_num_);
  std::swap(secondary_num_, other->secondary_num_);
  std::swap(cluster_type_, other->cluster_type_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(version_, other->version_);
  std::swap(job_type_, other->job_type_);
  std::swap(closecgroup_, other->closecgroup_);
  std::swap(proxy_num_, other->proxy_num_);
  std::swap(cluster_ver_, other->cluster_ver_);
  std::swap(use_dynamo_, other->use_dynamo_);
  std::swap(max_client_conns_, other->max_client_conns_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterReq

// .cmongoproto.ReqHeader header = 1;
bool CreateClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CreateClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CreateClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CreateClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.header)
}

// int64 job_id = 2;
void CreateClusterReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CreateClusterReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.job_id)
  return job_id_;
}
void CreateClusterReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.job_id)
}

// int64 app_id = 3;
void CreateClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CreateClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.app_id)
  return app_id_;
}
void CreateClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.app_id)
}

// int32 region_id = 4;
void CreateClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 CreateClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.region_id)
  return region_id_;
}
void CreateClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.region_id)
}

// int32 set_id = 5;
void CreateClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 CreateClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.set_id)
  return set_id_;
}
void CreateClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.set_id)
}

// string cluster_id = 6;
void CreateClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void CreateClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.cluster_id)
}
#if LANG_CXX11
void CreateClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateClusterReq.cluster_id)
}
#endif
void CreateClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateClusterReq.cluster_id)
}
void CreateClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateClusterReq.cluster_id)
}
::std::string* CreateClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.cluster_id)
}

// int32 replicate_set_num = 7;
void CreateClusterReq::clear_replicate_set_num() {
  replicate_set_num_ = 0;
}
::google::protobuf::int32 CreateClusterReq::replicate_set_num() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.replicate_set_num)
  return replicate_set_num_;
}
void CreateClusterReq::set_replicate_set_num(::google::protobuf::int32 value) {
  
  replicate_set_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.replicate_set_num)
}

// int32 secondary_num = 8;
void CreateClusterReq::clear_secondary_num() {
  secondary_num_ = 0;
}
::google::protobuf::int32 CreateClusterReq::secondary_num() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.secondary_num)
  return secondary_num_;
}
void CreateClusterReq::set_secondary_num(::google::protobuf::int32 value) {
  
  secondary_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.secondary_num)
}

// .masterproto.ClusterType cluster_type = 9;
void CreateClusterReq::clear_cluster_type() {
  cluster_type_ = 0;
}
::masterproto::ClusterType CreateClusterReq::cluster_type() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.cluster_type)
  return static_cast< ::masterproto::ClusterType >(cluster_type_);
}
void CreateClusterReq::set_cluster_type(::masterproto::ClusterType value) {
  
  cluster_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.cluster_type)
}

// .masterproto.MachineType machine_type = 10;
void CreateClusterReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType CreateClusterReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void CreateClusterReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.machine_type)
}

// .cmongoproto.ResourceDesc quota = 11;
bool CreateClusterReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void CreateClusterReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& CreateClusterReq::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* CreateClusterReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* CreateClusterReq::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void CreateClusterReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.quota)
}

// .cmongoproto.MongoVersion version = 12;
void CreateClusterReq::clear_version() {
  version_ = 0;
}
::cmongoproto::MongoVersion CreateClusterReq::version() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.version)
  return static_cast< ::cmongoproto::MongoVersion >(version_);
}
void CreateClusterReq::set_version(::cmongoproto::MongoVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.version)
}

// .masterproto.JobType job_type = 13;
void CreateClusterReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType CreateClusterReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void CreateClusterReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.job_type)
}

// int32 closeCgroup = 14;
void CreateClusterReq::clear_closecgroup() {
  closecgroup_ = 0;
}
::google::protobuf::int32 CreateClusterReq::closecgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.closeCgroup)
  return closecgroup_;
}
void CreateClusterReq::set_closecgroup(::google::protobuf::int32 value) {
  
  closecgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.closeCgroup)
}

// int32 proxy_num = 15;
void CreateClusterReq::clear_proxy_num() {
  proxy_num_ = 0;
}
::google::protobuf::int32 CreateClusterReq::proxy_num() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.proxy_num)
  return proxy_num_;
}
void CreateClusterReq::set_proxy_num(::google::protobuf::int32 value) {
  
  proxy_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.proxy_num)
}

// int32 cluster_ver = 16;
void CreateClusterReq::clear_cluster_ver() {
  cluster_ver_ = 0;
}
::google::protobuf::int32 CreateClusterReq::cluster_ver() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.cluster_ver)
  return cluster_ver_;
}
void CreateClusterReq::set_cluster_ver(::google::protobuf::int32 value) {
  
  cluster_ver_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.cluster_ver)
}

// .masterproto.ClusterExtraInfo extra_info = 17;
bool CreateClusterReq::has_extra_info() const {
  return this != internal_default_instance() && extra_info_ != NULL;
}
void CreateClusterReq::clear_extra_info() {
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) delete extra_info_;
  extra_info_ = NULL;
}
const ::masterproto::ClusterExtraInfo& CreateClusterReq::extra_info() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.extra_info)
  return extra_info_ != NULL ? *extra_info_
                         : *::masterproto::ClusterExtraInfo::internal_default_instance();
}
::masterproto::ClusterExtraInfo* CreateClusterReq::mutable_extra_info() {
  
  if (extra_info_ == NULL) {
    extra_info_ = new ::masterproto::ClusterExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.extra_info)
  return extra_info_;
}
::masterproto::ClusterExtraInfo* CreateClusterReq::release_extra_info() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.extra_info)
  
  ::masterproto::ClusterExtraInfo* temp = extra_info_;
  extra_info_ = NULL;
  return temp;
}
void CreateClusterReq::set_allocated_extra_info(::masterproto::ClusterExtraInfo* extra_info) {
  delete extra_info_;
  extra_info_ = extra_info;
  if (extra_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.extra_info)
}

// int32 use_dynamo = 18;
void CreateClusterReq::clear_use_dynamo() {
  use_dynamo_ = 0;
}
::google::protobuf::int32 CreateClusterReq::use_dynamo() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.use_dynamo)
  return use_dynamo_;
}
void CreateClusterReq::set_use_dynamo(::google::protobuf::int32 value) {
  
  use_dynamo_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.use_dynamo)
}

// string proxy_version = 19;
void CreateClusterReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void CreateClusterReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.proxy_version)
}
#if LANG_CXX11
void CreateClusterReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateClusterReq.proxy_version)
}
#endif
void CreateClusterReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateClusterReq.proxy_version)
}
void CreateClusterReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateClusterReq.proxy_version)
}
::std::string* CreateClusterReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.proxy_version)
}

// string mongod_subversion = 20;
void CreateClusterReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void CreateClusterReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.mongod_subversion)
}
#if LANG_CXX11
void CreateClusterReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateClusterReq.mongod_subversion)
}
#endif
void CreateClusterReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateClusterReq.mongod_subversion)
}
void CreateClusterReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateClusterReq.mongod_subversion)
}
::std::string* CreateClusterReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.mongod_subversion)
}

// string dynamo_proxy_version = 21;
void CreateClusterReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void CreateClusterReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.dynamo_proxy_version)
}
#if LANG_CXX11
void CreateClusterReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateClusterReq.dynamo_proxy_version)
}
#endif
void CreateClusterReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateClusterReq.dynamo_proxy_version)
}
void CreateClusterReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateClusterReq.dynamo_proxy_version)
}
::std::string* CreateClusterReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterReq.dynamo_proxy_version)
}

// int32 max_client_conns = 22;
void CreateClusterReq::clear_max_client_conns() {
  max_client_conns_ = 0;
}
::google::protobuf::int32 CreateClusterReq::max_client_conns() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterReq.max_client_conns)
  return max_client_conns_;
}
void CreateClusterReq::set_max_client_conns(::google::protobuf::int32 value) {
  
  max_client_conns_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateClusterReq.max_client_conns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterRsp::CreateClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateClusterRsp)
}
CreateClusterRsp::CreateClusterRsp(const CreateClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateClusterRsp)
}

void CreateClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateClusterRsp::~CreateClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.CreateClusterRsp)
  SharedDtor();
}

void CreateClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[37].descriptor;
}

const CreateClusterRsp& CreateClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateClusterRsp* CreateClusterRsp::New(::google::protobuf::Arena* arena) const {
  CreateClusterRsp* n = new CreateClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CreateClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateClusterRsp)
  return false;
#undef DO_
}

void CreateClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateClusterRsp)
}

::google::protobuf::uint8* CreateClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateClusterRsp)
  return target;
}

size_t CreateClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateClusterRsp)
    MergeFrom(*source);
  }
}

void CreateClusterRsp::MergeFrom(const CreateClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void CreateClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterRsp::CopyFrom(const CreateClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClusterRsp::IsInitialized() const {
  return true;
}

void CreateClusterRsp::Swap(CreateClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterRsp::InternalSwap(CreateClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterRsp

// .cmongoproto.ResHeader header = 1;
bool CreateClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CreateClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CreateClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* CreateClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeClusterModuleReq::kHeaderFieldNumber;
const int UpgradeClusterModuleReq::kRegionIdFieldNumber;
const int UpgradeClusterModuleReq::kSetIdFieldNumber;
const int UpgradeClusterModuleReq::kClusterIdFieldNumber;
const int UpgradeClusterModuleReq::kContainerTypeFieldNumber;
const int UpgradeClusterModuleReq::kContainerVersionFieldNumber;
const int UpgradeClusterModuleReq::kRestartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeClusterModuleReq::UpgradeClusterModuleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.UpgradeClusterModuleReq)
}
UpgradeClusterModuleReq::UpgradeClusterModuleReq(const UpgradeClusterModuleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  container_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_version().size() > 0) {
    container_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(restart_));
  // @@protoc_insertion_point(copy_constructor:masterproto.UpgradeClusterModuleReq)
}

void UpgradeClusterModuleReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&header_) + sizeof(restart_));
  _cached_size_ = 0;
}

UpgradeClusterModuleReq::~UpgradeClusterModuleReq() {
  // @@protoc_insertion_point(destructor:masterproto.UpgradeClusterModuleReq)
  SharedDtor();
}

void UpgradeClusterModuleReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpgradeClusterModuleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeClusterModuleReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[38].descriptor;
}

const UpgradeClusterModuleReq& UpgradeClusterModuleReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeClusterModuleReq* UpgradeClusterModuleReq::New(::google::protobuf::Arena* arena) const {
  UpgradeClusterModuleReq* n = new UpgradeClusterModuleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeClusterModuleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.UpgradeClusterModuleReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&restart_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(restart_));
}

bool UpgradeClusterModuleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.UpgradeClusterModuleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.UpgradeClusterModuleReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string container_version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_version().data(), this->container_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.UpgradeClusterModuleReq.container_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 restart = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.UpgradeClusterModuleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.UpgradeClusterModuleReq)
  return false;
#undef DO_
}

void UpgradeClusterModuleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.UpgradeClusterModuleReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UpgradeClusterModuleReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // .cmongoproto.MongoType container_type = 5;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->container_type(), output);
  }

  // string container_version = 6;
  if (this->container_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_version().data(), this->container_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UpgradeClusterModuleReq.container_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->container_version(), output);
  }

  // int32 restart = 7;
  if (this->restart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->restart(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.UpgradeClusterModuleReq)
}

::google::protobuf::uint8* UpgradeClusterModuleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.UpgradeClusterModuleReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UpgradeClusterModuleReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // .cmongoproto.MongoType container_type = 5;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->container_type(), target);
  }

  // string container_version = 6;
  if (this->container_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_version().data(), this->container_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.UpgradeClusterModuleReq.container_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->container_version(), target);
  }

  // int32 restart = 7;
  if (this->restart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->restart(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.UpgradeClusterModuleReq)
  return target;
}

size_t UpgradeClusterModuleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.UpgradeClusterModuleReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string container_version = 6;
  if (this->container_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .cmongoproto.MongoType container_type = 5;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  // int32 restart = 7;
  if (this->restart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->restart());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeClusterModuleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.UpgradeClusterModuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeClusterModuleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeClusterModuleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.UpgradeClusterModuleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.UpgradeClusterModuleReq)
    MergeFrom(*source);
  }
}

void UpgradeClusterModuleReq::MergeFrom(const UpgradeClusterModuleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.UpgradeClusterModuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.container_version().size() > 0) {

    container_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
  if (from.restart() != 0) {
    set_restart(from.restart());
  }
}

void UpgradeClusterModuleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.UpgradeClusterModuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeClusterModuleReq::CopyFrom(const UpgradeClusterModuleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.UpgradeClusterModuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeClusterModuleReq::IsInitialized() const {
  return true;
}

void UpgradeClusterModuleReq::Swap(UpgradeClusterModuleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeClusterModuleReq::InternalSwap(UpgradeClusterModuleReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  container_version_.Swap(&other->container_version_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(container_type_, other->container_type_);
  std::swap(restart_, other->restart_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeClusterModuleReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeClusterModuleReq

// .cmongoproto.ReqHeader header = 1;
bool UpgradeClusterModuleReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpgradeClusterModuleReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& UpgradeClusterModuleReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* UpgradeClusterModuleReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.UpgradeClusterModuleReq.header)
  return header_;
}
::cmongoproto::ReqHeader* UpgradeClusterModuleReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.UpgradeClusterModuleReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpgradeClusterModuleReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.UpgradeClusterModuleReq.header)
}

// int32 region_id = 2;
void UpgradeClusterModuleReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 UpgradeClusterModuleReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.region_id)
  return region_id_;
}
void UpgradeClusterModuleReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.region_id)
}

// int32 set_id = 3;
void UpgradeClusterModuleReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 UpgradeClusterModuleReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.set_id)
  return set_id_;
}
void UpgradeClusterModuleReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.set_id)
}

// string cluster_id = 4;
void UpgradeClusterModuleReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpgradeClusterModuleReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void UpgradeClusterModuleReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.cluster_id)
}
#if LANG_CXX11
void UpgradeClusterModuleReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.UpgradeClusterModuleReq.cluster_id)
}
#endif
void UpgradeClusterModuleReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.UpgradeClusterModuleReq.cluster_id)
}
void UpgradeClusterModuleReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.UpgradeClusterModuleReq.cluster_id)
}
::std::string* UpgradeClusterModuleReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.UpgradeClusterModuleReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeClusterModuleReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.UpgradeClusterModuleReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeClusterModuleReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.UpgradeClusterModuleReq.cluster_id)
}

// .cmongoproto.MongoType container_type = 5;
void UpgradeClusterModuleReq::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType UpgradeClusterModuleReq::container_type() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void UpgradeClusterModuleReq::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.container_type)
}

// string container_version = 6;
void UpgradeClusterModuleReq::clear_container_version() {
  container_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpgradeClusterModuleReq::container_version() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.container_version)
  return container_version_.GetNoArena();
}
void UpgradeClusterModuleReq::set_container_version(const ::std::string& value) {
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.container_version)
}
#if LANG_CXX11
void UpgradeClusterModuleReq::set_container_version(::std::string&& value) {
  
  container_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.UpgradeClusterModuleReq.container_version)
}
#endif
void UpgradeClusterModuleReq::set_container_version(const char* value) {
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.UpgradeClusterModuleReq.container_version)
}
void UpgradeClusterModuleReq::set_container_version(const char* value, size_t size) {
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.UpgradeClusterModuleReq.container_version)
}
::std::string* UpgradeClusterModuleReq::mutable_container_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.UpgradeClusterModuleReq.container_version)
  return container_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeClusterModuleReq::release_container_version() {
  // @@protoc_insertion_point(field_release:masterproto.UpgradeClusterModuleReq.container_version)
  
  return container_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeClusterModuleReq::set_allocated_container_version(::std::string* container_version) {
  if (container_version != NULL) {
    
  } else {
    
  }
  container_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.UpgradeClusterModuleReq.container_version)
}

// int32 restart = 7;
void UpgradeClusterModuleReq::clear_restart() {
  restart_ = 0;
}
::google::protobuf::int32 UpgradeClusterModuleReq::restart() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleReq.restart)
  return restart_;
}
void UpgradeClusterModuleReq::set_restart(::google::protobuf::int32 value) {
  
  restart_ = value;
  // @@protoc_insertion_point(field_set:masterproto.UpgradeClusterModuleReq.restart)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeClusterModuleRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeClusterModuleRsp::UpgradeClusterModuleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.UpgradeClusterModuleRsp)
}
UpgradeClusterModuleRsp::UpgradeClusterModuleRsp(const UpgradeClusterModuleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.UpgradeClusterModuleRsp)
}

void UpgradeClusterModuleRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

UpgradeClusterModuleRsp::~UpgradeClusterModuleRsp() {
  // @@protoc_insertion_point(destructor:masterproto.UpgradeClusterModuleRsp)
  SharedDtor();
}

void UpgradeClusterModuleRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void UpgradeClusterModuleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeClusterModuleRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[39].descriptor;
}

const UpgradeClusterModuleRsp& UpgradeClusterModuleRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeClusterModuleRsp* UpgradeClusterModuleRsp::New(::google::protobuf::Arena* arena) const {
  UpgradeClusterModuleRsp* n = new UpgradeClusterModuleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeClusterModuleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.UpgradeClusterModuleRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool UpgradeClusterModuleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.UpgradeClusterModuleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.UpgradeClusterModuleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.UpgradeClusterModuleRsp)
  return false;
#undef DO_
}

void UpgradeClusterModuleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.UpgradeClusterModuleRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.UpgradeClusterModuleRsp)
}

::google::protobuf::uint8* UpgradeClusterModuleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.UpgradeClusterModuleRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.UpgradeClusterModuleRsp)
  return target;
}

size_t UpgradeClusterModuleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.UpgradeClusterModuleRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeClusterModuleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.UpgradeClusterModuleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeClusterModuleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeClusterModuleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.UpgradeClusterModuleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.UpgradeClusterModuleRsp)
    MergeFrom(*source);
  }
}

void UpgradeClusterModuleRsp::MergeFrom(const UpgradeClusterModuleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.UpgradeClusterModuleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void UpgradeClusterModuleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.UpgradeClusterModuleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeClusterModuleRsp::CopyFrom(const UpgradeClusterModuleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.UpgradeClusterModuleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeClusterModuleRsp::IsInitialized() const {
  return true;
}

void UpgradeClusterModuleRsp::Swap(UpgradeClusterModuleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeClusterModuleRsp::InternalSwap(UpgradeClusterModuleRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeClusterModuleRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeClusterModuleRsp

// .cmongoproto.ResHeader header = 1;
bool UpgradeClusterModuleRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpgradeClusterModuleRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& UpgradeClusterModuleRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.UpgradeClusterModuleRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* UpgradeClusterModuleRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.UpgradeClusterModuleRsp.header)
  return header_;
}
::cmongoproto::ResHeader* UpgradeClusterModuleRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.UpgradeClusterModuleRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpgradeClusterModuleRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.UpgradeClusterModuleRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoClusterReq::kHeaderFieldNumber;
const int InfoClusterReq::kAppIdFieldNumber;
const int InfoClusterReq::kRegionIdFieldNumber;
const int InfoClusterReq::kSetIdFieldNumber;
const int InfoClusterReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoClusterReq::InfoClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.InfoClusterReq)
}
InfoClusterReq::InfoClusterReq(const InfoClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.InfoClusterReq)
}

void InfoClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

InfoClusterReq::~InfoClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.InfoClusterReq)
  SharedDtor();
}

void InfoClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void InfoClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[40].descriptor;
}

const InfoClusterReq& InfoClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoClusterReq* InfoClusterReq::New(::google::protobuf::Arena* arena) const {
  InfoClusterReq* n = new InfoClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.InfoClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool InfoClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.InfoClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.InfoClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.InfoClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.InfoClusterReq)
  return false;
#undef DO_
}

void InfoClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.InfoClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.InfoClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.InfoClusterReq)
}

::google::protobuf::uint8* InfoClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.InfoClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.InfoClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.InfoClusterReq)
  return target;
}

size_t InfoClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.InfoClusterReq)
  size_t total_size = 0;

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.InfoClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.InfoClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.InfoClusterReq)
    MergeFrom(*source);
  }
}

void InfoClusterReq::MergeFrom(const InfoClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.InfoClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void InfoClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.InfoClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoClusterReq::CopyFrom(const InfoClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.InfoClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoClusterReq::IsInitialized() const {
  return true;
}

void InfoClusterReq::Swap(InfoClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoClusterReq::InternalSwap(InfoClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoClusterReq

// .cmongoproto.ReqHeader header = 1;
bool InfoClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void InfoClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& InfoClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* InfoClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.InfoClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* InfoClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.InfoClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void InfoClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.InfoClusterReq.header)
}

// int64 app_id = 2;
void InfoClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InfoClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterReq.app_id)
  return app_id_;
}
void InfoClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.InfoClusterReq.app_id)
}

// int32 region_id = 3;
void InfoClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 InfoClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterReq.region_id)
  return region_id_;
}
void InfoClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.InfoClusterReq.region_id)
}

// int32 set_id = 4;
void InfoClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 InfoClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterReq.set_id)
  return set_id_;
}
void InfoClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.InfoClusterReq.set_id)
}

// string cluster_id = 5;
void InfoClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InfoClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void InfoClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.InfoClusterReq.cluster_id)
}
#if LANG_CXX11
void InfoClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.InfoClusterReq.cluster_id)
}
#endif
void InfoClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.InfoClusterReq.cluster_id)
}
void InfoClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.InfoClusterReq.cluster_id)
}
::std::string* InfoClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.InfoClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.InfoClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.InfoClusterReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoClusterRsp::kHeaderFieldNumber;
const int InfoClusterRsp::kClusterInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoClusterRsp::InfoClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.InfoClusterRsp)
}
InfoClusterRsp::InfoClusterRsp(const InfoClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_cluster_info()) {
    cluster_info_ = new ::masterproto::ClusterInfo(*from.cluster_info_);
  } else {
    cluster_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.InfoClusterRsp)
}

void InfoClusterRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&cluster_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(cluster_info_));
  _cached_size_ = 0;
}

InfoClusterRsp::~InfoClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.InfoClusterRsp)
  SharedDtor();
}

void InfoClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete cluster_info_;
  }
}

void InfoClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[41].descriptor;
}

const InfoClusterRsp& InfoClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoClusterRsp* InfoClusterRsp::New(::google::protobuf::Arena* arena) const {
  InfoClusterRsp* n = new InfoClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.InfoClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_info_ != NULL) {
    delete cluster_info_;
  }
  cluster_info_ = NULL;
}

bool InfoClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.InfoClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterInfo cluster_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.InfoClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.InfoClusterRsp)
  return false;
#undef DO_
}

void InfoClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.InfoClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cluster_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.InfoClusterRsp)
}

::google::protobuf::uint8* InfoClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.InfoClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cluster_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.InfoClusterRsp)
  return target;
}

size_t InfoClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.InfoClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.InfoClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.InfoClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.InfoClusterRsp)
    MergeFrom(*source);
  }
}

void InfoClusterRsp::MergeFrom(const InfoClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.InfoClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_cluster_info()) {
    mutable_cluster_info()->::masterproto::ClusterInfo::MergeFrom(from.cluster_info());
  }
}

void InfoClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.InfoClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoClusterRsp::CopyFrom(const InfoClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.InfoClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoClusterRsp::IsInitialized() const {
  return true;
}

void InfoClusterRsp::Swap(InfoClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoClusterRsp::InternalSwap(InfoClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(cluster_info_, other->cluster_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoClusterRsp

// .cmongoproto.ResHeader header = 1;
bool InfoClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void InfoClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& InfoClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* InfoClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.InfoClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* InfoClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.InfoClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void InfoClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.InfoClusterRsp.header)
}

// .masterproto.ClusterInfo cluster_info = 2;
bool InfoClusterRsp::has_cluster_info() const {
  return this != internal_default_instance() && cluster_info_ != NULL;
}
void InfoClusterRsp::clear_cluster_info() {
  if (GetArenaNoVirtual() == NULL && cluster_info_ != NULL) delete cluster_info_;
  cluster_info_ = NULL;
}
const ::masterproto::ClusterInfo& InfoClusterRsp::cluster_info() const {
  // @@protoc_insertion_point(field_get:masterproto.InfoClusterRsp.cluster_info)
  return cluster_info_ != NULL ? *cluster_info_
                         : *::masterproto::ClusterInfo::internal_default_instance();
}
::masterproto::ClusterInfo* InfoClusterRsp::mutable_cluster_info() {
  
  if (cluster_info_ == NULL) {
    cluster_info_ = new ::masterproto::ClusterInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.InfoClusterRsp.cluster_info)
  return cluster_info_;
}
::masterproto::ClusterInfo* InfoClusterRsp::release_cluster_info() {
  // @@protoc_insertion_point(field_release:masterproto.InfoClusterRsp.cluster_info)
  
  ::masterproto::ClusterInfo* temp = cluster_info_;
  cluster_info_ = NULL;
  return temp;
}
void InfoClusterRsp::set_allocated_cluster_info(::masterproto::ClusterInfo* cluster_info) {
  delete cluster_info_;
  cluster_info_ = cluster_info;
  if (cluster_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.InfoClusterRsp.cluster_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelClusterReq::kHeaderFieldNumber;
const int DelClusterReq::kJobIdFieldNumber;
const int DelClusterReq::kAppIdFieldNumber;
const int DelClusterReq::kRegionIdFieldNumber;
const int DelClusterReq::kSetIdFieldNumber;
const int DelClusterReq::kClusterIdFieldNumber;
const int DelClusterReq::kJobTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelClusterReq::DelClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelClusterReq)
}
DelClusterReq::DelClusterReq(const DelClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_type_));
  // @@protoc_insertion_point(copy_constructor:masterproto.DelClusterReq)
}

void DelClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_type_));
  _cached_size_ = 0;
}

DelClusterReq::~DelClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.DelClusterReq)
  SharedDtor();
}

void DelClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[42].descriptor;
}

const DelClusterReq& DelClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelClusterReq* DelClusterReq::New(::google::protobuf::Arena* arena) const {
  DelClusterReq* n = new DelClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_type_));
}

bool DelClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelClusterReq)
  return false;
#undef DO_
}

void DelClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->app_id(), output);
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->region_id(), output);
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->set_id(), output);
  }

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cluster_id(), output);
  }

  // .masterproto.JobType job_type = 7;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->job_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelClusterReq)
}

::google::protobuf::uint8* DelClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->app_id(), target);
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->region_id(), target);
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->set_id(), target);
  }

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_id(), target);
  }

  // .masterproto.JobType job_type = 7;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->job_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelClusterReq)
  return target;
}

size_t DelClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelClusterReq)
  size_t total_size = 0;

  // string cluster_id = 6;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 app_id = 3;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 4;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 5;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .masterproto.JobType job_type = 7;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelClusterReq)
    MergeFrom(*source);
  }
}

void DelClusterReq::MergeFrom(const DelClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
}

void DelClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelClusterReq::CopyFrom(const DelClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelClusterReq::IsInitialized() const {
  return true;
}

void DelClusterReq::Swap(DelClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelClusterReq::InternalSwap(DelClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelClusterReq

// .cmongoproto.ReqHeader header = 1;
bool DelClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DelClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DelClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DelClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterReq.header)
}

// int64 job_id = 2;
void DelClusterReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DelClusterReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.job_id)
  return job_id_;
}
void DelClusterReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.job_id)
}

// int64 app_id = 3;
void DelClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DelClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.app_id)
  return app_id_;
}
void DelClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.app_id)
}

// int32 region_id = 4;
void DelClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 DelClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.region_id)
  return region_id_;
}
void DelClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.region_id)
}

// int32 set_id = 5;
void DelClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 DelClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.set_id)
  return set_id_;
}
void DelClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.set_id)
}

// string cluster_id = 6;
void DelClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DelClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.cluster_id)
}
#if LANG_CXX11
void DelClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelClusterReq.cluster_id)
}
#endif
void DelClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelClusterReq.cluster_id)
}
void DelClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelClusterReq.cluster_id)
}
::std::string* DelClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterReq.cluster_id)
}

// .masterproto.JobType job_type = 7;
void DelClusterReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType DelClusterReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void DelClusterReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterReq.job_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelClusterRsp::DelClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelClusterRsp)
}
DelClusterRsp::DelClusterRsp(const DelClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelClusterRsp)
}

void DelClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelClusterRsp::~DelClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DelClusterRsp)
  SharedDtor();
}

void DelClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[43].descriptor;
}

const DelClusterRsp& DelClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelClusterRsp* DelClusterRsp::New(::google::protobuf::Arena* arena) const {
  DelClusterRsp* n = new DelClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DelClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelClusterRsp)
  return false;
#undef DO_
}

void DelClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelClusterRsp)
}

::google::protobuf::uint8* DelClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelClusterRsp)
  return target;
}

size_t DelClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelClusterRsp)
    MergeFrom(*source);
  }
}

void DelClusterRsp::MergeFrom(const DelClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DelClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelClusterRsp::CopyFrom(const DelClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelClusterRsp::IsInitialized() const {
  return true;
}

void DelClusterRsp::Swap(DelClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelClusterRsp::InternalSwap(DelClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelClusterRsp

// .cmongoproto.ResHeader header = 1;
bool DelClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DelClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DelClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DelClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClusterReq::kHeaderFieldNumber;
const int ListClusterReq::kAppIdFieldNumber;
const int ListClusterReq::kRegionIdFieldNumber;
const int ListClusterReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClusterReq::ListClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ListClusterReq)
}
ListClusterReq::ListClusterReq(const ListClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ListClusterReq)
}

void ListClusterReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

ListClusterReq::~ListClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.ListClusterReq)
  SharedDtor();
}

void ListClusterReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ListClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[44].descriptor;
}

const ListClusterReq& ListClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClusterReq* ListClusterReq::New(::google::protobuf::Arena* arena) const {
  ListClusterReq* n = new ListClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ListClusterReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool ListClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ListClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ListClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ListClusterReq)
  return false;
#undef DO_
}

void ListClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ListClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ListClusterReq)
}

::google::protobuf::uint8* ListClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ListClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ListClusterReq)
  return target;
}

size_t ListClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ListClusterReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ListClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ListClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ListClusterReq)
    MergeFrom(*source);
  }
}

void ListClusterReq::MergeFrom(const ListClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ListClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void ListClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ListClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClusterReq::CopyFrom(const ListClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ListClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClusterReq::IsInitialized() const {
  return true;
}

void ListClusterReq::Swap(ListClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClusterReq::InternalSwap(ListClusterReq* other) {
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClusterReq

// .cmongoproto.ReqHeader header = 1;
bool ListClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ListClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ListClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ListClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ListClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ListClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ListClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ListClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ListClusterReq.header)
}

// int64 app_id = 2;
void ListClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterReq.app_id)
  return app_id_;
}
void ListClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterReq.app_id)
}

// int32 region_id = 3;
void ListClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 ListClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterReq.region_id)
  return region_id_;
}
void ListClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterReq.region_id)
}

// int32 set_id = 4;
void ListClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 ListClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterReq.set_id)
  return set_id_;
}
void ListClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClusterRsp::kHeaderFieldNumber;
const int ListClusterRsp::kAppIdFieldNumber;
const int ListClusterRsp::kRegionIdFieldNumber;
const int ListClusterRsp::kSetIdFieldNumber;
const int ListClusterRsp::kClusterListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClusterRsp::ListClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ListClusterRsp)
}
ListClusterRsp::ListClusterRsp(const ListClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cluster_list_(from.cluster_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ListClusterRsp)
}

void ListClusterRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

ListClusterRsp::~ListClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ListClusterRsp)
  SharedDtor();
}

void ListClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ListClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[45].descriptor;
}

const ListClusterRsp& ListClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClusterRsp* ListClusterRsp::New(::google::protobuf::Arena* arena) const {
  ListClusterRsp* n = new ListClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ListClusterRsp)
  cluster_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool ListClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ListClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.ClusterInfo cluster_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cluster_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ListClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ListClusterRsp)
  return false;
#undef DO_
}

void ListClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ListClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // repeated .masterproto.ClusterInfo cluster_list = 5;
  for (unsigned int i = 0, n = this->cluster_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cluster_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ListClusterRsp)
}

::google::protobuf::uint8* ListClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ListClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // repeated .masterproto.ClusterInfo cluster_list = 5;
  for (unsigned int i = 0, n = this->cluster_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->cluster_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ListClusterRsp)
  return target;
}

size_t ListClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ListClusterRsp)
  size_t total_size = 0;

  // repeated .masterproto.ClusterInfo cluster_list = 5;
  {
    unsigned int count = this->cluster_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_list(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ListClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ListClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ListClusterRsp)
    MergeFrom(*source);
  }
}

void ListClusterRsp::MergeFrom(const ListClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ListClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_list_.MergeFrom(from.cluster_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void ListClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ListClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClusterRsp::CopyFrom(const ListClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ListClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClusterRsp::IsInitialized() const {
  return true;
}

void ListClusterRsp::Swap(ListClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClusterRsp::InternalSwap(ListClusterRsp* other) {
  cluster_list_.UnsafeArenaSwap(&other->cluster_list_);
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClusterRsp

// .cmongoproto.ResHeader header = 1;
bool ListClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ListClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ListClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ListClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ListClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ListClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ListClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ListClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ListClusterRsp.header)
}

// int64 app_id = 2;
void ListClusterRsp::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListClusterRsp::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterRsp.app_id)
  return app_id_;
}
void ListClusterRsp::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterRsp.app_id)
}

// int32 region_id = 3;
void ListClusterRsp::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 ListClusterRsp::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterRsp.region_id)
  return region_id_;
}
void ListClusterRsp::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterRsp.region_id)
}

// int32 set_id = 4;
void ListClusterRsp::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 ListClusterRsp::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterRsp.set_id)
  return set_id_;
}
void ListClusterRsp::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ListClusterRsp.set_id)
}

// repeated .masterproto.ClusterInfo cluster_list = 5;
int ListClusterRsp::cluster_list_size() const {
  return cluster_list_.size();
}
void ListClusterRsp::clear_cluster_list() {
  cluster_list_.Clear();
}
const ::masterproto::ClusterInfo& ListClusterRsp::cluster_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ListClusterRsp.cluster_list)
  return cluster_list_.Get(index);
}
::masterproto::ClusterInfo* ListClusterRsp::mutable_cluster_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ListClusterRsp.cluster_list)
  return cluster_list_.Mutable(index);
}
::masterproto::ClusterInfo* ListClusterRsp::add_cluster_list() {
  // @@protoc_insertion_point(field_add:masterproto.ListClusterRsp.cluster_list)
  return cluster_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::ClusterInfo >*
ListClusterRsp::mutable_cluster_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ListClusterRsp.cluster_list)
  return &cluster_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::ClusterInfo >&
ListClusterRsp::cluster_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ListClusterRsp.cluster_list)
  return cluster_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChPasswdReq::kHeaderFieldNumber;
const int ChPasswdReq::kAppIdFieldNumber;
const int ChPasswdReq::kRegionIdFieldNumber;
const int ChPasswdReq::kSetIdFieldNumber;
const int ChPasswdReq::kClusterIdFieldNumber;
const int ChPasswdReq::kUserNameFieldNumber;
const int ChPasswdReq::kOldPasswdFieldNumber;
const int ChPasswdReq::kNewPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChPasswdReq::ChPasswdReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChPasswdReq)
}
ChPasswdReq::ChPasswdReq(const ChPasswdReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  old_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_passwd().size() > 0) {
    old_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_passwd_);
  }
  new_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_passwd().size() > 0) {
    new_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_passwd_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ChPasswdReq)
}

void ChPasswdReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

ChPasswdReq::~ChPasswdReq() {
  // @@protoc_insertion_point(destructor:masterproto.ChPasswdReq)
  SharedDtor();
}

void ChPasswdReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChPasswdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChPasswdReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[46].descriptor;
}

const ChPasswdReq& ChPasswdReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChPasswdReq* ChPasswdReq::New(::google::protobuf::Arena* arena) const {
  ChPasswdReq* n = new ChPasswdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChPasswdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChPasswdReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool ChPasswdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChPasswdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChPasswdReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChPasswdReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_passwd = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_passwd().data(), this->old_passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChPasswdReq.old_passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_passwd = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_passwd().data(), this->new_passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChPasswdReq.new_passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChPasswdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChPasswdReq)
  return false;
#undef DO_
}

void ChPasswdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChPasswdReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cluster_id(), output);
  }

  // string user_name = 6;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_name(), output);
  }

  // string old_passwd = 7;
  if (this->old_passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_passwd().data(), this->old_passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.old_passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->old_passwd(), output);
  }

  // string new_passwd = 8;
  if (this->new_passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_passwd().data(), this->new_passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.new_passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->new_passwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChPasswdReq)
}

::google::protobuf::uint8* ChPasswdReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChPasswdReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cluster_id(), target);
  }

  // string user_name = 6;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // string old_passwd = 7;
  if (this->old_passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_passwd().data(), this->old_passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.old_passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->old_passwd(), target);
  }

  // string new_passwd = 8;
  if (this->new_passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_passwd().data(), this->new_passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChPasswdReq.new_passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->new_passwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChPasswdReq)
  return target;
}

size_t ChPasswdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChPasswdReq)
  size_t total_size = 0;

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string user_name = 6;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string old_passwd = 7;
  if (this->old_passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_passwd());
  }

  // string new_passwd = 8;
  if (this->new_passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_passwd());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChPasswdReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChPasswdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChPasswdReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChPasswdReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChPasswdReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChPasswdReq)
    MergeFrom(*source);
  }
}

void ChPasswdReq::MergeFrom(const ChPasswdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChPasswdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.old_passwd().size() > 0) {

    old_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_passwd_);
  }
  if (from.new_passwd().size() > 0) {

    new_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_passwd_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void ChPasswdReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChPasswdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChPasswdReq::CopyFrom(const ChPasswdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChPasswdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChPasswdReq::IsInitialized() const {
  return true;
}

void ChPasswdReq::Swap(ChPasswdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChPasswdReq::InternalSwap(ChPasswdReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  user_name_.Swap(&other->user_name_);
  old_passwd_.Swap(&other->old_passwd_);
  new_passwd_.Swap(&other->new_passwd_);
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChPasswdReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChPasswdReq

// .cmongoproto.ReqHeader header = 1;
bool ChPasswdReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChPasswdReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ChPasswdReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ChPasswdReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ChPasswdReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChPasswdReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdReq.header)
}

// int64 app_id = 2;
void ChPasswdReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ChPasswdReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.app_id)
  return app_id_;
}
void ChPasswdReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.app_id)
}

// int32 region_id = 3;
void ChPasswdReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 ChPasswdReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.region_id)
  return region_id_;
}
void ChPasswdReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.region_id)
}

// int32 set_id = 4;
void ChPasswdReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 ChPasswdReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.set_id)
  return set_id_;
}
void ChPasswdReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.set_id)
}

// string cluster_id = 5;
void ChPasswdReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChPasswdReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ChPasswdReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.cluster_id)
}
#if LANG_CXX11
void ChPasswdReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChPasswdReq.cluster_id)
}
#endif
void ChPasswdReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChPasswdReq.cluster_id)
}
void ChPasswdReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChPasswdReq.cluster_id)
}
::std::string* ChPasswdReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChPasswdReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChPasswdReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdReq.cluster_id)
}

// string user_name = 6;
void ChPasswdReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChPasswdReq::user_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.user_name)
  return user_name_.GetNoArena();
}
void ChPasswdReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.user_name)
}
#if LANG_CXX11
void ChPasswdReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChPasswdReq.user_name)
}
#endif
void ChPasswdReq::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChPasswdReq.user_name)
}
void ChPasswdReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChPasswdReq.user_name)
}
::std::string* ChPasswdReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChPasswdReq::release_user_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChPasswdReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdReq.user_name)
}

// string old_passwd = 7;
void ChPasswdReq::clear_old_passwd() {
  old_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChPasswdReq::old_passwd() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.old_passwd)
  return old_passwd_.GetNoArena();
}
void ChPasswdReq::set_old_passwd(const ::std::string& value) {
  
  old_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.old_passwd)
}
#if LANG_CXX11
void ChPasswdReq::set_old_passwd(::std::string&& value) {
  
  old_passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChPasswdReq.old_passwd)
}
#endif
void ChPasswdReq::set_old_passwd(const char* value) {
  
  old_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChPasswdReq.old_passwd)
}
void ChPasswdReq::set_old_passwd(const char* value, size_t size) {
  
  old_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChPasswdReq.old_passwd)
}
::std::string* ChPasswdReq::mutable_old_passwd() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdReq.old_passwd)
  return old_passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChPasswdReq::release_old_passwd() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdReq.old_passwd)
  
  return old_passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChPasswdReq::set_allocated_old_passwd(::std::string* old_passwd) {
  if (old_passwd != NULL) {
    
  } else {
    
  }
  old_passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_passwd);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdReq.old_passwd)
}

// string new_passwd = 8;
void ChPasswdReq::clear_new_passwd() {
  new_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChPasswdReq::new_passwd() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdReq.new_passwd)
  return new_passwd_.GetNoArena();
}
void ChPasswdReq::set_new_passwd(const ::std::string& value) {
  
  new_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChPasswdReq.new_passwd)
}
#if LANG_CXX11
void ChPasswdReq::set_new_passwd(::std::string&& value) {
  
  new_passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChPasswdReq.new_passwd)
}
#endif
void ChPasswdReq::set_new_passwd(const char* value) {
  
  new_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChPasswdReq.new_passwd)
}
void ChPasswdReq::set_new_passwd(const char* value, size_t size) {
  
  new_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChPasswdReq.new_passwd)
}
::std::string* ChPasswdReq::mutable_new_passwd() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdReq.new_passwd)
  return new_passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChPasswdReq::release_new_passwd() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdReq.new_passwd)
  
  return new_passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChPasswdReq::set_allocated_new_passwd(::std::string* new_passwd) {
  if (new_passwd != NULL) {
    
  } else {
    
  }
  new_passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_passwd);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdReq.new_passwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChPasswdRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChPasswdRsp::ChPasswdRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChPasswdRsp)
}
ChPasswdRsp::ChPasswdRsp(const ChPasswdRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ChPasswdRsp)
}

void ChPasswdRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ChPasswdRsp::~ChPasswdRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ChPasswdRsp)
  SharedDtor();
}

void ChPasswdRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChPasswdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChPasswdRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[47].descriptor;
}

const ChPasswdRsp& ChPasswdRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChPasswdRsp* ChPasswdRsp::New(::google::protobuf::Arena* arena) const {
  ChPasswdRsp* n = new ChPasswdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChPasswdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChPasswdRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ChPasswdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChPasswdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChPasswdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChPasswdRsp)
  return false;
#undef DO_
}

void ChPasswdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChPasswdRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChPasswdRsp)
}

::google::protobuf::uint8* ChPasswdRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChPasswdRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChPasswdRsp)
  return target;
}

size_t ChPasswdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChPasswdRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChPasswdRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChPasswdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChPasswdRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChPasswdRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChPasswdRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChPasswdRsp)
    MergeFrom(*source);
  }
}

void ChPasswdRsp::MergeFrom(const ChPasswdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChPasswdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ChPasswdRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChPasswdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChPasswdRsp::CopyFrom(const ChPasswdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChPasswdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChPasswdRsp::IsInitialized() const {
  return true;
}

void ChPasswdRsp::Swap(ChPasswdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChPasswdRsp::InternalSwap(ChPasswdRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChPasswdRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChPasswdRsp

// .cmongoproto.ResHeader header = 1;
bool ChPasswdRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChPasswdRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ChPasswdRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChPasswdRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ChPasswdRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChPasswdRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ChPasswdRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChPasswdRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChPasswdRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChPasswdRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobStatusReq::kHeaderFieldNumber;
const int JobStatusReq::kJobIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobStatusReq::JobStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.JobStatusReq)
}
JobStatusReq::JobStatusReq(const JobStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  job_id_ = from.job_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.JobStatusReq)
}

void JobStatusReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_id_));
  _cached_size_ = 0;
}

JobStatusReq::~JobStatusReq() {
  // @@protoc_insertion_point(destructor:masterproto.JobStatusReq)
  SharedDtor();
}

void JobStatusReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void JobStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatusReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[48].descriptor;
}

const JobStatusReq& JobStatusReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobStatusReq* JobStatusReq::New(::google::protobuf::Arena* arena) const {
  JobStatusReq* n = new JobStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.JobStatusReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  job_id_ = GOOGLE_LONGLONG(0);
}

bool JobStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.JobStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.JobStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.JobStatusReq)
  return false;
#undef DO_
}

void JobStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.JobStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.JobStatusReq)
}

::google::protobuf::uint8* JobStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.JobStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.JobStatusReq)
  return target;
}

size_t JobStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.JobStatusReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.JobStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.JobStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.JobStatusReq)
    MergeFrom(*source);
  }
}

void JobStatusReq::MergeFrom(const JobStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.JobStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
}

void JobStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.JobStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusReq::CopyFrom(const JobStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.JobStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusReq::IsInitialized() const {
  return true;
}

void JobStatusReq::Swap(JobStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobStatusReq::InternalSwap(JobStatusReq* other) {
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobStatusReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobStatusReq

// .cmongoproto.ReqHeader header = 1;
bool JobStatusReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void JobStatusReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& JobStatusReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.JobStatusReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* JobStatusReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.JobStatusReq.header)
  return header_;
}
::cmongoproto::ReqHeader* JobStatusReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.JobStatusReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void JobStatusReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.JobStatusReq.header)
}

// int64 job_id = 2;
void JobStatusReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 JobStatusReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.JobStatusReq.job_id)
  return job_id_;
}
void JobStatusReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.JobStatusReq.job_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobStatusRsp::kHeaderFieldNumber;
const int JobStatusRsp::kJobInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobStatusRsp::JobStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.JobStatusRsp)
}
JobStatusRsp::JobStatusRsp(const JobStatusRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_job_info()) {
    job_info_ = new ::masterproto::JobInfo(*from.job_info_);
  } else {
    job_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.JobStatusRsp)
}

void JobStatusRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_info_));
  _cached_size_ = 0;
}

JobStatusRsp::~JobStatusRsp() {
  // @@protoc_insertion_point(destructor:masterproto.JobStatusRsp)
  SharedDtor();
}

void JobStatusRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete job_info_;
  }
}

void JobStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatusRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[49].descriptor;
}

const JobStatusRsp& JobStatusRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobStatusRsp* JobStatusRsp::New(::google::protobuf::Arena* arena) const {
  JobStatusRsp* n = new JobStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobStatusRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.JobStatusRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && job_info_ != NULL) {
    delete job_info_;
  }
  job_info_ = NULL;
}

bool JobStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.JobStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobInfo job_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.JobStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.JobStatusRsp)
  return false;
#undef DO_
}

void JobStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.JobStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.JobInfo job_info = 2;
  if (this->has_job_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->job_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.JobStatusRsp)
}

::google::protobuf::uint8* JobStatusRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.JobStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.JobInfo job_info = 2;
  if (this->has_job_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->job_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.JobStatusRsp)
  return target;
}

size_t JobStatusRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.JobStatusRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.JobInfo job_info = 2;
  if (this->has_job_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.JobStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobStatusRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.JobStatusRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.JobStatusRsp)
    MergeFrom(*source);
  }
}

void JobStatusRsp::MergeFrom(const JobStatusRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.JobStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_job_info()) {
    mutable_job_info()->::masterproto::JobInfo::MergeFrom(from.job_info());
  }
}

void JobStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.JobStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusRsp::CopyFrom(const JobStatusRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.JobStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusRsp::IsInitialized() const {
  return true;
}

void JobStatusRsp::Swap(JobStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobStatusRsp::InternalSwap(JobStatusRsp* other) {
  std::swap(header_, other->header_);
  std::swap(job_info_, other->job_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobStatusRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobStatusRsp

// .cmongoproto.ResHeader header = 1;
bool JobStatusRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void JobStatusRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& JobStatusRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.JobStatusRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* JobStatusRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.JobStatusRsp.header)
  return header_;
}
::cmongoproto::ResHeader* JobStatusRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.JobStatusRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void JobStatusRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.JobStatusRsp.header)
}

// .masterproto.JobInfo job_info = 2;
bool JobStatusRsp::has_job_info() const {
  return this != internal_default_instance() && job_info_ != NULL;
}
void JobStatusRsp::clear_job_info() {
  if (GetArenaNoVirtual() == NULL && job_info_ != NULL) delete job_info_;
  job_info_ = NULL;
}
const ::masterproto::JobInfo& JobStatusRsp::job_info() const {
  // @@protoc_insertion_point(field_get:masterproto.JobStatusRsp.job_info)
  return job_info_ != NULL ? *job_info_
                         : *::masterproto::JobInfo::internal_default_instance();
}
::masterproto::JobInfo* JobStatusRsp::mutable_job_info() {
  
  if (job_info_ == NULL) {
    job_info_ = new ::masterproto::JobInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.JobStatusRsp.job_info)
  return job_info_;
}
::masterproto::JobInfo* JobStatusRsp::release_job_info() {
  // @@protoc_insertion_point(field_release:masterproto.JobStatusRsp.job_info)
  
  ::masterproto::JobInfo* temp = job_info_;
  job_info_ = NULL;
  return temp;
}
void JobStatusRsp::set_allocated_job_info(::masterproto::JobInfo* job_info) {
  delete job_info_;
  job_info_ = job_info;
  if (job_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.JobStatusRsp.job_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeClusterReq::kHeaderFieldNumber;
const int ResizeClusterReq::kJobIdFieldNumber;
const int ResizeClusterReq::kJobTypeFieldNumber;
const int ResizeClusterReq::kAppIdFieldNumber;
const int ResizeClusterReq::kRegionIdFieldNumber;
const int ResizeClusterReq::kSetIdFieldNumber;
const int ResizeClusterReq::kClusterIdFieldNumber;
const int ResizeClusterReq::kMachineTypeFieldNumber;
const int ResizeClusterReq::kQuotaFieldNumber;
const int ResizeClusterReq::kCloseCgroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeClusterReq::ResizeClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ResizeClusterReq)
}
ResizeClusterReq::ResizeClusterReq(const ResizeClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_quota()) {
    quota_ = new ::cmongoproto::ResourceDesc(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&close_cgroup_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(close_cgroup_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ResizeClusterReq)
}

void ResizeClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&close_cgroup_) -
    reinterpret_cast<char*>(&header_) + sizeof(close_cgroup_));
  _cached_size_ = 0;
}

ResizeClusterReq::~ResizeClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.ResizeClusterReq)
  SharedDtor();
}

void ResizeClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void ResizeClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[50].descriptor;
}

const ResizeClusterReq& ResizeClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeClusterReq* ResizeClusterReq::New(::google::protobuf::Arena* arena) const {
  ResizeClusterReq* n = new ResizeClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ResizeClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&close_cgroup_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(close_cgroup_));
}

bool ResizeClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ResizeClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ResizeClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MachineType machine_type = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::masterproto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.ResourceDesc quota = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_cgroup = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_cgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ResizeClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ResizeClusterReq)
  return false;
#undef DO_
}

void ResizeClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ResizeClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_type(), output);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->app_id(), output);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->region_id(), output);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->set_id(), output);
  }

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ResizeClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cluster_id(), output);
  }

  // .masterproto.MachineType machine_type = 8;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->machine_type(), output);
  }

  // .cmongoproto.ResourceDesc quota = 9;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->quota_, output);
  }

  // int32 close_cgroup = 10;
  if (this->close_cgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->close_cgroup(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ResizeClusterReq)
}

::google::protobuf::uint8* ResizeClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ResizeClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_type(), target);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->app_id(), target);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->region_id(), target);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->set_id(), target);
  }

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ResizeClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cluster_id(), target);
  }

  // .masterproto.MachineType machine_type = 8;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->machine_type(), target);
  }

  // .cmongoproto.ResourceDesc quota = 9;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->quota_, false, target);
  }

  // int32 close_cgroup = 10;
  if (this->close_cgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->close_cgroup(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ResizeClusterReq)
  return target;
}

size_t ResizeClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ResizeClusterReq)
  size_t total_size = 0;

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.ResourceDesc quota = 9;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .masterproto.MachineType machine_type = 8;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int32 close_cgroup = 10;
  if (this->close_cgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_cgroup());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ResizeClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ResizeClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ResizeClusterReq)
    MergeFrom(*source);
  }
}

void ResizeClusterReq::MergeFrom(const ResizeClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ResizeClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_quota()) {
    mutable_quota()->::cmongoproto::ResourceDesc::MergeFrom(from.quota());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.close_cgroup() != 0) {
    set_close_cgroup(from.close_cgroup());
  }
}

void ResizeClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ResizeClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeClusterReq::CopyFrom(const ResizeClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ResizeClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeClusterReq::IsInitialized() const {
  return true;
}

void ResizeClusterReq::Swap(ResizeClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeClusterReq::InternalSwap(ResizeClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(quota_, other->quota_);
  std::swap(job_id_, other->job_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(close_cgroup_, other->close_cgroup_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeClusterReq

// .cmongoproto.ReqHeader header = 1;
bool ResizeClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ResizeClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ResizeClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ResizeClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeClusterReq.header)
}

// int64 job_id = 2;
void ResizeClusterReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResizeClusterReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.job_id)
  return job_id_;
}
void ResizeClusterReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.job_id)
}

// .masterproto.JobType job_type = 3;
void ResizeClusterReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType ResizeClusterReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void ResizeClusterReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.job_type)
}

// int64 app_id = 4;
void ResizeClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResizeClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.app_id)
  return app_id_;
}
void ResizeClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.app_id)
}

// int32 region_id = 5;
void ResizeClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 ResizeClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.region_id)
  return region_id_;
}
void ResizeClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.region_id)
}

// int32 set_id = 6;
void ResizeClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 ResizeClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.set_id)
  return set_id_;
}
void ResizeClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.set_id)
}

// string cluster_id = 7;
void ResizeClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResizeClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ResizeClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.cluster_id)
}
#if LANG_CXX11
void ResizeClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ResizeClusterReq.cluster_id)
}
#endif
void ResizeClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ResizeClusterReq.cluster_id)
}
void ResizeClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ResizeClusterReq.cluster_id)
}
::std::string* ResizeClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResizeClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResizeClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeClusterReq.cluster_id)
}

// .masterproto.MachineType machine_type = 8;
void ResizeClusterReq::clear_machine_type() {
  machine_type_ = 0;
}
::masterproto::MachineType ResizeClusterReq::machine_type() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.machine_type)
  return static_cast< ::masterproto::MachineType >(machine_type_);
}
void ResizeClusterReq::set_machine_type(::masterproto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.machine_type)
}

// .cmongoproto.ResourceDesc quota = 9;
bool ResizeClusterReq::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void ResizeClusterReq::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::cmongoproto::ResourceDesc& ResizeClusterReq::quota() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.quota)
  return quota_ != NULL ? *quota_
                         : *::cmongoproto::ResourceDesc::internal_default_instance();
}
::cmongoproto::ResourceDesc* ResizeClusterReq::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::cmongoproto::ResourceDesc;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeClusterReq.quota)
  return quota_;
}
::cmongoproto::ResourceDesc* ResizeClusterReq::release_quota() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeClusterReq.quota)
  
  ::cmongoproto::ResourceDesc* temp = quota_;
  quota_ = NULL;
  return temp;
}
void ResizeClusterReq::set_allocated_quota(::cmongoproto::ResourceDesc* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeClusterReq.quota)
}

// int32 close_cgroup = 10;
void ResizeClusterReq::clear_close_cgroup() {
  close_cgroup_ = 0;
}
::google::protobuf::int32 ResizeClusterReq::close_cgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterReq.close_cgroup)
  return close_cgroup_;
}
void ResizeClusterReq::set_close_cgroup(::google::protobuf::int32 value) {
  
  close_cgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeClusterReq.close_cgroup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeClusterRsp::ResizeClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ResizeClusterRsp)
}
ResizeClusterRsp::ResizeClusterRsp(const ResizeClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ResizeClusterRsp)
}

void ResizeClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ResizeClusterRsp::~ResizeClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ResizeClusterRsp)
  SharedDtor();
}

void ResizeClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ResizeClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[51].descriptor;
}

const ResizeClusterRsp& ResizeClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeClusterRsp* ResizeClusterRsp::New(::google::protobuf::Arena* arena) const {
  ResizeClusterRsp* n = new ResizeClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ResizeClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ResizeClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ResizeClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ResizeClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ResizeClusterRsp)
  return false;
#undef DO_
}

void ResizeClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ResizeClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ResizeClusterRsp)
}

::google::protobuf::uint8* ResizeClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ResizeClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ResizeClusterRsp)
  return target;
}

size_t ResizeClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ResizeClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ResizeClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ResizeClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ResizeClusterRsp)
    MergeFrom(*source);
  }
}

void ResizeClusterRsp::MergeFrom(const ResizeClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ResizeClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ResizeClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ResizeClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeClusterRsp::CopyFrom(const ResizeClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ResizeClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeClusterRsp::IsInitialized() const {
  return true;
}

void ResizeClusterRsp::Swap(ResizeClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeClusterRsp::InternalSwap(ResizeClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeClusterRsp

// .cmongoproto.ResHeader header = 1;
bool ResizeClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ResizeClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ResizeClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ResizeClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupClusterReq::kHeaderFieldNumber;
const int BackupClusterReq::kJobIdFieldNumber;
const int BackupClusterReq::kJobTypeFieldNumber;
const int BackupClusterReq::kAppIdFieldNumber;
const int BackupClusterReq::kRegionIdFieldNumber;
const int BackupClusterReq::kSetIdFieldNumber;
const int BackupClusterReq::kClusterIdFieldNumber;
const int BackupClusterReq::kPeroidFieldNumber;
const int BackupClusterReq::kBackTypeFieldNumber;
const int BackupClusterReq::kDbFieldNumber;
const int BackupClusterReq::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupClusterReq::BackupClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BackupClusterReq)
}
BackupClusterReq::BackupClusterReq(const BackupClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&peroid_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(peroid_));
  // @@protoc_insertion_point(copy_constructor:masterproto.BackupClusterReq)
}

void BackupClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&peroid_) -
    reinterpret_cast<char*>(&header_) + sizeof(peroid_));
  _cached_size_ = 0;
}

BackupClusterReq::~BackupClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.BackupClusterReq)
  SharedDtor();
}

void BackupClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BackupClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[52].descriptor;
}

const BackupClusterReq& BackupClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupClusterReq* BackupClusterReq::New(::google::protobuf::Arena* arena) const {
  BackupClusterReq* n = new BackupClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BackupClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&peroid_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(peroid_));
}

bool BackupClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BackupClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 peroid = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool back_type = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupClusterReq.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupClusterReq.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BackupClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BackupClusterReq)
  return false;
#undef DO_
}

void BackupClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BackupClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_type(), output);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->app_id(), output);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->region_id(), output);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->set_id(), output);
  }

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cluster_id(), output);
  }

  // int64 peroid = 8;
  if (this->peroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->peroid(), output);
  }

  // bool back_type = 9;
  if (this->back_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->back_type(), output);
  }

  // string db = 10;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->db(), output);
  }

  // string table = 11;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->table(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BackupClusterReq)
}

::google::protobuf::uint8* BackupClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BackupClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_type(), target);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->app_id(), target);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->region_id(), target);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->set_id(), target);
  }

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cluster_id(), target);
  }

  // int64 peroid = 8;
  if (this->peroid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->peroid(), target);
  }

  // bool back_type = 9;
  if (this->back_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->back_type(), target);
  }

  // string db = 10;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->db(), target);
  }

  // string table = 11;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterReq.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BackupClusterReq)
  return target;
}

size_t BackupClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BackupClusterReq)
  size_t total_size = 0;

  // string cluster_id = 7;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string db = 10;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string table = 11;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // bool back_type = 9;
  if (this->back_type() != 0) {
    total_size += 1 + 1;
  }

  // int64 peroid = 8;
  if (this->peroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peroid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BackupClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BackupClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BackupClusterReq)
    MergeFrom(*source);
  }
}

void BackupClusterReq::MergeFrom(const BackupClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BackupClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.back_type() != 0) {
    set_back_type(from.back_type());
  }
  if (from.peroid() != 0) {
    set_peroid(from.peroid());
  }
}

void BackupClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BackupClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupClusterReq::CopyFrom(const BackupClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BackupClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupClusterReq::IsInitialized() const {
  return true;
}

void BackupClusterReq::Swap(BackupClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupClusterReq::InternalSwap(BackupClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  db_.Swap(&other->db_);
  table_.Swap(&other->table_);
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(back_type_, other->back_type_);
  std::swap(peroid_, other->peroid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupClusterReq

// .cmongoproto.ReqHeader header = 1;
bool BackupClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BackupClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& BackupClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* BackupClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* BackupClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BackupClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterReq.header)
}

// int64 job_id = 2;
void BackupClusterReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BackupClusterReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.job_id)
  return job_id_;
}
void BackupClusterReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.job_id)
}

// .masterproto.JobType job_type = 3;
void BackupClusterReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType BackupClusterReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void BackupClusterReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.job_type)
}

// int64 app_id = 4;
void BackupClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BackupClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.app_id)
  return app_id_;
}
void BackupClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.app_id)
}

// int32 region_id = 5;
void BackupClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 BackupClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.region_id)
  return region_id_;
}
void BackupClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.region_id)
}

// int32 set_id = 6;
void BackupClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 BackupClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.set_id)
  return set_id_;
}
void BackupClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.set_id)
}

// string cluster_id = 7;
void BackupClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void BackupClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.cluster_id)
}
#if LANG_CXX11
void BackupClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupClusterReq.cluster_id)
}
#endif
void BackupClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupClusterReq.cluster_id)
}
void BackupClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupClusterReq.cluster_id)
}
::std::string* BackupClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterReq.cluster_id)
}

// int64 peroid = 8;
void BackupClusterReq::clear_peroid() {
  peroid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BackupClusterReq::peroid() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.peroid)
  return peroid_;
}
void BackupClusterReq::set_peroid(::google::protobuf::int64 value) {
  
  peroid_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.peroid)
}

// bool back_type = 9;
void BackupClusterReq::clear_back_type() {
  back_type_ = false;
}
bool BackupClusterReq::back_type() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.back_type)
  return back_type_;
}
void BackupClusterReq::set_back_type(bool value) {
  
  back_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.back_type)
}

// string db = 10;
void BackupClusterReq::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupClusterReq::db() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.db)
  return db_.GetNoArena();
}
void BackupClusterReq::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.db)
}
#if LANG_CXX11
void BackupClusterReq::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupClusterReq.db)
}
#endif
void BackupClusterReq::set_db(const char* value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupClusterReq.db)
}
void BackupClusterReq::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupClusterReq.db)
}
::std::string* BackupClusterReq::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterReq.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupClusterReq::release_db() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterReq.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupClusterReq::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterReq.db)
}

// string table = 11;
void BackupClusterReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupClusterReq::table() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterReq.table)
  return table_.GetNoArena();
}
void BackupClusterReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterReq.table)
}
#if LANG_CXX11
void BackupClusterReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupClusterReq.table)
}
#endif
void BackupClusterReq::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupClusterReq.table)
}
void BackupClusterReq::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupClusterReq.table)
}
::std::string* BackupClusterReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupClusterReq::release_table() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupClusterReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterReq.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupClusterRsp::kHeaderFieldNumber;
const int BackupClusterRsp::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupClusterRsp::BackupClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BackupClusterRsp)
}
BackupClusterRsp::BackupClusterRsp(const BackupClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.BackupClusterRsp)
}

void BackupClusterRsp::SharedCtor() {
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

BackupClusterRsp::~BackupClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.BackupClusterRsp)
  SharedDtor();
}

void BackupClusterRsp::SharedDtor() {
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BackupClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[53].descriptor;
}

const BackupClusterRsp& BackupClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupClusterRsp* BackupClusterRsp::New(::google::protobuf::Arena* arena) const {
  BackupClusterRsp* n = new BackupClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BackupClusterRsp)
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool BackupClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BackupClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BackupClusterRsp.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BackupClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BackupClusterRsp)
  return false;
#undef DO_
}

void BackupClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BackupClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string start_time = 2;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterRsp.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BackupClusterRsp)
}

::google::protobuf::uint8* BackupClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BackupClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string start_time = 2;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BackupClusterRsp.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BackupClusterRsp)
  return target;
}

size_t BackupClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BackupClusterRsp)
  size_t total_size = 0;

  // string start_time = 2;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BackupClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BackupClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BackupClusterRsp)
    MergeFrom(*source);
  }
}

void BackupClusterRsp::MergeFrom(const BackupClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BackupClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void BackupClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BackupClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupClusterRsp::CopyFrom(const BackupClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BackupClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupClusterRsp::IsInitialized() const {
  return true;
}

void BackupClusterRsp::Swap(BackupClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupClusterRsp::InternalSwap(BackupClusterRsp* other) {
  start_time_.Swap(&other->start_time_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupClusterRsp

// .cmongoproto.ResHeader header = 1;
bool BackupClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BackupClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& BackupClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* BackupClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* BackupClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BackupClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterRsp.header)
}

// string start_time = 2;
void BackupClusterRsp::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackupClusterRsp::start_time() const {
  // @@protoc_insertion_point(field_get:masterproto.BackupClusterRsp.start_time)
  return start_time_.GetNoArena();
}
void BackupClusterRsp::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BackupClusterRsp.start_time)
}
#if LANG_CXX11
void BackupClusterRsp::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BackupClusterRsp.start_time)
}
#endif
void BackupClusterRsp::set_start_time(const char* value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BackupClusterRsp.start_time)
}
void BackupClusterRsp::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BackupClusterRsp.start_time)
}
::std::string* BackupClusterRsp::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BackupClusterRsp.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupClusterRsp::release_start_time() {
  // @@protoc_insertion_point(field_release:masterproto.BackupClusterRsp.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupClusterRsp::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BackupClusterRsp.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryBackupListReq::kHeaderFieldNumber;
const int QueryBackupListReq::kAppIdFieldNumber;
const int QueryBackupListReq::kRegionIdFieldNumber;
const int QueryBackupListReq::kSetIdFieldNumber;
const int QueryBackupListReq::kClusterIdFieldNumber;
const int QueryBackupListReq::kStartTimeFieldNumber;
const int QueryBackupListReq::kEndTimeFieldNumber;
const int QueryBackupListReq::kDbFieldNumber;
const int QueryBackupListReq::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryBackupListReq::QueryBackupListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryBackupListReq)
}
QueryBackupListReq::QueryBackupListReq(const QueryBackupListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryBackupListReq)
}

void QueryBackupListReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

QueryBackupListReq::~QueryBackupListReq() {
  // @@protoc_insertion_point(destructor:masterproto.QueryBackupListReq)
  SharedDtor();
}

void QueryBackupListReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryBackupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBackupListReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[54].descriptor;
}

const QueryBackupListReq& QueryBackupListReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryBackupListReq* QueryBackupListReq::New(::google::protobuf::Arena* arena) const {
  QueryBackupListReq* n = new QueryBackupListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryBackupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryBackupListReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool QueryBackupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryBackupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryBackupListReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_time = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryBackupListReq.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryBackupListReq.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryBackupListReq.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryBackupListReq.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryBackupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryBackupListReq)
  return false;
#undef DO_
}

void QueryBackupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryBackupListReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cluster_id(), output);
  }

  // string start_time = 6;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start_time(), output);
  }

  // string end_time = 7;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->end_time(), output);
  }

  // string db = 8;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->db(), output);
  }

  // string table = 9;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->table(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryBackupListReq)
}

::google::protobuf::uint8* QueryBackupListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryBackupListReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cluster_id(), target);
  }

  // string start_time = 6;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start_time(), target);
  }

  // string end_time = 7;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->end_time(), target);
  }

  // string db = 8;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->db(), target);
  }

  // string table = 9;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryBackupListReq.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryBackupListReq)
  return target;
}

size_t QueryBackupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryBackupListReq)
  size_t total_size = 0;

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string start_time = 6;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string end_time = 7;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // string db = 8;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string table = 9;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBackupListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryBackupListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBackupListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryBackupListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryBackupListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryBackupListReq)
    MergeFrom(*source);
  }
}

void QueryBackupListReq::MergeFrom(const QueryBackupListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryBackupListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void QueryBackupListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryBackupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBackupListReq::CopyFrom(const QueryBackupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryBackupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBackupListReq::IsInitialized() const {
  return true;
}

void QueryBackupListReq::Swap(QueryBackupListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryBackupListReq::InternalSwap(QueryBackupListReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  start_time_.Swap(&other->start_time_);
  end_time_.Swap(&other->end_time_);
  db_.Swap(&other->db_);
  table_.Swap(&other->table_);
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryBackupListReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryBackupListReq

// .cmongoproto.ReqHeader header = 1;
bool QueryBackupListReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryBackupListReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& QueryBackupListReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* QueryBackupListReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.header)
  return header_;
}
::cmongoproto::ReqHeader* QueryBackupListReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryBackupListReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.header)
}

// int64 app_id = 2;
void QueryBackupListReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QueryBackupListReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.app_id)
  return app_id_;
}
void QueryBackupListReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.app_id)
}

// int32 region_id = 3;
void QueryBackupListReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 QueryBackupListReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.region_id)
  return region_id_;
}
void QueryBackupListReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.region_id)
}

// int32 set_id = 4;
void QueryBackupListReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 QueryBackupListReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.set_id)
  return set_id_;
}
void QueryBackupListReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.set_id)
}

// string cluster_id = 5;
void QueryBackupListReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryBackupListReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void QueryBackupListReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.cluster_id)
}
#if LANG_CXX11
void QueryBackupListReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryBackupListReq.cluster_id)
}
#endif
void QueryBackupListReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryBackupListReq.cluster_id)
}
void QueryBackupListReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryBackupListReq.cluster_id)
}
::std::string* QueryBackupListReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryBackupListReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryBackupListReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.cluster_id)
}

// string start_time = 6;
void QueryBackupListReq::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryBackupListReq::start_time() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.start_time)
  return start_time_.GetNoArena();
}
void QueryBackupListReq::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.start_time)
}
#if LANG_CXX11
void QueryBackupListReq::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryBackupListReq.start_time)
}
#endif
void QueryBackupListReq::set_start_time(const char* value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryBackupListReq.start_time)
}
void QueryBackupListReq::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryBackupListReq.start_time)
}
::std::string* QueryBackupListReq::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryBackupListReq::release_start_time() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryBackupListReq::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.start_time)
}

// string end_time = 7;
void QueryBackupListReq::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryBackupListReq::end_time() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.end_time)
  return end_time_.GetNoArena();
}
void QueryBackupListReq::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.end_time)
}
#if LANG_CXX11
void QueryBackupListReq::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryBackupListReq.end_time)
}
#endif
void QueryBackupListReq::set_end_time(const char* value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryBackupListReq.end_time)
}
void QueryBackupListReq::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryBackupListReq.end_time)
}
::std::string* QueryBackupListReq::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryBackupListReq::release_end_time() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryBackupListReq::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.end_time)
}

// string db = 8;
void QueryBackupListReq::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryBackupListReq::db() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.db)
  return db_.GetNoArena();
}
void QueryBackupListReq::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.db)
}
#if LANG_CXX11
void QueryBackupListReq::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryBackupListReq.db)
}
#endif
void QueryBackupListReq::set_db(const char* value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryBackupListReq.db)
}
void QueryBackupListReq::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryBackupListReq.db)
}
::std::string* QueryBackupListReq::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryBackupListReq::release_db() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryBackupListReq::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.db)
}

// string table = 9;
void QueryBackupListReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryBackupListReq::table() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListReq.table)
  return table_.GetNoArena();
}
void QueryBackupListReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryBackupListReq.table)
}
#if LANG_CXX11
void QueryBackupListReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryBackupListReq.table)
}
#endif
void QueryBackupListReq::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryBackupListReq.table)
}
void QueryBackupListReq::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryBackupListReq.table)
}
::std::string* QueryBackupListReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryBackupListReq::release_table() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryBackupListReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListReq.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryBackupListRsp::kHeaderFieldNumber;
const int QueryBackupListRsp::kBackupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryBackupListRsp::QueryBackupListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryBackupListRsp)
}
QueryBackupListRsp::QueryBackupListRsp(const QueryBackupListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      backup_list_(from.backup_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryBackupListRsp)
}

void QueryBackupListRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

QueryBackupListRsp::~QueryBackupListRsp() {
  // @@protoc_insertion_point(destructor:masterproto.QueryBackupListRsp)
  SharedDtor();
}

void QueryBackupListRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryBackupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBackupListRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[55].descriptor;
}

const QueryBackupListRsp& QueryBackupListRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryBackupListRsp* QueryBackupListRsp::New(::google::protobuf::Arena* arena) const {
  QueryBackupListRsp* n = new QueryBackupListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryBackupListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryBackupListRsp)
  backup_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool QueryBackupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryBackupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.BackupInfo backup_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_backup_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryBackupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryBackupListRsp)
  return false;
#undef DO_
}

void QueryBackupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryBackupListRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.BackupInfo backup_list = 2;
  for (unsigned int i = 0, n = this->backup_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->backup_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryBackupListRsp)
}

::google::protobuf::uint8* QueryBackupListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryBackupListRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.BackupInfo backup_list = 2;
  for (unsigned int i = 0, n = this->backup_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->backup_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryBackupListRsp)
  return target;
}

size_t QueryBackupListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryBackupListRsp)
  size_t total_size = 0;

  // repeated .masterproto.BackupInfo backup_list = 2;
  {
    unsigned int count = this->backup_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backup_list(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBackupListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryBackupListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBackupListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryBackupListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryBackupListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryBackupListRsp)
    MergeFrom(*source);
  }
}

void QueryBackupListRsp::MergeFrom(const QueryBackupListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryBackupListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backup_list_.MergeFrom(from.backup_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void QueryBackupListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryBackupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBackupListRsp::CopyFrom(const QueryBackupListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryBackupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBackupListRsp::IsInitialized() const {
  return true;
}

void QueryBackupListRsp::Swap(QueryBackupListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryBackupListRsp::InternalSwap(QueryBackupListRsp* other) {
  backup_list_.UnsafeArenaSwap(&other->backup_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryBackupListRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryBackupListRsp

// .cmongoproto.ResHeader header = 1;
bool QueryBackupListRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryBackupListRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& QueryBackupListRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* QueryBackupListRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListRsp.header)
  return header_;
}
::cmongoproto::ResHeader* QueryBackupListRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryBackupListRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryBackupListRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryBackupListRsp.header)
}

// repeated .masterproto.BackupInfo backup_list = 2;
int QueryBackupListRsp::backup_list_size() const {
  return backup_list_.size();
}
void QueryBackupListRsp::clear_backup_list() {
  backup_list_.Clear();
}
const ::masterproto::BackupInfo& QueryBackupListRsp::backup_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.QueryBackupListRsp.backup_list)
  return backup_list_.Get(index);
}
::masterproto::BackupInfo* QueryBackupListRsp::mutable_backup_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.QueryBackupListRsp.backup_list)
  return backup_list_.Mutable(index);
}
::masterproto::BackupInfo* QueryBackupListRsp::add_backup_list() {
  // @@protoc_insertion_point(field_add:masterproto.QueryBackupListRsp.backup_list)
  return backup_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::BackupInfo >*
QueryBackupListRsp::mutable_backup_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.QueryBackupListRsp.backup_list)
  return &backup_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::BackupInfo >&
QueryBackupListRsp::backup_list() const {
  // @@protoc_insertion_point(field_list:masterproto.QueryBackupListRsp.backup_list)
  return backup_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRestoreTsReq::kHeaderFieldNumber;
const int CheckRestoreTsReq::kAppIdFieldNumber;
const int CheckRestoreTsReq::kRegionIdFieldNumber;
const int CheckRestoreTsReq::kSetIdFieldNumber;
const int CheckRestoreTsReq::kClusterIdFieldNumber;
const int CheckRestoreTsReq::kTimeStampFieldNumber;
const int CheckRestoreTsReq::kDbFieldNumber;
const int CheckRestoreTsReq::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRestoreTsReq::CheckRestoreTsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CheckRestoreTsReq)
}
CheckRestoreTsReq::CheckRestoreTsReq(const CheckRestoreTsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  time_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time_stamp().size() > 0) {
    time_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_stamp_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.CheckRestoreTsReq)
}

void CheckRestoreTsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

CheckRestoreTsReq::~CheckRestoreTsReq() {
  // @@protoc_insertion_point(destructor:masterproto.CheckRestoreTsReq)
  SharedDtor();
}

void CheckRestoreTsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CheckRestoreTsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRestoreTsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[56].descriptor;
}

const CheckRestoreTsReq& CheckRestoreTsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckRestoreTsReq* CheckRestoreTsReq::New(::google::protobuf::Arena* arena) const {
  CheckRestoreTsReq* n = new CheckRestoreTsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRestoreTsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CheckRestoreTsReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(set_id_));
}

bool CheckRestoreTsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CheckRestoreTsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CheckRestoreTsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time_stamp = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_stamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time_stamp().data(), this->time_stamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CheckRestoreTsReq.time_stamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CheckRestoreTsReq.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CheckRestoreTsReq.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CheckRestoreTsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CheckRestoreTsReq)
  return false;
#undef DO_
}

void CheckRestoreTsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CheckRestoreTsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->app_id(), output);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->set_id(), output);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cluster_id(), output);
  }

  // string time_stamp = 6;
  if (this->time_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.time_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->time_stamp(), output);
  }

  // string db = 7;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->db(), output);
  }

  // string table = 8;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->table(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CheckRestoreTsReq)
}

::google::protobuf::uint8* CheckRestoreTsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CheckRestoreTsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->app_id(), target);
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->set_id(), target);
  }

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cluster_id(), target);
  }

  // string time_stamp = 6;
  if (this->time_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.time_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->time_stamp(), target);
  }

  // string db = 7;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->db(), target);
  }

  // string table = 8;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CheckRestoreTsReq.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CheckRestoreTsReq)
  return target;
}

size_t CheckRestoreTsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CheckRestoreTsReq)
  size_t total_size = 0;

  // string cluster_id = 5;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string time_stamp = 6;
  if (this->time_stamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time_stamp());
  }

  // string db = 7;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string table = 8;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 app_id = 2;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // int32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 4;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRestoreTsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CheckRestoreTsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRestoreTsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRestoreTsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CheckRestoreTsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CheckRestoreTsReq)
    MergeFrom(*source);
  }
}

void CheckRestoreTsReq::MergeFrom(const CheckRestoreTsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CheckRestoreTsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.time_stamp().size() > 0) {

    time_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_stamp_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void CheckRestoreTsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CheckRestoreTsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRestoreTsReq::CopyFrom(const CheckRestoreTsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CheckRestoreTsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRestoreTsReq::IsInitialized() const {
  return true;
}

void CheckRestoreTsReq::Swap(CheckRestoreTsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRestoreTsReq::InternalSwap(CheckRestoreTsReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  time_stamp_.Swap(&other->time_stamp_);
  db_.Swap(&other->db_);
  table_.Swap(&other->table_);
  std::swap(header_, other->header_);
  std::swap(app_id_, other->app_id_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRestoreTsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRestoreTsReq

// .cmongoproto.ReqHeader header = 1;
bool CheckRestoreTsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CheckRestoreTsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CheckRestoreTsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CheckRestoreTsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CheckRestoreTsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CheckRestoreTsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsReq.header)
}

// int64 app_id = 2;
void CheckRestoreTsReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CheckRestoreTsReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.app_id)
  return app_id_;
}
void CheckRestoreTsReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.app_id)
}

// int32 region_id = 3;
void CheckRestoreTsReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 CheckRestoreTsReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.region_id)
  return region_id_;
}
void CheckRestoreTsReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.region_id)
}

// int32 set_id = 4;
void CheckRestoreTsReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 CheckRestoreTsReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.set_id)
  return set_id_;
}
void CheckRestoreTsReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.set_id)
}

// string cluster_id = 5;
void CheckRestoreTsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckRestoreTsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void CheckRestoreTsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.cluster_id)
}
#if LANG_CXX11
void CheckRestoreTsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CheckRestoreTsReq.cluster_id)
}
#endif
void CheckRestoreTsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CheckRestoreTsReq.cluster_id)
}
void CheckRestoreTsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CheckRestoreTsReq.cluster_id)
}
::std::string* CheckRestoreTsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRestoreTsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRestoreTsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsReq.cluster_id)
}

// string time_stamp = 6;
void CheckRestoreTsReq::clear_time_stamp() {
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckRestoreTsReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.time_stamp)
  return time_stamp_.GetNoArena();
}
void CheckRestoreTsReq::set_time_stamp(const ::std::string& value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.time_stamp)
}
#if LANG_CXX11
void CheckRestoreTsReq::set_time_stamp(::std::string&& value) {
  
  time_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CheckRestoreTsReq.time_stamp)
}
#endif
void CheckRestoreTsReq::set_time_stamp(const char* value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CheckRestoreTsReq.time_stamp)
}
void CheckRestoreTsReq::set_time_stamp(const char* value, size_t size) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CheckRestoreTsReq.time_stamp)
}
::std::string* CheckRestoreTsReq::mutable_time_stamp() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsReq.time_stamp)
  return time_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRestoreTsReq::release_time_stamp() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsReq.time_stamp)
  
  return time_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRestoreTsReq::set_allocated_time_stamp(::std::string* time_stamp) {
  if (time_stamp != NULL) {
    
  } else {
    
  }
  time_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_stamp);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsReq.time_stamp)
}

// string db = 7;
void CheckRestoreTsReq::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckRestoreTsReq::db() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.db)
  return db_.GetNoArena();
}
void CheckRestoreTsReq::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.db)
}
#if LANG_CXX11
void CheckRestoreTsReq::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CheckRestoreTsReq.db)
}
#endif
void CheckRestoreTsReq::set_db(const char* value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CheckRestoreTsReq.db)
}
void CheckRestoreTsReq::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CheckRestoreTsReq.db)
}
::std::string* CheckRestoreTsReq::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsReq.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRestoreTsReq::release_db() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsReq.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRestoreTsReq::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsReq.db)
}

// string table = 8;
void CheckRestoreTsReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckRestoreTsReq::table() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsReq.table)
  return table_.GetNoArena();
}
void CheckRestoreTsReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsReq.table)
}
#if LANG_CXX11
void CheckRestoreTsReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CheckRestoreTsReq.table)
}
#endif
void CheckRestoreTsReq::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CheckRestoreTsReq.table)
}
void CheckRestoreTsReq::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CheckRestoreTsReq.table)
}
::std::string* CheckRestoreTsReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRestoreTsReq::release_table() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRestoreTsReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsReq.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRestoreTsRsp::kHeaderFieldNumber;
const int CheckRestoreTsRsp::kCheckResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRestoreTsRsp::CheckRestoreTsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CheckRestoreTsRsp)
}
CheckRestoreTsRsp::CheckRestoreTsRsp(const CheckRestoreTsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  check_result_ = from.check_result_;
  // @@protoc_insertion_point(copy_constructor:masterproto.CheckRestoreTsRsp)
}

void CheckRestoreTsRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&check_result_) -
    reinterpret_cast<char*>(&header_) + sizeof(check_result_));
  _cached_size_ = 0;
}

CheckRestoreTsRsp::~CheckRestoreTsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.CheckRestoreTsRsp)
  SharedDtor();
}

void CheckRestoreTsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CheckRestoreTsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRestoreTsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[57].descriptor;
}

const CheckRestoreTsRsp& CheckRestoreTsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckRestoreTsRsp* CheckRestoreTsRsp::New(::google::protobuf::Arena* arena) const {
  CheckRestoreTsRsp* n = new CheckRestoreTsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRestoreTsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CheckRestoreTsRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  check_result_ = false;
}

bool CheckRestoreTsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CheckRestoreTsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool check_result = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CheckRestoreTsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CheckRestoreTsRsp)
  return false;
#undef DO_
}

void CheckRestoreTsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CheckRestoreTsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool check_result = 2;
  if (this->check_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->check_result(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CheckRestoreTsRsp)
}

::google::protobuf::uint8* CheckRestoreTsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CheckRestoreTsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // bool check_result = 2;
  if (this->check_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->check_result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CheckRestoreTsRsp)
  return target;
}

size_t CheckRestoreTsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CheckRestoreTsRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool check_result = 2;
  if (this->check_result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRestoreTsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CheckRestoreTsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRestoreTsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRestoreTsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CheckRestoreTsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CheckRestoreTsRsp)
    MergeFrom(*source);
  }
}

void CheckRestoreTsRsp::MergeFrom(const CheckRestoreTsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CheckRestoreTsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.check_result() != 0) {
    set_check_result(from.check_result());
  }
}

void CheckRestoreTsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CheckRestoreTsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRestoreTsRsp::CopyFrom(const CheckRestoreTsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CheckRestoreTsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRestoreTsRsp::IsInitialized() const {
  return true;
}

void CheckRestoreTsRsp::Swap(CheckRestoreTsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRestoreTsRsp::InternalSwap(CheckRestoreTsRsp* other) {
  std::swap(header_, other->header_);
  std::swap(check_result_, other->check_result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRestoreTsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRestoreTsRsp

// .cmongoproto.ResHeader header = 1;
bool CheckRestoreTsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CheckRestoreTsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CheckRestoreTsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CheckRestoreTsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CheckRestoreTsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* CheckRestoreTsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CheckRestoreTsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CheckRestoreTsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CheckRestoreTsRsp.header)
}

// bool check_result = 2;
void CheckRestoreTsRsp::clear_check_result() {
  check_result_ = false;
}
bool CheckRestoreTsRsp::check_result() const {
  // @@protoc_insertion_point(field_get:masterproto.CheckRestoreTsRsp.check_result)
  return check_result_;
}
void CheckRestoreTsRsp::set_check_result(bool value) {
  
  check_result_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CheckRestoreTsRsp.check_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreClusterReq::kHeaderFieldNumber;
const int RestoreClusterReq::kJobIdFieldNumber;
const int RestoreClusterReq::kJobTypeFieldNumber;
const int RestoreClusterReq::kAppIdFieldNumber;
const int RestoreClusterReq::kRegionIdFieldNumber;
const int RestoreClusterReq::kSetIdFieldNumber;
const int RestoreClusterReq::kSrcClusterFieldNumber;
const int RestoreClusterReq::kDestClusterFieldNumber;
const int RestoreClusterReq::kTimeStampFieldNumber;
const int RestoreClusterReq::kSrcDbFieldNumber;
const int RestoreClusterReq::kSrcTableFieldNumber;
const int RestoreClusterReq::kDstDbFieldNumber;
const int RestoreClusterReq::kDstTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreClusterReq::RestoreClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestoreClusterReq)
}
RestoreClusterReq::RestoreClusterReq(const RestoreClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_cluster().size() > 0) {
    src_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_cluster_);
  }
  dest_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_cluster().size() > 0) {
    dest_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_cluster_);
  }
  time_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time_stamp().size() > 0) {
    time_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_stamp_);
  }
  src_db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_db().size() > 0) {
    src_db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_db_);
  }
  src_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_table().size() > 0) {
    src_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_table_);
  }
  dst_db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_db().size() > 0) {
    dst_db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_db_);
  }
  dst_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_table().size() > 0) {
    dst_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_table_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.RestoreClusterReq)
}

void RestoreClusterReq::SharedCtor() {
  src_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

RestoreClusterReq::~RestoreClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.RestoreClusterReq)
  SharedDtor();
}

void RestoreClusterReq::SharedDtor() {
  src_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestoreClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[58].descriptor;
}

const RestoreClusterReq& RestoreClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestoreClusterReq* RestoreClusterReq::New(::google::protobuf::Arena* arena) const {
  RestoreClusterReq* n = new RestoreClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestoreClusterReq)
  src_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(set_id_));
}

bool RestoreClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestoreClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 app_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_cluster = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_cluster().data(), this->src_cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.src_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_cluster = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_cluster().data(), this->dest_cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.dest_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time_stamp = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_stamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time_stamp().data(), this->time_stamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.time_stamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_db = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_db().data(), this->src_db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.src_db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_table = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_table().data(), this->src_table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.src_table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_db = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_db().data(), this->dst_db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.dst_db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_table = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_table().data(), this->dst_table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreClusterReq.dst_table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestoreClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestoreClusterReq)
  return false;
#undef DO_
}

void RestoreClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestoreClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_type(), output);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->app_id(), output);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->region_id(), output);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->set_id(), output);
  }

  // string src_cluster = 7;
  if (this->src_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_cluster().data(), this->src_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->src_cluster(), output);
  }

  // string dest_cluster = 8;
  if (this->dest_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_cluster().data(), this->dest_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dest_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dest_cluster(), output);
  }

  // string time_stamp = 9;
  if (this->time_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.time_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->time_stamp(), output);
  }

  // string src_db = 10;
  if (this->src_db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_db().data(), this->src_db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->src_db(), output);
  }

  // string src_table = 11;
  if (this->src_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_table().data(), this->src_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->src_table(), output);
  }

  // string dst_db = 12;
  if (this->dst_db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_db().data(), this->dst_db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dst_db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->dst_db(), output);
  }

  // string dst_table = 13;
  if (this->dst_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_table().data(), this->dst_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dst_table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->dst_table(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestoreClusterReq)
}

::google::protobuf::uint8* RestoreClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestoreClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_type(), target);
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->app_id(), target);
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->region_id(), target);
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->set_id(), target);
  }

  // string src_cluster = 7;
  if (this->src_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_cluster().data(), this->src_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->src_cluster(), target);
  }

  // string dest_cluster = 8;
  if (this->dest_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_cluster().data(), this->dest_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dest_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dest_cluster(), target);
  }

  // string time_stamp = 9;
  if (this->time_stamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.time_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->time_stamp(), target);
  }

  // string src_db = 10;
  if (this->src_db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_db().data(), this->src_db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->src_db(), target);
  }

  // string src_table = 11;
  if (this->src_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_table().data(), this->src_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.src_table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->src_table(), target);
  }

  // string dst_db = 12;
  if (this->dst_db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_db().data(), this->dst_db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dst_db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->dst_db(), target);
  }

  // string dst_table = 13;
  if (this->dst_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_table().data(), this->dst_table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreClusterReq.dst_table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->dst_table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestoreClusterReq)
  return target;
}

size_t RestoreClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestoreClusterReq)
  size_t total_size = 0;

  // string src_cluster = 7;
  if (this->src_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_cluster());
  }

  // string dest_cluster = 8;
  if (this->dest_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_cluster());
  }

  // string time_stamp = 9;
  if (this->time_stamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time_stamp());
  }

  // string src_db = 10;
  if (this->src_db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_db());
  }

  // string src_table = 11;
  if (this->src_table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_table());
  }

  // string dst_db = 12;
  if (this->dst_db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_db());
  }

  // string dst_table = 13;
  if (this->dst_table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_table());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // int64 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->app_id());
  }

  // .masterproto.JobType job_type = 3;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int32 region_id = 5;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 6;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestoreClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestoreClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestoreClusterReq)
    MergeFrom(*source);
  }
}

void RestoreClusterReq::MergeFrom(const RestoreClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestoreClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.src_cluster().size() > 0) {

    src_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_cluster_);
  }
  if (from.dest_cluster().size() > 0) {

    dest_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_cluster_);
  }
  if (from.time_stamp().size() > 0) {

    time_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_stamp_);
  }
  if (from.src_db().size() > 0) {

    src_db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_db_);
  }
  if (from.src_table().size() > 0) {

    src_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_table_);
  }
  if (from.dst_db().size() > 0) {

    dst_db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_db_);
  }
  if (from.dst_table().size() > 0) {

    dst_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_table_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void RestoreClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestoreClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreClusterReq::CopyFrom(const RestoreClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestoreClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreClusterReq::IsInitialized() const {
  return true;
}

void RestoreClusterReq::Swap(RestoreClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreClusterReq::InternalSwap(RestoreClusterReq* other) {
  src_cluster_.Swap(&other->src_cluster_);
  dest_cluster_.Swap(&other->dest_cluster_);
  time_stamp_.Swap(&other->time_stamp_);
  src_db_.Swap(&other->src_db_);
  src_table_.Swap(&other->src_table_);
  dst_db_.Swap(&other->dst_db_);
  dst_table_.Swap(&other->dst_table_);
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreClusterReq

// .cmongoproto.ReqHeader header = 1;
bool RestoreClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestoreClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RestoreClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RestoreClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RestoreClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestoreClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.header)
}

// int64 job_id = 2;
void RestoreClusterReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RestoreClusterReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.job_id)
  return job_id_;
}
void RestoreClusterReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.job_id)
}

// .masterproto.JobType job_type = 3;
void RestoreClusterReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType RestoreClusterReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void RestoreClusterReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.job_type)
}

// int64 app_id = 4;
void RestoreClusterReq::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RestoreClusterReq::app_id() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.app_id)
  return app_id_;
}
void RestoreClusterReq::set_app_id(::google::protobuf::int64 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.app_id)
}

// int32 region_id = 5;
void RestoreClusterReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 RestoreClusterReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.region_id)
  return region_id_;
}
void RestoreClusterReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.region_id)
}

// int32 set_id = 6;
void RestoreClusterReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 RestoreClusterReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.set_id)
  return set_id_;
}
void RestoreClusterReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.set_id)
}

// string src_cluster = 7;
void RestoreClusterReq::clear_src_cluster() {
  src_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::src_cluster() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.src_cluster)
  return src_cluster_.GetNoArena();
}
void RestoreClusterReq::set_src_cluster(const ::std::string& value) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.src_cluster)
}
#if LANG_CXX11
void RestoreClusterReq::set_src_cluster(::std::string&& value) {
  
  src_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.src_cluster)
}
#endif
void RestoreClusterReq::set_src_cluster(const char* value) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.src_cluster)
}
void RestoreClusterReq::set_src_cluster(const char* value, size_t size) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.src_cluster)
}
::std::string* RestoreClusterReq::mutable_src_cluster() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.src_cluster)
  return src_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_src_cluster() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.src_cluster)
  
  return src_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_src_cluster(::std::string* src_cluster) {
  if (src_cluster != NULL) {
    
  } else {
    
  }
  src_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_cluster);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.src_cluster)
}

// string dest_cluster = 8;
void RestoreClusterReq::clear_dest_cluster() {
  dest_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::dest_cluster() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.dest_cluster)
  return dest_cluster_.GetNoArena();
}
void RestoreClusterReq::set_dest_cluster(const ::std::string& value) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.dest_cluster)
}
#if LANG_CXX11
void RestoreClusterReq::set_dest_cluster(::std::string&& value) {
  
  dest_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.dest_cluster)
}
#endif
void RestoreClusterReq::set_dest_cluster(const char* value) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.dest_cluster)
}
void RestoreClusterReq::set_dest_cluster(const char* value, size_t size) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.dest_cluster)
}
::std::string* RestoreClusterReq::mutable_dest_cluster() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.dest_cluster)
  return dest_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_dest_cluster() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.dest_cluster)
  
  return dest_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_dest_cluster(::std::string* dest_cluster) {
  if (dest_cluster != NULL) {
    
  } else {
    
  }
  dest_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_cluster);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.dest_cluster)
}

// string time_stamp = 9;
void RestoreClusterReq::clear_time_stamp() {
  time_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.time_stamp)
  return time_stamp_.GetNoArena();
}
void RestoreClusterReq::set_time_stamp(const ::std::string& value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.time_stamp)
}
#if LANG_CXX11
void RestoreClusterReq::set_time_stamp(::std::string&& value) {
  
  time_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.time_stamp)
}
#endif
void RestoreClusterReq::set_time_stamp(const char* value) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.time_stamp)
}
void RestoreClusterReq::set_time_stamp(const char* value, size_t size) {
  
  time_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.time_stamp)
}
::std::string* RestoreClusterReq::mutable_time_stamp() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.time_stamp)
  return time_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_time_stamp() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.time_stamp)
  
  return time_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_time_stamp(::std::string* time_stamp) {
  if (time_stamp != NULL) {
    
  } else {
    
  }
  time_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_stamp);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.time_stamp)
}

// string src_db = 10;
void RestoreClusterReq::clear_src_db() {
  src_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::src_db() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.src_db)
  return src_db_.GetNoArena();
}
void RestoreClusterReq::set_src_db(const ::std::string& value) {
  
  src_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.src_db)
}
#if LANG_CXX11
void RestoreClusterReq::set_src_db(::std::string&& value) {
  
  src_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.src_db)
}
#endif
void RestoreClusterReq::set_src_db(const char* value) {
  
  src_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.src_db)
}
void RestoreClusterReq::set_src_db(const char* value, size_t size) {
  
  src_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.src_db)
}
::std::string* RestoreClusterReq::mutable_src_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.src_db)
  return src_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_src_db() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.src_db)
  
  return src_db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_src_db(::std::string* src_db) {
  if (src_db != NULL) {
    
  } else {
    
  }
  src_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.src_db)
}

// string src_table = 11;
void RestoreClusterReq::clear_src_table() {
  src_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::src_table() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.src_table)
  return src_table_.GetNoArena();
}
void RestoreClusterReq::set_src_table(const ::std::string& value) {
  
  src_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.src_table)
}
#if LANG_CXX11
void RestoreClusterReq::set_src_table(::std::string&& value) {
  
  src_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.src_table)
}
#endif
void RestoreClusterReq::set_src_table(const char* value) {
  
  src_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.src_table)
}
void RestoreClusterReq::set_src_table(const char* value, size_t size) {
  
  src_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.src_table)
}
::std::string* RestoreClusterReq::mutable_src_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.src_table)
  return src_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_src_table() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.src_table)
  
  return src_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_src_table(::std::string* src_table) {
  if (src_table != NULL) {
    
  } else {
    
  }
  src_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.src_table)
}

// string dst_db = 12;
void RestoreClusterReq::clear_dst_db() {
  dst_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::dst_db() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.dst_db)
  return dst_db_.GetNoArena();
}
void RestoreClusterReq::set_dst_db(const ::std::string& value) {
  
  dst_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.dst_db)
}
#if LANG_CXX11
void RestoreClusterReq::set_dst_db(::std::string&& value) {
  
  dst_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.dst_db)
}
#endif
void RestoreClusterReq::set_dst_db(const char* value) {
  
  dst_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.dst_db)
}
void RestoreClusterReq::set_dst_db(const char* value, size_t size) {
  
  dst_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.dst_db)
}
::std::string* RestoreClusterReq::mutable_dst_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.dst_db)
  return dst_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_dst_db() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.dst_db)
  
  return dst_db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_dst_db(::std::string* dst_db) {
  if (dst_db != NULL) {
    
  } else {
    
  }
  dst_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.dst_db)
}

// string dst_table = 13;
void RestoreClusterReq::clear_dst_table() {
  dst_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreClusterReq::dst_table() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterReq.dst_table)
  return dst_table_.GetNoArena();
}
void RestoreClusterReq::set_dst_table(const ::std::string& value) {
  
  dst_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreClusterReq.dst_table)
}
#if LANG_CXX11
void RestoreClusterReq::set_dst_table(::std::string&& value) {
  
  dst_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreClusterReq.dst_table)
}
#endif
void RestoreClusterReq::set_dst_table(const char* value) {
  
  dst_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreClusterReq.dst_table)
}
void RestoreClusterReq::set_dst_table(const char* value, size_t size) {
  
  dst_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreClusterReq.dst_table)
}
::std::string* RestoreClusterReq::mutable_dst_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterReq.dst_table)
  return dst_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreClusterReq::release_dst_table() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterReq.dst_table)
  
  return dst_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreClusterReq::set_allocated_dst_table(::std::string* dst_table) {
  if (dst_table != NULL) {
    
  } else {
    
  }
  dst_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterReq.dst_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreClusterRsp::RestoreClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestoreClusterRsp)
}
RestoreClusterRsp::RestoreClusterRsp(const RestoreClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.RestoreClusterRsp)
}

void RestoreClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RestoreClusterRsp::~RestoreClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.RestoreClusterRsp)
  SharedDtor();
}

void RestoreClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestoreClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[59].descriptor;
}

const RestoreClusterRsp& RestoreClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestoreClusterRsp* RestoreClusterRsp::New(::google::protobuf::Arena* arena) const {
  RestoreClusterRsp* n = new RestoreClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestoreClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RestoreClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestoreClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestoreClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestoreClusterRsp)
  return false;
#undef DO_
}

void RestoreClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestoreClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestoreClusterRsp)
}

::google::protobuf::uint8* RestoreClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestoreClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestoreClusterRsp)
  return target;
}

size_t RestoreClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestoreClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestoreClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestoreClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestoreClusterRsp)
    MergeFrom(*source);
  }
}

void RestoreClusterRsp::MergeFrom(const RestoreClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestoreClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RestoreClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestoreClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreClusterRsp::CopyFrom(const RestoreClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestoreClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreClusterRsp::IsInitialized() const {
  return true;
}

void RestoreClusterRsp::Swap(RestoreClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreClusterRsp::InternalSwap(RestoreClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreClusterRsp

// .cmongoproto.ResHeader header = 1;
bool RestoreClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestoreClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RestoreClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RestoreClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* RestoreClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestoreClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeClusterReq::kHeaderFieldNumber;
const int ExchangeClusterReq::kSrcClusterFieldNumber;
const int ExchangeClusterReq::kDestClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeClusterReq::ExchangeClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ExchangeClusterReq)
}
ExchangeClusterReq::ExchangeClusterReq(const ExchangeClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_cluster().size() > 0) {
    src_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_cluster_);
  }
  dest_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_cluster().size() > 0) {
    dest_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_cluster_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ExchangeClusterReq)
}

void ExchangeClusterReq::SharedCtor() {
  src_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

ExchangeClusterReq::~ExchangeClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.ExchangeClusterReq)
  SharedDtor();
}

void ExchangeClusterReq::SharedDtor() {
  src_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ExchangeClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[60].descriptor;
}

const ExchangeClusterReq& ExchangeClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExchangeClusterReq* ExchangeClusterReq::New(::google::protobuf::Arena* arena) const {
  ExchangeClusterReq* n = new ExchangeClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ExchangeClusterReq)
  src_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ExchangeClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ExchangeClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_cluster = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_cluster().data(), this->src_cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ExchangeClusterReq.src_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_cluster = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_cluster().data(), this->dest_cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ExchangeClusterReq.dest_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ExchangeClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ExchangeClusterReq)
  return false;
#undef DO_
}

void ExchangeClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ExchangeClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string src_cluster = 2;
  if (this->src_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_cluster().data(), this->src_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ExchangeClusterReq.src_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src_cluster(), output);
  }

  // string dest_cluster = 3;
  if (this->dest_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_cluster().data(), this->dest_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ExchangeClusterReq.dest_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dest_cluster(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ExchangeClusterReq)
}

::google::protobuf::uint8* ExchangeClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ExchangeClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string src_cluster = 2;
  if (this->src_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_cluster().data(), this->src_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ExchangeClusterReq.src_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_cluster(), target);
  }

  // string dest_cluster = 3;
  if (this->dest_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_cluster().data(), this->dest_cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ExchangeClusterReq.dest_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest_cluster(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ExchangeClusterReq)
  return target;
}

size_t ExchangeClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ExchangeClusterReq)
  size_t total_size = 0;

  // string src_cluster = 2;
  if (this->src_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_cluster());
  }

  // string dest_cluster = 3;
  if (this->dest_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_cluster());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ExchangeClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ExchangeClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ExchangeClusterReq)
    MergeFrom(*source);
  }
}

void ExchangeClusterReq::MergeFrom(const ExchangeClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ExchangeClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.src_cluster().size() > 0) {

    src_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_cluster_);
  }
  if (from.dest_cluster().size() > 0) {

    dest_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_cluster_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void ExchangeClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ExchangeClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeClusterReq::CopyFrom(const ExchangeClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ExchangeClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeClusterReq::IsInitialized() const {
  return true;
}

void ExchangeClusterReq::Swap(ExchangeClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeClusterReq::InternalSwap(ExchangeClusterReq* other) {
  src_cluster_.Swap(&other->src_cluster_);
  dest_cluster_.Swap(&other->dest_cluster_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeClusterReq

// .cmongoproto.ReqHeader header = 1;
bool ExchangeClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ExchangeClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ExchangeClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ExchangeClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ExchangeClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ExchangeClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ExchangeClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ExchangeClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ExchangeClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ExchangeClusterReq.header)
}

// string src_cluster = 2;
void ExchangeClusterReq::clear_src_cluster() {
  src_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExchangeClusterReq::src_cluster() const {
  // @@protoc_insertion_point(field_get:masterproto.ExchangeClusterReq.src_cluster)
  return src_cluster_.GetNoArena();
}
void ExchangeClusterReq::set_src_cluster(const ::std::string& value) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ExchangeClusterReq.src_cluster)
}
#if LANG_CXX11
void ExchangeClusterReq::set_src_cluster(::std::string&& value) {
  
  src_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ExchangeClusterReq.src_cluster)
}
#endif
void ExchangeClusterReq::set_src_cluster(const char* value) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ExchangeClusterReq.src_cluster)
}
void ExchangeClusterReq::set_src_cluster(const char* value, size_t size) {
  
  src_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ExchangeClusterReq.src_cluster)
}
::std::string* ExchangeClusterReq::mutable_src_cluster() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ExchangeClusterReq.src_cluster)
  return src_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExchangeClusterReq::release_src_cluster() {
  // @@protoc_insertion_point(field_release:masterproto.ExchangeClusterReq.src_cluster)
  
  return src_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExchangeClusterReq::set_allocated_src_cluster(::std::string* src_cluster) {
  if (src_cluster != NULL) {
    
  } else {
    
  }
  src_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_cluster);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ExchangeClusterReq.src_cluster)
}

// string dest_cluster = 3;
void ExchangeClusterReq::clear_dest_cluster() {
  dest_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExchangeClusterReq::dest_cluster() const {
  // @@protoc_insertion_point(field_get:masterproto.ExchangeClusterReq.dest_cluster)
  return dest_cluster_.GetNoArena();
}
void ExchangeClusterReq::set_dest_cluster(const ::std::string& value) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ExchangeClusterReq.dest_cluster)
}
#if LANG_CXX11
void ExchangeClusterReq::set_dest_cluster(::std::string&& value) {
  
  dest_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ExchangeClusterReq.dest_cluster)
}
#endif
void ExchangeClusterReq::set_dest_cluster(const char* value) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ExchangeClusterReq.dest_cluster)
}
void ExchangeClusterReq::set_dest_cluster(const char* value, size_t size) {
  
  dest_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ExchangeClusterReq.dest_cluster)
}
::std::string* ExchangeClusterReq::mutable_dest_cluster() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ExchangeClusterReq.dest_cluster)
  return dest_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExchangeClusterReq::release_dest_cluster() {
  // @@protoc_insertion_point(field_release:masterproto.ExchangeClusterReq.dest_cluster)
  
  return dest_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExchangeClusterReq::set_allocated_dest_cluster(::std::string* dest_cluster) {
  if (dest_cluster != NULL) {
    
  } else {
    
  }
  dest_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_cluster);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ExchangeClusterReq.dest_cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeClusterRsp::ExchangeClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ExchangeClusterRsp)
}
ExchangeClusterRsp::ExchangeClusterRsp(const ExchangeClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ExchangeClusterRsp)
}

void ExchangeClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ExchangeClusterRsp::~ExchangeClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ExchangeClusterRsp)
  SharedDtor();
}

void ExchangeClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ExchangeClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[61].descriptor;
}

const ExchangeClusterRsp& ExchangeClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExchangeClusterRsp* ExchangeClusterRsp::New(::google::protobuf::Arena* arena) const {
  ExchangeClusterRsp* n = new ExchangeClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ExchangeClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ExchangeClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ExchangeClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ExchangeClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ExchangeClusterRsp)
  return false;
#undef DO_
}

void ExchangeClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ExchangeClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ExchangeClusterRsp)
}

::google::protobuf::uint8* ExchangeClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ExchangeClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ExchangeClusterRsp)
  return target;
}

size_t ExchangeClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ExchangeClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ExchangeClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ExchangeClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ExchangeClusterRsp)
    MergeFrom(*source);
  }
}

void ExchangeClusterRsp::MergeFrom(const ExchangeClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ExchangeClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ExchangeClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ExchangeClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeClusterRsp::CopyFrom(const ExchangeClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ExchangeClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeClusterRsp::IsInitialized() const {
  return true;
}

void ExchangeClusterRsp::Swap(ExchangeClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeClusterRsp::InternalSwap(ExchangeClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExchangeClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExchangeClusterRsp

// .cmongoproto.ResHeader header = 1;
bool ExchangeClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ExchangeClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ExchangeClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ExchangeClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ExchangeClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ExchangeClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ExchangeClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ExchangeClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ExchangeClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ExchangeClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsolationClusterReq::kHeaderFieldNumber;
const int IsolationClusterReq::kClusterIdFieldNumber;
const int IsolationClusterReq::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsolationClusterReq::IsolationClusterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.IsolationClusterReq)
}
IsolationClusterReq::IsolationClusterReq(const IsolationClusterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:masterproto.IsolationClusterReq)
}

void IsolationClusterReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_) + sizeof(status_));
  _cached_size_ = 0;
}

IsolationClusterReq::~IsolationClusterReq() {
  // @@protoc_insertion_point(destructor:masterproto.IsolationClusterReq)
  SharedDtor();
}

void IsolationClusterReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void IsolationClusterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolationClusterReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[62].descriptor;
}

const IsolationClusterReq& IsolationClusterReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsolationClusterReq* IsolationClusterReq::New(::google::protobuf::Arena* arena) const {
  IsolationClusterReq* n = new IsolationClusterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsolationClusterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.IsolationClusterReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  status_ = 0;
}

bool IsolationClusterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.IsolationClusterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.IsolationClusterReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterStatus status = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::masterproto::ClusterStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.IsolationClusterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.IsolationClusterReq)
  return false;
#undef DO_
}

void IsolationClusterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.IsolationClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsolationClusterReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // .masterproto.ClusterStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.IsolationClusterReq)
}

::google::protobuf::uint8* IsolationClusterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.IsolationClusterReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsolationClusterReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // .masterproto.ClusterStatus status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.IsolationClusterReq)
  return target;
}

size_t IsolationClusterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.IsolationClusterReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ClusterStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolationClusterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.IsolationClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IsolationClusterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsolationClusterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.IsolationClusterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.IsolationClusterReq)
    MergeFrom(*source);
  }
}

void IsolationClusterReq::MergeFrom(const IsolationClusterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.IsolationClusterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void IsolationClusterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.IsolationClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolationClusterReq::CopyFrom(const IsolationClusterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.IsolationClusterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolationClusterReq::IsInitialized() const {
  return true;
}

void IsolationClusterReq::Swap(IsolationClusterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsolationClusterReq::InternalSwap(IsolationClusterReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsolationClusterReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsolationClusterReq

// .cmongoproto.ReqHeader header = 1;
bool IsolationClusterReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsolationClusterReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& IsolationClusterReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.IsolationClusterReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* IsolationClusterReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.IsolationClusterReq.header)
  return header_;
}
::cmongoproto::ReqHeader* IsolationClusterReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.IsolationClusterReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsolationClusterReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsolationClusterReq.header)
}

// string cluster_id = 2;
void IsolationClusterReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IsolationClusterReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.IsolationClusterReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void IsolationClusterReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.IsolationClusterReq.cluster_id)
}
#if LANG_CXX11
void IsolationClusterReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.IsolationClusterReq.cluster_id)
}
#endif
void IsolationClusterReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.IsolationClusterReq.cluster_id)
}
void IsolationClusterReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.IsolationClusterReq.cluster_id)
}
::std::string* IsolationClusterReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.IsolationClusterReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IsolationClusterReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.IsolationClusterReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IsolationClusterReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsolationClusterReq.cluster_id)
}

// .masterproto.ClusterStatus status = 3;
void IsolationClusterReq::clear_status() {
  status_ = 0;
}
::masterproto::ClusterStatus IsolationClusterReq::status() const {
  // @@protoc_insertion_point(field_get:masterproto.IsolationClusterReq.status)
  return static_cast< ::masterproto::ClusterStatus >(status_);
}
void IsolationClusterReq::set_status(::masterproto::ClusterStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:masterproto.IsolationClusterReq.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsolationClusterRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsolationClusterRsp::IsolationClusterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.IsolationClusterRsp)
}
IsolationClusterRsp::IsolationClusterRsp(const IsolationClusterRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.IsolationClusterRsp)
}

void IsolationClusterRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

IsolationClusterRsp::~IsolationClusterRsp() {
  // @@protoc_insertion_point(destructor:masterproto.IsolationClusterRsp)
  SharedDtor();
}

void IsolationClusterRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void IsolationClusterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsolationClusterRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[63].descriptor;
}

const IsolationClusterRsp& IsolationClusterRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsolationClusterRsp* IsolationClusterRsp::New(::google::protobuf::Arena* arena) const {
  IsolationClusterRsp* n = new IsolationClusterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsolationClusterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.IsolationClusterRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool IsolationClusterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.IsolationClusterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.IsolationClusterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.IsolationClusterRsp)
  return false;
#undef DO_
}

void IsolationClusterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.IsolationClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.IsolationClusterRsp)
}

::google::protobuf::uint8* IsolationClusterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.IsolationClusterRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.IsolationClusterRsp)
  return target;
}

size_t IsolationClusterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.IsolationClusterRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsolationClusterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.IsolationClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IsolationClusterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsolationClusterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.IsolationClusterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.IsolationClusterRsp)
    MergeFrom(*source);
  }
}

void IsolationClusterRsp::MergeFrom(const IsolationClusterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.IsolationClusterRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void IsolationClusterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.IsolationClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsolationClusterRsp::CopyFrom(const IsolationClusterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.IsolationClusterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsolationClusterRsp::IsInitialized() const {
  return true;
}

void IsolationClusterRsp::Swap(IsolationClusterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsolationClusterRsp::InternalSwap(IsolationClusterRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsolationClusterRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[63];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsolationClusterRsp

// .cmongoproto.ResHeader header = 1;
bool IsolationClusterRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsolationClusterRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& IsolationClusterRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.IsolationClusterRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* IsolationClusterRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.IsolationClusterRsp.header)
  return header_;
}
::cmongoproto::ResHeader* IsolationClusterRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.IsolationClusterRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsolationClusterRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsolationClusterRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRsReq::kHeaderFieldNumber;
const int AddRsReq::kJobIdFieldNumber;
const int AddRsReq::kClusterIdFieldNumber;
const int AddRsReq::kRsNameFieldNumber;
const int AddRsReq::kJobTypeFieldNumber;
const int AddRsReq::kCloseCgroupFieldNumber;
const int AddRsReq::kProxyVersionFieldNumber;
const int AddRsReq::kMongodSubversionFieldNumber;
const int AddRsReq::kDynamoProxyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRsReq::AddRsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddRsReq)
}
AddRsReq::AddRsReq(const AddRsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&closecgroup_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(closecgroup_));
  // @@protoc_insertion_point(copy_constructor:masterproto.AddRsReq)
}

void AddRsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&closecgroup_) -
    reinterpret_cast<char*>(&header_) + sizeof(closecgroup_));
  _cached_size_ = 0;
}

AddRsReq::~AddRsReq() {
  // @@protoc_insertion_point(destructor:masterproto.AddRsReq)
  SharedDtor();
}

void AddRsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AddRsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[64].descriptor;
}

const AddRsReq& AddRsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddRsReq* AddRsReq::New(::google::protobuf::Arena* arena) const {
  AddRsReq* n = new AddRsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddRsReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&closecgroup_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(closecgroup_));
}

bool AddRsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddRsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddRsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddRsReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 closeCgroup = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closecgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddRsReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddRsReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AddRsReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddRsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddRsReq)
  return false;
#undef DO_
}

void AddRsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rs_name(), output);
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->job_type(), output);
  }

  // int32 closeCgroup = 6;
  if (this->closecgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->closecgroup(), output);
  }

  // string proxy_version = 7;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->proxy_version(), output);
  }

  // string mongod_subversion = 8;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mongod_subversion(), output);
  }

  // string dynamo_proxy_version = 9;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dynamo_proxy_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddRsReq)
}

::google::protobuf::uint8* AddRsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rs_name(), target);
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->job_type(), target);
  }

  // int32 closeCgroup = 6;
  if (this->closecgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->closecgroup(), target);
  }

  // string proxy_version = 7;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proxy_version(), target);
  }

  // string mongod_subversion = 8;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mongod_subversion(), target);
  }

  // string dynamo_proxy_version = 9;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AddRsReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dynamo_proxy_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddRsReq)
  return target;
}

size_t AddRsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddRsReq)
  size_t total_size = 0;

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // string proxy_version = 7;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string mongod_subversion = 8;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string dynamo_proxy_version = 9;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  // int32 closeCgroup = 6;
  if (this->closecgroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closecgroup());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddRsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddRsReq)
    MergeFrom(*source);
  }
}

void AddRsReq::MergeFrom(const AddRsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
  if (from.closecgroup() != 0) {
    set_closecgroup(from.closecgroup());
  }
}

void AddRsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRsReq::CopyFrom(const AddRsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRsReq::IsInitialized() const {
  return true;
}

void AddRsReq::Swap(AddRsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRsReq::InternalSwap(AddRsReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  rs_name_.Swap(&other->rs_name_);
  proxy_version_.Swap(&other->proxy_version_);
  mongod_subversion_.Swap(&other->mongod_subversion_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(closecgroup_, other->closecgroup_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[64];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRsReq

// .cmongoproto.ReqHeader header = 1;
bool AddRsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddRsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& AddRsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* AddRsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* AddRsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddRsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.header)
}

// int64 job_id = 2;
void AddRsReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AddRsReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.job_id)
  return job_id_;
}
void AddRsReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.job_id)
}

// string cluster_id = 3;
void AddRsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddRsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void AddRsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.cluster_id)
}
#if LANG_CXX11
void AddRsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddRsReq.cluster_id)
}
#endif
void AddRsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddRsReq.cluster_id)
}
void AddRsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddRsReq.cluster_id)
}
::std::string* AddRsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.cluster_id)
}

// string rs_name = 4;
void AddRsReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddRsReq::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.rs_name)
  return rs_name_.GetNoArena();
}
void AddRsReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.rs_name)
}
#if LANG_CXX11
void AddRsReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddRsReq.rs_name)
}
#endif
void AddRsReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddRsReq.rs_name)
}
void AddRsReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddRsReq.rs_name)
}
::std::string* AddRsReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRsReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRsReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.rs_name)
}

// .masterproto.JobType job_type = 5;
void AddRsReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType AddRsReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void AddRsReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.job_type)
}

// int32 closeCgroup = 6;
void AddRsReq::clear_closecgroup() {
  closecgroup_ = 0;
}
::google::protobuf::int32 AddRsReq::closecgroup() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.closeCgroup)
  return closecgroup_;
}
void AddRsReq::set_closecgroup(::google::protobuf::int32 value) {
  
  closecgroup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.closeCgroup)
}

// string proxy_version = 7;
void AddRsReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddRsReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void AddRsReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.proxy_version)
}
#if LANG_CXX11
void AddRsReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddRsReq.proxy_version)
}
#endif
void AddRsReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddRsReq.proxy_version)
}
void AddRsReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddRsReq.proxy_version)
}
::std::string* AddRsReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRsReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRsReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.proxy_version)
}

// string mongod_subversion = 8;
void AddRsReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddRsReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void AddRsReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.mongod_subversion)
}
#if LANG_CXX11
void AddRsReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddRsReq.mongod_subversion)
}
#endif
void AddRsReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddRsReq.mongod_subversion)
}
void AddRsReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddRsReq.mongod_subversion)
}
::std::string* AddRsReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRsReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRsReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.mongod_subversion)
}

// string dynamo_proxy_version = 9;
void AddRsReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddRsReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void AddRsReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AddRsReq.dynamo_proxy_version)
}
#if LANG_CXX11
void AddRsReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AddRsReq.dynamo_proxy_version)
}
#endif
void AddRsReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AddRsReq.dynamo_proxy_version)
}
void AddRsReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AddRsReq.dynamo_proxy_version)
}
::std::string* AddRsReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddRsReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddRsReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsReq.dynamo_proxy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRsRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRsRsp::AddRsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AddRsRsp)
}
AddRsRsp::AddRsRsp(const AddRsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.AddRsRsp)
}

void AddRsRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AddRsRsp::~AddRsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.AddRsRsp)
  SharedDtor();
}

void AddRsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void AddRsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[65].descriptor;
}

const AddRsRsp& AddRsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddRsRsp* AddRsRsp::New(::google::protobuf::Arena* arena) const {
  AddRsRsp* n = new AddRsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AddRsRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool AddRsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AddRsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AddRsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AddRsRsp)
  return false;
#undef DO_
}

void AddRsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AddRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AddRsRsp)
}

::google::protobuf::uint8* AddRsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AddRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AddRsRsp)
  return target;
}

size_t AddRsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AddRsRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AddRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AddRsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AddRsRsp)
    MergeFrom(*source);
  }
}

void AddRsRsp::MergeFrom(const AddRsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AddRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void AddRsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AddRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRsRsp::CopyFrom(const AddRsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AddRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRsRsp::IsInitialized() const {
  return true;
}

void AddRsRsp::Swap(AddRsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRsRsp::InternalSwap(AddRsRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[65];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRsRsp

// .cmongoproto.ResHeader header = 1;
bool AddRsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddRsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& AddRsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.AddRsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* AddRsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.AddRsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* AddRsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.AddRsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddRsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.AddRsRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelRsReq::kHeaderFieldNumber;
const int DelRsReq::kJobIdFieldNumber;
const int DelRsReq::kClusterIdFieldNumber;
const int DelRsReq::kRsNameFieldNumber;
const int DelRsReq::kJobTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelRsReq::DelRsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelRsReq)
}
DelRsReq::DelRsReq(const DelRsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rs_name().size() > 0) {
    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&job_id_, &from.job_id_,
    reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_type_));
  // @@protoc_insertion_point(copy_constructor:masterproto.DelRsReq)
}

void DelRsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_type_));
  _cached_size_ = 0;
}

DelRsReq::~DelRsReq() {
  // @@protoc_insertion_point(destructor:masterproto.DelRsReq)
  SharedDtor();
}

void DelRsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelRsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelRsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[66].descriptor;
}

const DelRsReq& DelRsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelRsReq* DelRsReq::New(::google::protobuf::Arena* arena) const {
  DelRsReq* n = new DelRsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelRsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelRsReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&job_id_, 0, reinterpret_cast<char*>(&job_type_) -
    reinterpret_cast<char*>(&job_id_) + sizeof(job_type_));
}

bool DelRsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelRsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 job_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelRsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rs_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rs_name().data(), this->rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelRsReq.rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.JobType job_type = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_type(static_cast< ::masterproto::JobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelRsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelRsReq)
  return false;
#undef DO_
}

void DelRsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->job_id(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelRsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelRsReq.rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rs_name(), output);
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->job_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelRsReq)
}

::google::protobuf::uint8* DelRsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->job_id(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelRsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rs_name().data(), this->rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelRsReq.rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rs_name(), target);
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->job_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelRsReq)
  return target;
}

size_t DelRsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelRsReq)
  size_t total_size = 0;

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string rs_name = 4;
  if (this->rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rs_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 job_id = 2;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->job_id());
  }

  // .masterproto.JobType job_type = 5;
  if (this->job_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelRsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelRsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelRsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelRsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelRsReq)
    MergeFrom(*source);
  }
}

void DelRsReq::MergeFrom(const DelRsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.rs_name().size() > 0) {

    rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rs_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_type() != 0) {
    set_job_type(from.job_type());
  }
}

void DelRsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelRsReq::CopyFrom(const DelRsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRsReq::IsInitialized() const {
  return true;
}

void DelRsReq::Swap(DelRsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelRsReq::InternalSwap(DelRsReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  rs_name_.Swap(&other->rs_name_);
  std::swap(header_, other->header_);
  std::swap(job_id_, other->job_id_);
  std::swap(job_type_, other->job_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelRsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[66];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelRsReq

// .cmongoproto.ReqHeader header = 1;
bool DelRsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelRsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DelRsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DelRsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelRsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DelRsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelRsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelRsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelRsReq.header)
}

// int64 job_id = 2;
void DelRsReq::clear_job_id() {
  job_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DelRsReq::job_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsReq.job_id)
  return job_id_;
}
void DelRsReq::set_job_id(::google::protobuf::int64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelRsReq.job_id)
}

// string cluster_id = 3;
void DelRsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelRsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DelRsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelRsReq.cluster_id)
}
#if LANG_CXX11
void DelRsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelRsReq.cluster_id)
}
#endif
void DelRsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelRsReq.cluster_id)
}
void DelRsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelRsReq.cluster_id)
}
::std::string* DelRsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelRsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelRsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DelRsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelRsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelRsReq.cluster_id)
}

// string rs_name = 4;
void DelRsReq::clear_rs_name() {
  rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelRsReq::rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsReq.rs_name)
  return rs_name_.GetNoArena();
}
void DelRsReq::set_rs_name(const ::std::string& value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelRsReq.rs_name)
}
#if LANG_CXX11
void DelRsReq::set_rs_name(::std::string&& value) {
  
  rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelRsReq.rs_name)
}
#endif
void DelRsReq::set_rs_name(const char* value) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelRsReq.rs_name)
}
void DelRsReq::set_rs_name(const char* value, size_t size) {
  
  rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelRsReq.rs_name)
}
::std::string* DelRsReq::mutable_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelRsReq.rs_name)
  return rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelRsReq::release_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.DelRsReq.rs_name)
  
  return rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelRsReq::set_allocated_rs_name(::std::string* rs_name) {
  if (rs_name != NULL) {
    
  } else {
    
  }
  rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelRsReq.rs_name)
}

// .masterproto.JobType job_type = 5;
void DelRsReq::clear_job_type() {
  job_type_ = 0;
}
::masterproto::JobType DelRsReq::job_type() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsReq.job_type)
  return static_cast< ::masterproto::JobType >(job_type_);
}
void DelRsReq::set_job_type(::masterproto::JobType value) {
  
  job_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelRsReq.job_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelRsRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelRsRsp::DelRsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelRsRsp)
}
DelRsRsp::DelRsRsp(const DelRsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelRsRsp)
}

void DelRsRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelRsRsp::~DelRsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DelRsRsp)
  SharedDtor();
}

void DelRsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelRsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelRsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[67].descriptor;
}

const DelRsRsp& DelRsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelRsRsp* DelRsRsp::New(::google::protobuf::Arena* arena) const {
  DelRsRsp* n = new DelRsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelRsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelRsRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DelRsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelRsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelRsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelRsRsp)
  return false;
#undef DO_
}

void DelRsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelRsRsp)
}

::google::protobuf::uint8* DelRsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelRsRsp)
  return target;
}

size_t DelRsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelRsRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelRsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelRsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelRsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelRsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelRsRsp)
    MergeFrom(*source);
  }
}

void DelRsRsp::MergeFrom(const DelRsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DelRsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelRsRsp::CopyFrom(const DelRsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRsRsp::IsInitialized() const {
  return true;
}

void DelRsRsp::Swap(DelRsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelRsRsp::InternalSwap(DelRsRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelRsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[67];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelRsRsp

// .cmongoproto.ResHeader header = 1;
bool DelRsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelRsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DelRsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelRsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DelRsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelRsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DelRsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelRsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelRsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelRsRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogStatusReq::kHeaderFieldNumber;
const int OpLogStatusReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogStatusReq::OpLogStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.OpLogStatusReq)
}
OpLogStatusReq::OpLogStatusReq(const OpLogStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.OpLogStatusReq)
}

void OpLogStatusReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

OpLogStatusReq::~OpLogStatusReq() {
  // @@protoc_insertion_point(destructor:masterproto.OpLogStatusReq)
  SharedDtor();
}

void OpLogStatusReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void OpLogStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogStatusReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[68].descriptor;
}

const OpLogStatusReq& OpLogStatusReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpLogStatusReq* OpLogStatusReq::New(::google::protobuf::Arena* arena) const {
  OpLogStatusReq* n = new OpLogStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.OpLogStatusReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool OpLogStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.OpLogStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.OpLogStatusReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.OpLogStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.OpLogStatusReq)
  return false;
#undef DO_
}

void OpLogStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.OpLogStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.OpLogStatusReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.OpLogStatusReq)
}

::google::protobuf::uint8* OpLogStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.OpLogStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.OpLogStatusReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.OpLogStatusReq)
  return target;
}

size_t OpLogStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.OpLogStatusReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.OpLogStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.OpLogStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.OpLogStatusReq)
    MergeFrom(*source);
  }
}

void OpLogStatusReq::MergeFrom(const OpLogStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.OpLogStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void OpLogStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.OpLogStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogStatusReq::CopyFrom(const OpLogStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.OpLogStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogStatusReq::IsInitialized() const {
  return true;
}

void OpLogStatusReq::Swap(OpLogStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogStatusReq::InternalSwap(OpLogStatusReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogStatusReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[68];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogStatusReq

// .cmongoproto.ReqHeader header = 1;
bool OpLogStatusReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void OpLogStatusReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& OpLogStatusReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.OpLogStatusReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* OpLogStatusReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.OpLogStatusReq.header)
  return header_;
}
::cmongoproto::ReqHeader* OpLogStatusReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.OpLogStatusReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void OpLogStatusReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.OpLogStatusReq.header)
}

// string cluster_id = 2;
void OpLogStatusReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpLogStatusReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.OpLogStatusReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void OpLogStatusReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.OpLogStatusReq.cluster_id)
}
#if LANG_CXX11
void OpLogStatusReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.OpLogStatusReq.cluster_id)
}
#endif
void OpLogStatusReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.OpLogStatusReq.cluster_id)
}
void OpLogStatusReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.OpLogStatusReq.cluster_id)
}
::std::string* OpLogStatusReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.OpLogStatusReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpLogStatusReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.OpLogStatusReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpLogStatusReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.OpLogStatusReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogStatusRsp::kHeaderFieldNumber;
const int OpLogStatusRsp::kOplogInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogStatusRsp::OpLogStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.OpLogStatusRsp)
}
OpLogStatusRsp::OpLogStatusRsp(const OpLogStatusRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oplog_infos_(from.oplog_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.OpLogStatusRsp)
}

void OpLogStatusRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

OpLogStatusRsp::~OpLogStatusRsp() {
  // @@protoc_insertion_point(destructor:masterproto.OpLogStatusRsp)
  SharedDtor();
}

void OpLogStatusRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void OpLogStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogStatusRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[69].descriptor;
}

const OpLogStatusRsp& OpLogStatusRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpLogStatusRsp* OpLogStatusRsp::New(::google::protobuf::Arena* arena) const {
  OpLogStatusRsp* n = new OpLogStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogStatusRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.OpLogStatusRsp)
  oplog_infos_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool OpLogStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.OpLogStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.OplogInfo oplog_infos = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oplog_infos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.OpLogStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.OpLogStatusRsp)
  return false;
#undef DO_
}

void OpLogStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.OpLogStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.OplogInfo oplog_infos = 2;
  for (unsigned int i = 0, n = this->oplog_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oplog_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.OpLogStatusRsp)
}

::google::protobuf::uint8* OpLogStatusRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.OpLogStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.OplogInfo oplog_infos = 2;
  for (unsigned int i = 0, n = this->oplog_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->oplog_infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.OpLogStatusRsp)
  return target;
}

size_t OpLogStatusRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.OpLogStatusRsp)
  size_t total_size = 0;

  // repeated .masterproto.OplogInfo oplog_infos = 2;
  {
    unsigned int count = this->oplog_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oplog_infos(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.OpLogStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogStatusRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogStatusRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.OpLogStatusRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.OpLogStatusRsp)
    MergeFrom(*source);
  }
}

void OpLogStatusRsp::MergeFrom(const OpLogStatusRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.OpLogStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oplog_infos_.MergeFrom(from.oplog_infos_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void OpLogStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.OpLogStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogStatusRsp::CopyFrom(const OpLogStatusRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.OpLogStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogStatusRsp::IsInitialized() const {
  return true;
}

void OpLogStatusRsp::Swap(OpLogStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogStatusRsp::InternalSwap(OpLogStatusRsp* other) {
  oplog_infos_.UnsafeArenaSwap(&other->oplog_infos_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogStatusRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[69];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogStatusRsp

// .cmongoproto.ResHeader header = 1;
bool OpLogStatusRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void OpLogStatusRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& OpLogStatusRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.OpLogStatusRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* OpLogStatusRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.OpLogStatusRsp.header)
  return header_;
}
::cmongoproto::ResHeader* OpLogStatusRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.OpLogStatusRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void OpLogStatusRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.OpLogStatusRsp.header)
}

// repeated .masterproto.OplogInfo oplog_infos = 2;
int OpLogStatusRsp::oplog_infos_size() const {
  return oplog_infos_.size();
}
void OpLogStatusRsp::clear_oplog_infos() {
  oplog_infos_.Clear();
}
const ::masterproto::OplogInfo& OpLogStatusRsp::oplog_infos(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.OpLogStatusRsp.oplog_infos)
  return oplog_infos_.Get(index);
}
::masterproto::OplogInfo* OpLogStatusRsp::mutable_oplog_infos(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.OpLogStatusRsp.oplog_infos)
  return oplog_infos_.Mutable(index);
}
::masterproto::OplogInfo* OpLogStatusRsp::add_oplog_infos() {
  // @@protoc_insertion_point(field_add:masterproto.OpLogStatusRsp.oplog_infos)
  return oplog_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::OplogInfo >*
OpLogStatusRsp::mutable_oplog_infos() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.OpLogStatusRsp.oplog_infos)
  return &oplog_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::OplogInfo >&
OpLogStatusRsp::oplog_infos() const {
  // @@protoc_insertion_point(field_list:masterproto.OpLogStatusRsp.oplog_infos)
  return oplog_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowDbReq::kHeaderFieldNumber;
const int ShowDbReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowDbReq::ShowDbReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ShowDbReq)
}
ShowDbReq::ShowDbReq(const ShowDbReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ShowDbReq)
}

void ShowDbReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

ShowDbReq::~ShowDbReq() {
  // @@protoc_insertion_point(destructor:masterproto.ShowDbReq)
  SharedDtor();
}

void ShowDbReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ShowDbReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowDbReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[70].descriptor;
}

const ShowDbReq& ShowDbReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowDbReq* ShowDbReq::New(::google::protobuf::Arena* arena) const {
  ShowDbReq* n = new ShowDbReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowDbReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ShowDbReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ShowDbReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ShowDbReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ShowDbReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ShowDbReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ShowDbReq)
  return false;
#undef DO_
}

void ShowDbReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ShowDbReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowDbReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ShowDbReq)
}

::google::protobuf::uint8* ShowDbReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ShowDbReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowDbReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ShowDbReq)
  return target;
}

size_t ShowDbReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ShowDbReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowDbReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ShowDbReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowDbReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowDbReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ShowDbReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ShowDbReq)
    MergeFrom(*source);
  }
}

void ShowDbReq::MergeFrom(const ShowDbReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ShowDbReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void ShowDbReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ShowDbReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowDbReq::CopyFrom(const ShowDbReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ShowDbReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowDbReq::IsInitialized() const {
  return true;
}

void ShowDbReq::Swap(ShowDbReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowDbReq::InternalSwap(ShowDbReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowDbReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[70];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowDbReq

// .cmongoproto.ReqHeader header = 1;
bool ShowDbReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ShowDbReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ShowDbReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowDbReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ShowDbReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ShowDbReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ShowDbReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ShowDbReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ShowDbReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowDbReq.header)
}

// string cluster_id = 2;
void ShowDbReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShowDbReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowDbReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ShowDbReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ShowDbReq.cluster_id)
}
#if LANG_CXX11
void ShowDbReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ShowDbReq.cluster_id)
}
#endif
void ShowDbReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ShowDbReq.cluster_id)
}
void ShowDbReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ShowDbReq.cluster_id)
}
::std::string* ShowDbReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ShowDbReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShowDbReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ShowDbReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShowDbReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowDbReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowDbRsp::kHeaderFieldNumber;
const int ShowDbRsp::kDbListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowDbRsp::ShowDbRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ShowDbRsp)
}
ShowDbRsp::ShowDbRsp(const ShowDbRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      db_list_(from.db_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ShowDbRsp)
}

void ShowDbRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ShowDbRsp::~ShowDbRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ShowDbRsp)
  SharedDtor();
}

void ShowDbRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ShowDbRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowDbRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[71].descriptor;
}

const ShowDbRsp& ShowDbRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowDbRsp* ShowDbRsp::New(::google::protobuf::Arena* arena) const {
  ShowDbRsp* n = new ShowDbRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowDbRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ShowDbRsp)
  db_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ShowDbRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ShowDbRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string db_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_list(this->db_list_size() - 1).data(),
            this->db_list(this->db_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ShowDbRsp.db_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ShowDbRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ShowDbRsp)
  return false;
#undef DO_
}

void ShowDbRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ShowDbRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated string db_list = 2;
  for (int i = 0; i < this->db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_list(i).data(), this->db_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowDbRsp.db_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->db_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ShowDbRsp)
}

::google::protobuf::uint8* ShowDbRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ShowDbRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated string db_list = 2;
  for (int i = 0; i < this->db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_list(i).data(), this->db_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowDbRsp.db_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->db_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ShowDbRsp)
  return target;
}

size_t ShowDbRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ShowDbRsp)
  size_t total_size = 0;

  // repeated string db_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->db_list_size());
  for (int i = 0; i < this->db_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_list(i));
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowDbRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ShowDbRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowDbRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowDbRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ShowDbRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ShowDbRsp)
    MergeFrom(*source);
  }
}

void ShowDbRsp::MergeFrom(const ShowDbRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ShowDbRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_list_.MergeFrom(from.db_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ShowDbRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ShowDbRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowDbRsp::CopyFrom(const ShowDbRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ShowDbRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowDbRsp::IsInitialized() const {
  return true;
}

void ShowDbRsp::Swap(ShowDbRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowDbRsp::InternalSwap(ShowDbRsp* other) {
  db_list_.UnsafeArenaSwap(&other->db_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowDbRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[71];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowDbRsp

// .cmongoproto.ResHeader header = 1;
bool ShowDbRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ShowDbRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ShowDbRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowDbRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ShowDbRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ShowDbRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ShowDbRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ShowDbRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ShowDbRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowDbRsp.header)
}

// repeated string db_list = 2;
int ShowDbRsp::db_list_size() const {
  return db_list_.size();
}
void ShowDbRsp::clear_db_list() {
  db_list_.Clear();
}
const ::std::string& ShowDbRsp::db_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ShowDbRsp.db_list)
  return db_list_.Get(index);
}
::std::string* ShowDbRsp::mutable_db_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ShowDbRsp.db_list)
  return db_list_.Mutable(index);
}
void ShowDbRsp::set_db_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.ShowDbRsp.db_list)
  db_list_.Mutable(index)->assign(value);
}
void ShowDbRsp::set_db_list(int index, const char* value) {
  db_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.ShowDbRsp.db_list)
}
void ShowDbRsp::set_db_list(int index, const char* value, size_t size) {
  db_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.ShowDbRsp.db_list)
}
::std::string* ShowDbRsp::add_db_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.ShowDbRsp.db_list)
  return db_list_.Add();
}
void ShowDbRsp::add_db_list(const ::std::string& value) {
  db_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.ShowDbRsp.db_list)
}
void ShowDbRsp::add_db_list(const char* value) {
  db_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.ShowDbRsp.db_list)
}
void ShowDbRsp::add_db_list(const char* value, size_t size) {
  db_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.ShowDbRsp.db_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowDbRsp::db_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ShowDbRsp.db_list)
  return db_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ShowDbRsp::mutable_db_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ShowDbRsp.db_list)
  return &db_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Collection::kCollListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Collection::Collection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.Collection)
}
Collection::Collection(const Collection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      coll_list_(from.coll_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:masterproto.Collection)
}

void Collection::SharedCtor() {
  _cached_size_ = 0;
}

Collection::~Collection() {
  // @@protoc_insertion_point(destructor:masterproto.Collection)
  SharedDtor();
}

void Collection::SharedDtor() {
}

void Collection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collection::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[72].descriptor;
}

const Collection& Collection::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

Collection* Collection::New(::google::protobuf::Arena* arena) const {
  Collection* n = new Collection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.Collection)
  coll_list_.Clear();
}

bool Collection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.Collection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string coll_list = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_coll_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coll_list(this->coll_list_size() - 1).data(),
            this->coll_list(this->coll_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.Collection.coll_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.Collection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.Collection)
  return false;
#undef DO_
}

void Collection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.Collection)
  // repeated string coll_list = 1;
  for (int i = 0; i < this->coll_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coll_list(i).data(), this->coll_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.Collection.coll_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->coll_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.Collection)
}

::google::protobuf::uint8* Collection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.Collection)
  // repeated string coll_list = 1;
  for (int i = 0; i < this->coll_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coll_list(i).data(), this->coll_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.Collection.coll_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->coll_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.Collection)
  return target;
}

size_t Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.Collection)
  size_t total_size = 0;

  // repeated string coll_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->coll_list_size());
  for (int i = 0; i < this->coll_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->coll_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  const Collection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Collection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.Collection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.Collection)
    MergeFrom(*source);
  }
}

void Collection::MergeFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coll_list_.MergeFrom(from.coll_list_);
}

void Collection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collection::CopyFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  return true;
}

void Collection::Swap(Collection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Collection::InternalSwap(Collection* other) {
  coll_list_.UnsafeArenaSwap(&other->coll_list_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Collection::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[72];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Collection

// repeated string coll_list = 1;
int Collection::coll_list_size() const {
  return coll_list_.size();
}
void Collection::clear_coll_list() {
  coll_list_.Clear();
}
const ::std::string& Collection::coll_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.Collection.coll_list)
  return coll_list_.Get(index);
}
::std::string* Collection::mutable_coll_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.Collection.coll_list)
  return coll_list_.Mutable(index);
}
void Collection::set_coll_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.Collection.coll_list)
  coll_list_.Mutable(index)->assign(value);
}
void Collection::set_coll_list(int index, const char* value) {
  coll_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.Collection.coll_list)
}
void Collection::set_coll_list(int index, const char* value, size_t size) {
  coll_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.Collection.coll_list)
}
::std::string* Collection::add_coll_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.Collection.coll_list)
  return coll_list_.Add();
}
void Collection::add_coll_list(const ::std::string& value) {
  coll_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.Collection.coll_list)
}
void Collection::add_coll_list(const char* value) {
  coll_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.Collection.coll_list)
}
void Collection::add_coll_list(const char* value, size_t size) {
  coll_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.Collection.coll_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Collection::coll_list() const {
  // @@protoc_insertion_point(field_list:masterproto.Collection.coll_list)
  return coll_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Collection::mutable_coll_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.Collection.coll_list)
  return &coll_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowCollsReq::kHeaderFieldNumber;
const int ShowCollsReq::kClusterIdFieldNumber;
const int ShowCollsReq::kDbListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowCollsReq::ShowCollsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ShowCollsReq)
}
ShowCollsReq::ShowCollsReq(const ShowCollsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      db_list_(from.db_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ShowCollsReq)
}

void ShowCollsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

ShowCollsReq::~ShowCollsReq() {
  // @@protoc_insertion_point(destructor:masterproto.ShowCollsReq)
  SharedDtor();
}

void ShowCollsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ShowCollsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowCollsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[73].descriptor;
}

const ShowCollsReq& ShowCollsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowCollsReq* ShowCollsReq::New(::google::protobuf::Arena* arena) const {
  ShowCollsReq* n = new ShowCollsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowCollsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ShowCollsReq)
  db_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ShowCollsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ShowCollsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ShowCollsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string db_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_list(this->db_list_size() - 1).data(),
            this->db_list(this->db_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ShowCollsReq.db_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ShowCollsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ShowCollsReq)
  return false;
#undef DO_
}

void ShowCollsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ShowCollsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowCollsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // repeated string db_list = 3;
  for (int i = 0; i < this->db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_list(i).data(), this->db_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowCollsReq.db_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ShowCollsReq)
}

::google::protobuf::uint8* ShowCollsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ShowCollsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowCollsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // repeated string db_list = 3;
  for (int i = 0; i < this->db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_list(i).data(), this->db_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ShowCollsReq.db_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->db_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ShowCollsReq)
  return target;
}

size_t ShowCollsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ShowCollsReq)
  size_t total_size = 0;

  // repeated string db_list = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->db_list_size());
  for (int i = 0; i < this->db_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_list(i));
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowCollsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ShowCollsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowCollsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ShowCollsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ShowCollsReq)
    MergeFrom(*source);
  }
}

void ShowCollsReq::MergeFrom(const ShowCollsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ShowCollsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_list_.MergeFrom(from.db_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void ShowCollsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ShowCollsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollsReq::CopyFrom(const ShowCollsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ShowCollsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollsReq::IsInitialized() const {
  return true;
}

void ShowCollsReq::Swap(ShowCollsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowCollsReq::InternalSwap(ShowCollsReq* other) {
  db_list_.UnsafeArenaSwap(&other->db_list_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowCollsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[73];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowCollsReq

// .cmongoproto.ReqHeader header = 1;
bool ShowCollsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ShowCollsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ShowCollsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowCollsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ShowCollsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ShowCollsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ShowCollsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ShowCollsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ShowCollsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowCollsReq.header)
}

// string cluster_id = 2;
void ShowCollsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShowCollsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowCollsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ShowCollsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ShowCollsReq.cluster_id)
}
#if LANG_CXX11
void ShowCollsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ShowCollsReq.cluster_id)
}
#endif
void ShowCollsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ShowCollsReq.cluster_id)
}
void ShowCollsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ShowCollsReq.cluster_id)
}
::std::string* ShowCollsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ShowCollsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShowCollsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ShowCollsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShowCollsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowCollsReq.cluster_id)
}

// repeated string db_list = 3;
int ShowCollsReq::db_list_size() const {
  return db_list_.size();
}
void ShowCollsReq::clear_db_list() {
  db_list_.Clear();
}
const ::std::string& ShowCollsReq::db_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ShowCollsReq.db_list)
  return db_list_.Get(index);
}
::std::string* ShowCollsReq::mutable_db_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.ShowCollsReq.db_list)
  return db_list_.Mutable(index);
}
void ShowCollsReq::set_db_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.ShowCollsReq.db_list)
  db_list_.Mutable(index)->assign(value);
}
void ShowCollsReq::set_db_list(int index, const char* value) {
  db_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.ShowCollsReq.db_list)
}
void ShowCollsReq::set_db_list(int index, const char* value, size_t size) {
  db_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.ShowCollsReq.db_list)
}
::std::string* ShowCollsReq::add_db_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.ShowCollsReq.db_list)
  return db_list_.Add();
}
void ShowCollsReq::add_db_list(const ::std::string& value) {
  db_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.ShowCollsReq.db_list)
}
void ShowCollsReq::add_db_list(const char* value) {
  db_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.ShowCollsReq.db_list)
}
void ShowCollsReq::add_db_list(const char* value, size_t size) {
  db_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.ShowCollsReq.db_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowCollsReq::db_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ShowCollsReq.db_list)
  return db_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ShowCollsReq::mutable_db_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ShowCollsReq.db_list)
  return &db_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowCollsRsp::kHeaderFieldNumber;
const int ShowCollsRsp::kDatabaseListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowCollsRsp::ShowCollsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ShowCollsRsp)
}
ShowCollsRsp::ShowCollsRsp(const ShowCollsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& ShowCollsRsp_DatabaseListEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[74].descriptor;
  database_list_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce);
  database_list_.SetEntryDescriptor(
      &ShowCollsRsp_DatabaseListEntry_descriptor);
  database_list_.MergeFrom(from.database_list_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ShowCollsRsp)
}

void ShowCollsRsp::SharedCtor() {
  const ::google::protobuf::Descriptor*& ShowCollsRsp_DatabaseListEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[74].descriptor;
  database_list_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce);
  database_list_.SetEntryDescriptor(
      &ShowCollsRsp_DatabaseListEntry_descriptor);
  header_ = NULL;
  _cached_size_ = 0;
}

ShowCollsRsp::~ShowCollsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ShowCollsRsp)
  SharedDtor();
}

void ShowCollsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ShowCollsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowCollsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[75].descriptor;
}

const ShowCollsRsp& ShowCollsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowCollsRsp* ShowCollsRsp::New(::google::protobuf::Arena* arena) const {
  ShowCollsRsp* n = new ShowCollsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowCollsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ShowCollsRsp)
  database_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ShowCollsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ShowCollsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .masterproto.Collection> database_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          ShowCollsRsp_DatabaseListEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::masterproto::Collection,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::masterproto::Collection > > parser(&database_list_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ShowCollsRsp.DatabaseListEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ShowCollsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ShowCollsRsp)
  return false;
#undef DO_
}

void ShowCollsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ShowCollsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // map<string, .masterproto.Collection> database_list = 2;
  if (!this->database_list().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "masterproto.ShowCollsRsp.DatabaseListEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->database_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->database_list().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::masterproto::Collection >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_iterator
          it = this->database_list().begin();
          it != this->database_list().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ShowCollsRsp_DatabaseListEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(database_list_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowCollsRsp_DatabaseListEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_iterator
          it = this->database_list().begin();
          it != this->database_list().end(); ++it) {
        entry.reset(database_list_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ShowCollsRsp)
}

::google::protobuf::uint8* ShowCollsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ShowCollsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // map<string, .masterproto.Collection> database_list = 2;
  if (!this->database_list().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "masterproto.ShowCollsRsp.DatabaseListEntry.key");
      }
    };

    if (deterministic &&
        this->database_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->database_list().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::masterproto::Collection >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_iterator
          it = this->database_list().begin();
          it != this->database_list().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ShowCollsRsp_DatabaseListEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(database_list_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ShowCollsRsp_DatabaseListEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_iterator
          it = this->database_list().begin();
          it != this->database_list().end(); ++it) {
        entry.reset(database_list_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ShowCollsRsp)
  return target;
}

size_t ShowCollsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ShowCollsRsp)
  size_t total_size = 0;

  // map<string, .masterproto.Collection> database_list = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->database_list_size());
  {
    ::google::protobuf::scoped_ptr<ShowCollsRsp_DatabaseListEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::masterproto::Collection >::const_iterator
        it = this->database_list().begin();
        it != this->database_list().end(); ++it) {
      entry.reset(database_list_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowCollsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ShowCollsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowCollsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ShowCollsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ShowCollsRsp)
    MergeFrom(*source);
  }
}

void ShowCollsRsp::MergeFrom(const ShowCollsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ShowCollsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_list_.MergeFrom(from.database_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ShowCollsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ShowCollsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollsRsp::CopyFrom(const ShowCollsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ShowCollsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollsRsp::IsInitialized() const {
  return true;
}

void ShowCollsRsp::Swap(ShowCollsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowCollsRsp::InternalSwap(ShowCollsRsp* other) {
  database_list_.Swap(&other->database_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowCollsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[75];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowCollsRsp

// .cmongoproto.ResHeader header = 1;
bool ShowCollsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ShowCollsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ShowCollsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ShowCollsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ShowCollsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ShowCollsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ShowCollsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ShowCollsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ShowCollsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ShowCollsRsp.header)
}

// map<string, .masterproto.Collection> database_list = 2;
int ShowCollsRsp::database_list_size() const {
  return database_list_.size();
}
void ShowCollsRsp::clear_database_list() {
  database_list_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::masterproto::Collection >&
ShowCollsRsp::database_list() const {
  // @@protoc_insertion_point(field_map:masterproto.ShowCollsRsp.database_list)
  return database_list_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::masterproto::Collection >*
ShowCollsRsp::mutable_database_list() {
  // @@protoc_insertion_point(field_mutable_map:masterproto.ShowCollsRsp.database_list)
  return database_list_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSlowQueryReq::kHeaderFieldNumber;
const int GetSlowQueryReq::kBeginTimeFieldNumber;
const int GetSlowQueryReq::kEndTimeFieldNumber;
const int GetSlowQueryReq::kClusterIdFieldNumber;
const int GetSlowQueryReq::kSlowMsFieldNumber;
const int GetSlowQueryReq::kStartFieldNumber;
const int GetSlowQueryReq::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSlowQueryReq::GetSlowQueryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetSlowQueryReq)
}
GetSlowQueryReq::GetSlowQueryReq(const GetSlowQueryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begin_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.begin_time().size() > 0) {
    begin_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&slow_ms_, &from.slow_ms_,
    reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&slow_ms_) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetSlowQueryReq)
}

void GetSlowQueryReq::SharedCtor() {
  begin_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&header_) + sizeof(limit_));
  _cached_size_ = 0;
}

GetSlowQueryReq::~GetSlowQueryReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetSlowQueryReq)
  SharedDtor();
}

void GetSlowQueryReq::SharedDtor() {
  begin_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetSlowQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSlowQueryReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[76].descriptor;
}

const GetSlowQueryReq& GetSlowQueryReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSlowQueryReq* GetSlowQueryReq::New(::google::protobuf::Arena* arena) const {
  GetSlowQueryReq* n = new GetSlowQueryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSlowQueryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetSlowQueryReq)
  begin_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&slow_ms_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&slow_ms_) + sizeof(limit_));
}

bool GetSlowQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetSlowQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string begin_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begin_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->begin_time().data(), this->begin_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetSlowQueryReq.begin_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetSlowQueryReq.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetSlowQueryReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slow_ms = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetSlowQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetSlowQueryReq)
  return false;
#undef DO_
}

void GetSlowQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetSlowQueryReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->begin_time().data(), this->begin_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.begin_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->begin_time(), output);
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->end_time(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slow_ms(), output);
  }

  // int32 start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start(), output);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetSlowQueryReq)
}

::google::protobuf::uint8* GetSlowQueryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetSlowQueryReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->begin_time().data(), this->begin_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.begin_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->begin_time(), target);
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_time(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slow_ms(), target);
  }

  // int32 start = 6;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start(), target);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetSlowQueryReq)
  return target;
}

size_t GetSlowQueryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetSlowQueryReq)
  size_t total_size = 0;

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begin_time());
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slow_ms());
  }

  // int32 start = 6;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSlowQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetSlowQueryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSlowQueryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSlowQueryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetSlowQueryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetSlowQueryReq)
    MergeFrom(*source);
  }
}

void GetSlowQueryReq::MergeFrom(const GetSlowQueryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetSlowQueryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.begin_time().size() > 0) {

    begin_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.slow_ms() != 0) {
    set_slow_ms(from.slow_ms());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void GetSlowQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetSlowQueryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSlowQueryReq::CopyFrom(const GetSlowQueryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetSlowQueryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSlowQueryReq::IsInitialized() const {
  return true;
}

void GetSlowQueryReq::Swap(GetSlowQueryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSlowQueryReq::InternalSwap(GetSlowQueryReq* other) {
  begin_time_.Swap(&other->begin_time_);
  end_time_.Swap(&other->end_time_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(slow_ms_, other->slow_ms_);
  std::swap(start_, other->start_);
  std::swap(limit_, other->limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSlowQueryReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[76];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSlowQueryReq

// .cmongoproto.ReqHeader header = 1;
bool GetSlowQueryReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetSlowQueryReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetSlowQueryReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetSlowQueryReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetSlowQueryReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetSlowQueryReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryReq.header)
}

// string begin_time = 2;
void GetSlowQueryReq::clear_begin_time() {
  begin_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetSlowQueryReq::begin_time() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.begin_time)
  return begin_time_.GetNoArena();
}
void GetSlowQueryReq::set_begin_time(const ::std::string& value) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.begin_time)
}
#if LANG_CXX11
void GetSlowQueryReq::set_begin_time(::std::string&& value) {
  
  begin_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetSlowQueryReq.begin_time)
}
#endif
void GetSlowQueryReq::set_begin_time(const char* value) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetSlowQueryReq.begin_time)
}
void GetSlowQueryReq::set_begin_time(const char* value, size_t size) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetSlowQueryReq.begin_time)
}
::std::string* GetSlowQueryReq::mutable_begin_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryReq.begin_time)
  return begin_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSlowQueryReq::release_begin_time() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryReq.begin_time)
  
  return begin_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSlowQueryReq::set_allocated_begin_time(::std::string* begin_time) {
  if (begin_time != NULL) {
    
  } else {
    
  }
  begin_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryReq.begin_time)
}

// string end_time = 3;
void GetSlowQueryReq::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetSlowQueryReq::end_time() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.end_time)
  return end_time_.GetNoArena();
}
void GetSlowQueryReq::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.end_time)
}
#if LANG_CXX11
void GetSlowQueryReq::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetSlowQueryReq.end_time)
}
#endif
void GetSlowQueryReq::set_end_time(const char* value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetSlowQueryReq.end_time)
}
void GetSlowQueryReq::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetSlowQueryReq.end_time)
}
::std::string* GetSlowQueryReq::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryReq.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSlowQueryReq::release_end_time() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryReq.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSlowQueryReq::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryReq.end_time)
}

// string cluster_id = 4;
void GetSlowQueryReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetSlowQueryReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetSlowQueryReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.cluster_id)
}
#if LANG_CXX11
void GetSlowQueryReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetSlowQueryReq.cluster_id)
}
#endif
void GetSlowQueryReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetSlowQueryReq.cluster_id)
}
void GetSlowQueryReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetSlowQueryReq.cluster_id)
}
::std::string* GetSlowQueryReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSlowQueryReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSlowQueryReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryReq.cluster_id)
}

// int32 slow_ms = 5;
void GetSlowQueryReq::clear_slow_ms() {
  slow_ms_ = 0;
}
::google::protobuf::int32 GetSlowQueryReq::slow_ms() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.slow_ms)
  return slow_ms_;
}
void GetSlowQueryReq::set_slow_ms(::google::protobuf::int32 value) {
  
  slow_ms_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.slow_ms)
}

// int32 start = 6;
void GetSlowQueryReq::clear_start() {
  start_ = 0;
}
::google::protobuf::int32 GetSlowQueryReq::start() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.start)
  return start_;
}
void GetSlowQueryReq::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.start)
}

// int32 limit = 7;
void GetSlowQueryReq::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 GetSlowQueryReq::limit() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryReq.limit)
  return limit_;
}
void GetSlowQueryReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryReq.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlowQueryInfo::kDetailFieldNumber;
const int SlowQueryInfo::kAvgTimeFieldNumber;
const int SlowQueryInfo::kCountFieldNumber;
const int SlowQueryInfo::kMaxTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlowQueryInfo::SlowQueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SlowQueryInfo)
}
SlowQueryInfo::SlowQueryInfo(const SlowQueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&avg_time_, &from.avg_time_,
    reinterpret_cast<char*>(&max_time_) -
    reinterpret_cast<char*>(&avg_time_) + sizeof(max_time_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SlowQueryInfo)
}

void SlowQueryInfo::SharedCtor() {
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avg_time_, 0, reinterpret_cast<char*>(&max_time_) -
    reinterpret_cast<char*>(&avg_time_) + sizeof(max_time_));
  _cached_size_ = 0;
}

SlowQueryInfo::~SlowQueryInfo() {
  // @@protoc_insertion_point(destructor:masterproto.SlowQueryInfo)
  SharedDtor();
}

void SlowQueryInfo::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SlowQueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowQueryInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[77].descriptor;
}

const SlowQueryInfo& SlowQueryInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlowQueryInfo* SlowQueryInfo::New(::google::protobuf::Arena* arena) const {
  SlowQueryInfo* n = new SlowQueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlowQueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SlowQueryInfo)
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avg_time_, 0, reinterpret_cast<char*>(&max_time_) -
    reinterpret_cast<char*>(&avg_time_) + sizeof(max_time_));
}

bool SlowQueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SlowQueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string detail = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SlowQueryInfo.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 avg_time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_time = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SlowQueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SlowQueryInfo)
  return false;
#undef DO_
}

void SlowQueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SlowQueryInfo)
  // string detail = 1;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SlowQueryInfo.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detail(), output);
  }

  // int32 avg_time = 2;
  if (this->avg_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avg_time(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 max_time = 4;
  if (this->max_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SlowQueryInfo)
}

::google::protobuf::uint8* SlowQueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SlowQueryInfo)
  // string detail = 1;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SlowQueryInfo.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->detail(), target);
  }

  // int32 avg_time = 2;
  if (this->avg_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avg_time(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 max_time = 4;
  if (this->max_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SlowQueryInfo)
  return target;
}

size_t SlowQueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SlowQueryInfo)
  size_t total_size = 0;

  // string detail = 1;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  // int32 avg_time = 2;
  if (this->avg_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avg_time());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 max_time = 4;
  if (this->max_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowQueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SlowQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SlowQueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlowQueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SlowQueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SlowQueryInfo)
    MergeFrom(*source);
  }
}

void SlowQueryInfo::MergeFrom(const SlowQueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SlowQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.avg_time() != 0) {
    set_avg_time(from.avg_time());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.max_time() != 0) {
    set_max_time(from.max_time());
  }
}

void SlowQueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SlowQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowQueryInfo::CopyFrom(const SlowQueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SlowQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowQueryInfo::IsInitialized() const {
  return true;
}

void SlowQueryInfo::Swap(SlowQueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlowQueryInfo::InternalSwap(SlowQueryInfo* other) {
  detail_.Swap(&other->detail_);
  std::swap(avg_time_, other->avg_time_);
  std::swap(count_, other->count_);
  std::swap(max_time_, other->max_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlowQueryInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[77];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlowQueryInfo

// string detail = 1;
void SlowQueryInfo::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SlowQueryInfo::detail() const {
  // @@protoc_insertion_point(field_get:masterproto.SlowQueryInfo.detail)
  return detail_.GetNoArena();
}
void SlowQueryInfo::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SlowQueryInfo.detail)
}
#if LANG_CXX11
void SlowQueryInfo::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SlowQueryInfo.detail)
}
#endif
void SlowQueryInfo::set_detail(const char* value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SlowQueryInfo.detail)
}
void SlowQueryInfo::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SlowQueryInfo.detail)
}
::std::string* SlowQueryInfo::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SlowQueryInfo.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlowQueryInfo::release_detail() {
  // @@protoc_insertion_point(field_release:masterproto.SlowQueryInfo.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlowQueryInfo::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SlowQueryInfo.detail)
}

// int32 avg_time = 2;
void SlowQueryInfo::clear_avg_time() {
  avg_time_ = 0;
}
::google::protobuf::int32 SlowQueryInfo::avg_time() const {
  // @@protoc_insertion_point(field_get:masterproto.SlowQueryInfo.avg_time)
  return avg_time_;
}
void SlowQueryInfo::set_avg_time(::google::protobuf::int32 value) {
  
  avg_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SlowQueryInfo.avg_time)
}

// int32 count = 3;
void SlowQueryInfo::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 SlowQueryInfo::count() const {
  // @@protoc_insertion_point(field_get:masterproto.SlowQueryInfo.count)
  return count_;
}
void SlowQueryInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SlowQueryInfo.count)
}

// int32 max_time = 4;
void SlowQueryInfo::clear_max_time() {
  max_time_ = 0;
}
::google::protobuf::int32 SlowQueryInfo::max_time() const {
  // @@protoc_insertion_point(field_get:masterproto.SlowQueryInfo.max_time)
  return max_time_;
}
void SlowQueryInfo::set_max_time(::google::protobuf::int32 value) {
  
  max_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SlowQueryInfo.max_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSlowQueryRsp::kHeaderFieldNumber;
const int GetSlowQueryRsp::kClusterIdFieldNumber;
const int GetSlowQueryRsp::kCountFieldNumber;
const int GetSlowQueryRsp::kSlowQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSlowQueryRsp::GetSlowQueryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetSlowQueryRsp)
}
GetSlowQueryRsp::GetSlowQueryRsp(const GetSlowQueryRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slow_query_(from.slow_query_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetSlowQueryRsp)
}

void GetSlowQueryRsp::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&header_) + sizeof(count_));
  _cached_size_ = 0;
}

GetSlowQueryRsp::~GetSlowQueryRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetSlowQueryRsp)
  SharedDtor();
}

void GetSlowQueryRsp::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetSlowQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSlowQueryRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[78].descriptor;
}

const GetSlowQueryRsp& GetSlowQueryRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSlowQueryRsp* GetSlowQueryRsp::New(::google::protobuf::Arena* arena) const {
  GetSlowQueryRsp* n = new GetSlowQueryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSlowQueryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetSlowQueryRsp)
  slow_query_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

bool GetSlowQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetSlowQueryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetSlowQueryRsp.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string slow_query = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_slow_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slow_query(this->slow_query_size() - 1).data(),
            this->slow_query(this->slow_query_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetSlowQueryRsp.slow_query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetSlowQueryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetSlowQueryRsp)
  return false;
#undef DO_
}

void GetSlowQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetSlowQueryRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryRsp.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  // repeated string slow_query = 4;
  for (int i = 0; i < this->slow_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slow_query(i).data(), this->slow_query(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryRsp.slow_query");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->slow_query(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetSlowQueryRsp)
}

::google::protobuf::uint8* GetSlowQueryRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetSlowQueryRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryRsp.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  // repeated string slow_query = 4;
  for (int i = 0; i < this->slow_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slow_query(i).data(), this->slow_query(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetSlowQueryRsp.slow_query");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->slow_query(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetSlowQueryRsp)
  return target;
}

size_t GetSlowQueryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetSlowQueryRsp)
  size_t total_size = 0;

  // repeated string slow_query = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->slow_query_size());
  for (int i = 0; i < this->slow_query_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->slow_query(i));
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSlowQueryRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetSlowQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSlowQueryRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSlowQueryRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetSlowQueryRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetSlowQueryRsp)
    MergeFrom(*source);
  }
}

void GetSlowQueryRsp::MergeFrom(const GetSlowQueryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetSlowQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slow_query_.MergeFrom(from.slow_query_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void GetSlowQueryRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetSlowQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSlowQueryRsp::CopyFrom(const GetSlowQueryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetSlowQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSlowQueryRsp::IsInitialized() const {
  return true;
}

void GetSlowQueryRsp::Swap(GetSlowQueryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSlowQueryRsp::InternalSwap(GetSlowQueryRsp* other) {
  slow_query_.UnsafeArenaSwap(&other->slow_query_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSlowQueryRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[78];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSlowQueryRsp

// .cmongoproto.ResHeader header = 1;
bool GetSlowQueryRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetSlowQueryRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetSlowQueryRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetSlowQueryRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetSlowQueryRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetSlowQueryRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryRsp.header)
}

// string cluster_id = 2;
void GetSlowQueryRsp::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetSlowQueryRsp::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryRsp.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetSlowQueryRsp::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryRsp.cluster_id)
}
#if LANG_CXX11
void GetSlowQueryRsp::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetSlowQueryRsp.cluster_id)
}
#endif
void GetSlowQueryRsp::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetSlowQueryRsp.cluster_id)
}
void GetSlowQueryRsp::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetSlowQueryRsp.cluster_id)
}
::std::string* GetSlowQueryRsp::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryRsp.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSlowQueryRsp::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetSlowQueryRsp.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSlowQueryRsp::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetSlowQueryRsp.cluster_id)
}

// int64 count = 3;
void GetSlowQueryRsp::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetSlowQueryRsp::count() const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryRsp.count)
  return count_;
}
void GetSlowQueryRsp::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryRsp.count)
}

// repeated string slow_query = 4;
int GetSlowQueryRsp::slow_query_size() const {
  return slow_query_.size();
}
void GetSlowQueryRsp::clear_slow_query() {
  slow_query_.Clear();
}
const ::std::string& GetSlowQueryRsp::slow_query(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GetSlowQueryRsp.slow_query)
  return slow_query_.Get(index);
}
::std::string* GetSlowQueryRsp::mutable_slow_query(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GetSlowQueryRsp.slow_query)
  return slow_query_.Mutable(index);
}
void GetSlowQueryRsp::set_slow_query(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.GetSlowQueryRsp.slow_query)
  slow_query_.Mutable(index)->assign(value);
}
void GetSlowQueryRsp::set_slow_query(int index, const char* value) {
  slow_query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.GetSlowQueryRsp.slow_query)
}
void GetSlowQueryRsp::set_slow_query(int index, const char* value, size_t size) {
  slow_query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetSlowQueryRsp.slow_query)
}
::std::string* GetSlowQueryRsp::add_slow_query() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.GetSlowQueryRsp.slow_query)
  return slow_query_.Add();
}
void GetSlowQueryRsp::add_slow_query(const ::std::string& value) {
  slow_query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.GetSlowQueryRsp.slow_query)
}
void GetSlowQueryRsp::add_slow_query(const char* value) {
  slow_query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.GetSlowQueryRsp.slow_query)
}
void GetSlowQueryRsp::add_slow_query(const char* value, size_t size) {
  slow_query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.GetSlowQueryRsp.slow_query)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSlowQueryRsp::slow_query() const {
  // @@protoc_insertion_point(field_list:masterproto.GetSlowQueryRsp.slow_query)
  return slow_query_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetSlowQueryRsp::mutable_slow_query() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GetSlowQueryRsp.slow_query)
  return &slow_query_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QrySlowInfoReq::kHeaderFieldNumber;
const int QrySlowInfoReq::kBeginTimeFieldNumber;
const int QrySlowInfoReq::kEndTimeFieldNumber;
const int QrySlowInfoReq::kClusterIdFieldNumber;
const int QrySlowInfoReq::kSlowMsFieldNumber;
const int QrySlowInfoReq::kStartFieldNumber;
const int QrySlowInfoReq::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QrySlowInfoReq::QrySlowInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QrySlowInfoReq)
}
QrySlowInfoReq::QrySlowInfoReq(const QrySlowInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begin_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.begin_time().size() > 0) {
    begin_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&slow_ms_, &from.slow_ms_,
    reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&slow_ms_) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:masterproto.QrySlowInfoReq)
}

void QrySlowInfoReq::SharedCtor() {
  begin_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&header_) + sizeof(limit_));
  _cached_size_ = 0;
}

QrySlowInfoReq::~QrySlowInfoReq() {
  // @@protoc_insertion_point(destructor:masterproto.QrySlowInfoReq)
  SharedDtor();
}

void QrySlowInfoReq::SharedDtor() {
  begin_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QrySlowInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QrySlowInfoReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[79].descriptor;
}

const QrySlowInfoReq& QrySlowInfoReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QrySlowInfoReq* QrySlowInfoReq::New(::google::protobuf::Arena* arena) const {
  QrySlowInfoReq* n = new QrySlowInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QrySlowInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QrySlowInfoReq)
  begin_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&slow_ms_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&slow_ms_) + sizeof(limit_));
}

bool QrySlowInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QrySlowInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string begin_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begin_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->begin_time().data(), this->begin_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QrySlowInfoReq.begin_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QrySlowInfoReq.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QrySlowInfoReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slow_ms = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QrySlowInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QrySlowInfoReq)
  return false;
#undef DO_
}

void QrySlowInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QrySlowInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->begin_time().data(), this->begin_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.begin_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->begin_time(), output);
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->end_time(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slow_ms(), output);
  }

  // int32 start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start(), output);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QrySlowInfoReq)
}

::google::protobuf::uint8* QrySlowInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QrySlowInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->begin_time().data(), this->begin_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.begin_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->begin_time(), target);
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_time(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slow_ms(), target);
  }

  // int32 start = 6;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start(), target);
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QrySlowInfoReq)
  return target;
}

size_t QrySlowInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QrySlowInfoReq)
  size_t total_size = 0;

  // string begin_time = 2;
  if (this->begin_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->begin_time());
  }

  // string end_time = 3;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 slow_ms = 5;
  if (this->slow_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slow_ms());
  }

  // int32 start = 6;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QrySlowInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QrySlowInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QrySlowInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QrySlowInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QrySlowInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QrySlowInfoReq)
    MergeFrom(*source);
  }
}

void QrySlowInfoReq::MergeFrom(const QrySlowInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QrySlowInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.begin_time().size() > 0) {

    begin_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.slow_ms() != 0) {
    set_slow_ms(from.slow_ms());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void QrySlowInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QrySlowInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QrySlowInfoReq::CopyFrom(const QrySlowInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QrySlowInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QrySlowInfoReq::IsInitialized() const {
  return true;
}

void QrySlowInfoReq::Swap(QrySlowInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QrySlowInfoReq::InternalSwap(QrySlowInfoReq* other) {
  begin_time_.Swap(&other->begin_time_);
  end_time_.Swap(&other->end_time_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(slow_ms_, other->slow_ms_);
  std::swap(start_, other->start_);
  std::swap(limit_, other->limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QrySlowInfoReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[79];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QrySlowInfoReq

// .cmongoproto.ReqHeader header = 1;
bool QrySlowInfoReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QrySlowInfoReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& QrySlowInfoReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* QrySlowInfoReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoReq.header)
  return header_;
}
::cmongoproto::ReqHeader* QrySlowInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QrySlowInfoReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoReq.header)
}

// string begin_time = 2;
void QrySlowInfoReq::clear_begin_time() {
  begin_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QrySlowInfoReq::begin_time() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.begin_time)
  return begin_time_.GetNoArena();
}
void QrySlowInfoReq::set_begin_time(const ::std::string& value) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.begin_time)
}
#if LANG_CXX11
void QrySlowInfoReq::set_begin_time(::std::string&& value) {
  
  begin_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QrySlowInfoReq.begin_time)
}
#endif
void QrySlowInfoReq::set_begin_time(const char* value) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QrySlowInfoReq.begin_time)
}
void QrySlowInfoReq::set_begin_time(const char* value, size_t size) {
  
  begin_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QrySlowInfoReq.begin_time)
}
::std::string* QrySlowInfoReq::mutable_begin_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoReq.begin_time)
  return begin_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QrySlowInfoReq::release_begin_time() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoReq.begin_time)
  
  return begin_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QrySlowInfoReq::set_allocated_begin_time(::std::string* begin_time) {
  if (begin_time != NULL) {
    
  } else {
    
  }
  begin_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoReq.begin_time)
}

// string end_time = 3;
void QrySlowInfoReq::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QrySlowInfoReq::end_time() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.end_time)
  return end_time_.GetNoArena();
}
void QrySlowInfoReq::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.end_time)
}
#if LANG_CXX11
void QrySlowInfoReq::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QrySlowInfoReq.end_time)
}
#endif
void QrySlowInfoReq::set_end_time(const char* value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QrySlowInfoReq.end_time)
}
void QrySlowInfoReq::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QrySlowInfoReq.end_time)
}
::std::string* QrySlowInfoReq::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoReq.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QrySlowInfoReq::release_end_time() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoReq.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QrySlowInfoReq::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoReq.end_time)
}

// string cluster_id = 4;
void QrySlowInfoReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QrySlowInfoReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void QrySlowInfoReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.cluster_id)
}
#if LANG_CXX11
void QrySlowInfoReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QrySlowInfoReq.cluster_id)
}
#endif
void QrySlowInfoReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QrySlowInfoReq.cluster_id)
}
void QrySlowInfoReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QrySlowInfoReq.cluster_id)
}
::std::string* QrySlowInfoReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QrySlowInfoReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QrySlowInfoReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoReq.cluster_id)
}

// int32 slow_ms = 5;
void QrySlowInfoReq::clear_slow_ms() {
  slow_ms_ = 0;
}
::google::protobuf::int32 QrySlowInfoReq::slow_ms() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.slow_ms)
  return slow_ms_;
}
void QrySlowInfoReq::set_slow_ms(::google::protobuf::int32 value) {
  
  slow_ms_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.slow_ms)
}

// int32 start = 6;
void QrySlowInfoReq::clear_start() {
  start_ = 0;
}
::google::protobuf::int32 QrySlowInfoReq::start() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.start)
  return start_;
}
void QrySlowInfoReq::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.start)
}

// int32 limit = 7;
void QrySlowInfoReq::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 QrySlowInfoReq::limit() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoReq.limit)
  return limit_;
}
void QrySlowInfoReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoReq.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QrySlowInfoRsp::kHeaderFieldNumber;
const int QrySlowInfoRsp::kClusterIdFieldNumber;
const int QrySlowInfoRsp::kCountFieldNumber;
const int QrySlowInfoRsp::kSlowQmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QrySlowInfoRsp::QrySlowInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QrySlowInfoRsp)
}
QrySlowInfoRsp::QrySlowInfoRsp(const QrySlowInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& QrySlowInfoRsp_SlowQmapEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[80].descriptor;
  slow_qmap_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce);
  slow_qmap_.SetEntryDescriptor(
      &QrySlowInfoRsp_SlowQmapEntry_descriptor);
  slow_qmap_.MergeFrom(from.slow_qmap_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:masterproto.QrySlowInfoRsp)
}

void QrySlowInfoRsp::SharedCtor() {
  const ::google::protobuf::Descriptor*& QrySlowInfoRsp_SlowQmapEntry_descriptor = protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[80].descriptor;
  slow_qmap_.SetAssignDescriptorCallback(
      protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce);
  slow_qmap_.SetEntryDescriptor(
      &QrySlowInfoRsp_SlowQmapEntry_descriptor);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&header_) + sizeof(count_));
  _cached_size_ = 0;
}

QrySlowInfoRsp::~QrySlowInfoRsp() {
  // @@protoc_insertion_point(destructor:masterproto.QrySlowInfoRsp)
  SharedDtor();
}

void QrySlowInfoRsp::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QrySlowInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QrySlowInfoRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[81].descriptor;
}

const QrySlowInfoRsp& QrySlowInfoRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QrySlowInfoRsp* QrySlowInfoRsp::New(::google::protobuf::Arena* arena) const {
  QrySlowInfoRsp* n = new QrySlowInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QrySlowInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QrySlowInfoRsp)
  slow_qmap_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

bool QrySlowInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QrySlowInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QrySlowInfoRsp.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .masterproto.SlowQueryInfo> slow_qmap = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          QrySlowInfoRsp_SlowQmapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::masterproto::SlowQueryInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo > > parser(&slow_qmap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QrySlowInfoRsp.SlowQmapEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QrySlowInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QrySlowInfoRsp)
  return false;
#undef DO_
}

void QrySlowInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QrySlowInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoRsp.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  // map<string, .masterproto.SlowQueryInfo> slow_qmap = 4;
  if (!this->slow_qmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "masterproto.QrySlowInfoRsp.SlowQmapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->slow_qmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->slow_qmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_iterator
          it = this->slow_qmap().begin();
          it != this->slow_qmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QrySlowInfoRsp_SlowQmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(slow_qmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QrySlowInfoRsp_SlowQmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_iterator
          it = this->slow_qmap().begin();
          it != this->slow_qmap().end(); ++it) {
        entry.reset(slow_qmap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QrySlowInfoRsp)
}

::google::protobuf::uint8* QrySlowInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QrySlowInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QrySlowInfoRsp.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  // map<string, .masterproto.SlowQueryInfo> slow_qmap = 4;
  if (!this->slow_qmap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "masterproto.QrySlowInfoRsp.SlowQmapEntry.key");
      }
    };

    if (deterministic &&
        this->slow_qmap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->slow_qmap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_iterator
          it = this->slow_qmap().begin();
          it != this->slow_qmap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QrySlowInfoRsp_SlowQmapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(slow_qmap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QrySlowInfoRsp_SlowQmapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_iterator
          it = this->slow_qmap().begin();
          it != this->slow_qmap().end(); ++it) {
        entry.reset(slow_qmap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QrySlowInfoRsp)
  return target;
}

size_t QrySlowInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QrySlowInfoRsp)
  size_t total_size = 0;

  // map<string, .masterproto.SlowQueryInfo> slow_qmap = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->slow_qmap_size());
  {
    ::google::protobuf::scoped_ptr<QrySlowInfoRsp_SlowQmapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >::const_iterator
        it = this->slow_qmap().begin();
        it != this->slow_qmap().end(); ++it) {
      entry.reset(slow_qmap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QrySlowInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QrySlowInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QrySlowInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QrySlowInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QrySlowInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QrySlowInfoRsp)
    MergeFrom(*source);
  }
}

void QrySlowInfoRsp::MergeFrom(const QrySlowInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QrySlowInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slow_qmap_.MergeFrom(from.slow_qmap_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void QrySlowInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QrySlowInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QrySlowInfoRsp::CopyFrom(const QrySlowInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QrySlowInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QrySlowInfoRsp::IsInitialized() const {
  return true;
}

void QrySlowInfoRsp::Swap(QrySlowInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QrySlowInfoRsp::InternalSwap(QrySlowInfoRsp* other) {
  slow_qmap_.Swap(&other->slow_qmap_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QrySlowInfoRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[81];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QrySlowInfoRsp

// .cmongoproto.ResHeader header = 1;
bool QrySlowInfoRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QrySlowInfoRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& QrySlowInfoRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* QrySlowInfoRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoRsp.header)
  return header_;
}
::cmongoproto::ResHeader* QrySlowInfoRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QrySlowInfoRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoRsp.header)
}

// string cluster_id = 2;
void QrySlowInfoRsp::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QrySlowInfoRsp::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoRsp.cluster_id)
  return cluster_id_.GetNoArena();
}
void QrySlowInfoRsp::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoRsp.cluster_id)
}
#if LANG_CXX11
void QrySlowInfoRsp::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QrySlowInfoRsp.cluster_id)
}
#endif
void QrySlowInfoRsp::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QrySlowInfoRsp.cluster_id)
}
void QrySlowInfoRsp::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QrySlowInfoRsp.cluster_id)
}
::std::string* QrySlowInfoRsp::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QrySlowInfoRsp.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QrySlowInfoRsp::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.QrySlowInfoRsp.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QrySlowInfoRsp::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QrySlowInfoRsp.cluster_id)
}

// int64 count = 3;
void QrySlowInfoRsp::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QrySlowInfoRsp::count() const {
  // @@protoc_insertion_point(field_get:masterproto.QrySlowInfoRsp.count)
  return count_;
}
void QrySlowInfoRsp::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:masterproto.QrySlowInfoRsp.count)
}

// map<string, .masterproto.SlowQueryInfo> slow_qmap = 4;
int QrySlowInfoRsp::slow_qmap_size() const {
  return slow_qmap_.size();
}
void QrySlowInfoRsp::clear_slow_qmap() {
  slow_qmap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >&
QrySlowInfoRsp::slow_qmap() const {
  // @@protoc_insertion_point(field_map:masterproto.QrySlowInfoRsp.slow_qmap)
  return slow_qmap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::masterproto::SlowQueryInfo >*
QrySlowInfoRsp::mutable_slow_qmap() {
  // @@protoc_insertion_point(field_mutable_map:masterproto.QrySlowInfoRsp.slow_qmap)
  return slow_qmap_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRole::kNsFieldNumber;
const int AuthRole::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRole::AuthRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AuthRole)
}
AuthRole::AuthRole(const AuthRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:masterproto.AuthRole)
}

void AuthRole::SharedCtor() {
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = 0;
  _cached_size_ = 0;
}

AuthRole::~AuthRole() {
  // @@protoc_insertion_point(destructor:masterproto.AuthRole)
  SharedDtor();
}

void AuthRole::SharedDtor() {
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRole::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[82].descriptor;
}

const AuthRole& AuthRole::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRole* AuthRole::New(::google::protobuf::Arena* arena) const {
  AuthRole* n = new AuthRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRole::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AuthRole)
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = 0;
}

bool AuthRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AuthRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ns = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AuthRole.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.AuthMask mask = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mask(static_cast< ::masterproto::AuthMask >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AuthRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AuthRole)
  return false;
#undef DO_
}

void AuthRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AuthRole)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AuthRole.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ns(), output);
  }

  // .masterproto.AuthMask mask = 2;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mask(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AuthRole)
}

::google::protobuf::uint8* AuthRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AuthRole)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AuthRole.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ns(), target);
  }

  // .masterproto.AuthMask mask = 2;
  if (this->mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AuthRole)
  return target;
}

size_t AuthRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AuthRole)
  size_t total_size = 0;

  // string ns = 1;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // .masterproto.AuthMask mask = 2;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AuthRole)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AuthRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AuthRole)
    MergeFrom(*source);
  }
}

void AuthRole::MergeFrom(const AuthRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AuthRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.mask() != 0) {
    set_mask(from.mask());
  }
}

void AuthRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AuthRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRole::CopyFrom(const AuthRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AuthRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRole::IsInitialized() const {
  return true;
}

void AuthRole::Swap(AuthRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRole::InternalSwap(AuthRole* other) {
  ns_.Swap(&other->ns_);
  std::swap(mask_, other->mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRole::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[82];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRole

// string ns = 1;
void AuthRole::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRole::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.AuthRole.ns)
  return ns_.GetNoArena();
}
void AuthRole::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AuthRole.ns)
}
#if LANG_CXX11
void AuthRole::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AuthRole.ns)
}
#endif
void AuthRole::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AuthRole.ns)
}
void AuthRole::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AuthRole.ns)
}
::std::string* AuthRole::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AuthRole.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRole::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.AuthRole.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRole::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AuthRole.ns)
}

// .masterproto.AuthMask mask = 2;
void AuthRole::clear_mask() {
  mask_ = 0;
}
::masterproto::AuthMask AuthRole::mask() const {
  // @@protoc_insertion_point(field_get:masterproto.AuthRole.mask)
  return static_cast< ::masterproto::AuthMask >(mask_);
}
void AuthRole::set_mask(::masterproto::AuthMask value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:masterproto.AuthRole.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthEntry::kUserFieldNumber;
const int AuthEntry::kRolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthEntry::AuthEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.AuthEntry)
}
AuthEntry::AuthEntry(const AuthEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.AuthEntry)
}

void AuthEntry::SharedCtor() {
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthEntry::~AuthEntry() {
  // @@protoc_insertion_point(destructor:masterproto.AuthEntry)
  SharedDtor();
}

void AuthEntry::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthEntry::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[83].descriptor;
}

const AuthEntry& AuthEntry::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthEntry* AuthEntry::New(::google::protobuf::Arena* arena) const {
  AuthEntry* n = new AuthEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.AuthEntry)
  roles_.Clear();
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.AuthEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.AuthEntry.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.AuthRole roles = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.AuthEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.AuthEntry)
  return false;
#undef DO_
}

void AuthEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.AuthEntry)
  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AuthEntry.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // repeated .masterproto.AuthRole roles = 2;
  for (unsigned int i = 0, n = this->roles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.AuthEntry)
}

::google::protobuf::uint8* AuthEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.AuthEntry)
  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.AuthEntry.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // repeated .masterproto.AuthRole roles = 2;
  for (unsigned int i = 0, n = this->roles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->roles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.AuthEntry)
  return target;
}

size_t AuthEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.AuthEntry)
  size_t total_size = 0;

  // repeated .masterproto.AuthRole roles = 2;
  {
    unsigned int count = this->roles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roles(i));
    }
  }

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.AuthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.AuthEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.AuthEntry)
    MergeFrom(*source);
  }
}

void AuthEntry::MergeFrom(const AuthEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.AuthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roles_.MergeFrom(from.roles_);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void AuthEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.AuthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthEntry::CopyFrom(const AuthEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.AuthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEntry::IsInitialized() const {
  return true;
}

void AuthEntry::Swap(AuthEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthEntry::InternalSwap(AuthEntry* other) {
  roles_.UnsafeArenaSwap(&other->roles_);
  user_.Swap(&other->user_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthEntry::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[83];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthEntry

// string user = 1;
void AuthEntry::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthEntry::user() const {
  // @@protoc_insertion_point(field_get:masterproto.AuthEntry.user)
  return user_.GetNoArena();
}
void AuthEntry::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.AuthEntry.user)
}
#if LANG_CXX11
void AuthEntry::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.AuthEntry.user)
}
#endif
void AuthEntry::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.AuthEntry.user)
}
void AuthEntry::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.AuthEntry.user)
}
::std::string* AuthEntry::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.AuthEntry.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthEntry::release_user() {
  // @@protoc_insertion_point(field_release:masterproto.AuthEntry.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthEntry::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:masterproto.AuthEntry.user)
}

// repeated .masterproto.AuthRole roles = 2;
int AuthEntry::roles_size() const {
  return roles_.size();
}
void AuthEntry::clear_roles() {
  roles_.Clear();
}
const ::masterproto::AuthRole& AuthEntry::roles(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.AuthEntry.roles)
  return roles_.Get(index);
}
::masterproto::AuthRole* AuthEntry::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.AuthEntry.roles)
  return roles_.Mutable(index);
}
::masterproto::AuthRole* AuthEntry::add_roles() {
  // @@protoc_insertion_point(field_add:masterproto.AuthEntry.roles)
  return roles_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >*
AuthEntry::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.AuthEntry.roles)
  return &roles_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >&
AuthEntry::roles() const {
  // @@protoc_insertion_point(field_list:masterproto.AuthEntry.roles)
  return roles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateUserReq::kHeaderFieldNumber;
const int CreateUserReq::kClusterIdFieldNumber;
const int CreateUserReq::kUserNameFieldNumber;
const int CreateUserReq::kPasswordFieldNumber;
const int CreateUserReq::kAuthRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateUserReq::CreateUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateUserReq)
}
CreateUserReq::CreateUserReq(const CreateUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_role_(from.auth_role_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateUserReq)
}

void CreateUserReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

CreateUserReq::~CreateUserReq() {
  // @@protoc_insertion_point(destructor:masterproto.CreateUserReq)
  SharedDtor();
}

void CreateUserReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateUserReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[84].descriptor;
}

const CreateUserReq& CreateUserReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateUserReq* CreateUserReq::New(::google::protobuf::Arena* arena) const {
  CreateUserReq* n = new CreateUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateUserReq)
  auth_role_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CreateUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateUserReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateUserReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateUserReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.AuthRole auth_role = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_auth_role()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateUserReq)
  return false;
#undef DO_
}

void CreateUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateUserReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // repeated .masterproto.AuthRole auth_role = 5;
  for (unsigned int i = 0, n = this->auth_role_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->auth_role(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateUserReq)
}

::google::protobuf::uint8* CreateUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateUserReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateUserReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // repeated .masterproto.AuthRole auth_role = 5;
  for (unsigned int i = 0, n = this->auth_role_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->auth_role(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateUserReq)
  return target;
}

size_t CreateUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateUserReq)
  size_t total_size = 0;

  // repeated .masterproto.AuthRole auth_role = 5;
  {
    unsigned int count = this->auth_role_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_role(i));
    }
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateUserReq)
    MergeFrom(*source);
  }
}

void CreateUserReq::MergeFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_role_.MergeFrom(from.auth_role_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void CreateUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserReq::CopyFrom(const CreateUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserReq::IsInitialized() const {
  return true;
}

void CreateUserReq::Swap(CreateUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateUserReq::InternalSwap(CreateUserReq* other) {
  auth_role_.UnsafeArenaSwap(&other->auth_role_);
  cluster_id_.Swap(&other->cluster_id_);
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateUserReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[84];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateUserReq

// .cmongoproto.ReqHeader header = 1;
bool CreateUserReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateUserReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CreateUserReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CreateUserReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CreateUserReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateUserReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateUserReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateUserReq.header)
}

// string cluster_id = 2;
void CreateUserReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateUserReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void CreateUserReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateUserReq.cluster_id)
}
#if LANG_CXX11
void CreateUserReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateUserReq.cluster_id)
}
#endif
void CreateUserReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateUserReq.cluster_id)
}
void CreateUserReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateUserReq.cluster_id)
}
::std::string* CreateUserReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateUserReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.CreateUserReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateUserReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateUserReq.cluster_id)
}

// string user_name = 3;
void CreateUserReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateUserReq::user_name() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserReq.user_name)
  return user_name_.GetNoArena();
}
void CreateUserReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateUserReq.user_name)
}
#if LANG_CXX11
void CreateUserReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateUserReq.user_name)
}
#endif
void CreateUserReq::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateUserReq.user_name)
}
void CreateUserReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateUserReq.user_name)
}
::std::string* CreateUserReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateUserReq::release_user_name() {
  // @@protoc_insertion_point(field_release:masterproto.CreateUserReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateUserReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateUserReq.user_name)
}

// string password = 4;
void CreateUserReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateUserReq::password() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserReq.password)
  return password_.GetNoArena();
}
void CreateUserReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateUserReq.password)
}
#if LANG_CXX11
void CreateUserReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateUserReq.password)
}
#endif
void CreateUserReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateUserReq.password)
}
void CreateUserReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateUserReq.password)
}
::std::string* CreateUserReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateUserReq::release_password() {
  // @@protoc_insertion_point(field_release:masterproto.CreateUserReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateUserReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateUserReq.password)
}

// repeated .masterproto.AuthRole auth_role = 5;
int CreateUserReq::auth_role_size() const {
  return auth_role_.size();
}
void CreateUserReq::clear_auth_role() {
  auth_role_.Clear();
}
const ::masterproto::AuthRole& CreateUserReq::auth_role(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserReq.auth_role)
  return auth_role_.Get(index);
}
::masterproto::AuthRole* CreateUserReq::mutable_auth_role(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserReq.auth_role)
  return auth_role_.Mutable(index);
}
::masterproto::AuthRole* CreateUserReq::add_auth_role() {
  // @@protoc_insertion_point(field_add:masterproto.CreateUserReq.auth_role)
  return auth_role_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >*
CreateUserReq::mutable_auth_role() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.CreateUserReq.auth_role)
  return &auth_role_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >&
CreateUserReq::auth_role() const {
  // @@protoc_insertion_point(field_list:masterproto.CreateUserReq.auth_role)
  return auth_role_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateUserRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateUserRsp::CreateUserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateUserRsp)
}
CreateUserRsp::CreateUserRsp(const CreateUserRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateUserRsp)
}

void CreateUserRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateUserRsp::~CreateUserRsp() {
  // @@protoc_insertion_point(destructor:masterproto.CreateUserRsp)
  SharedDtor();
}

void CreateUserRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateUserRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[85].descriptor;
}

const CreateUserRsp& CreateUserRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateUserRsp* CreateUserRsp::New(::google::protobuf::Arena* arena) const {
  CreateUserRsp* n = new CreateUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateUserRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CreateUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateUserRsp)
  return false;
#undef DO_
}

void CreateUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateUserRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateUserRsp)
}

::google::protobuf::uint8* CreateUserRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateUserRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateUserRsp)
  return target;
}

size_t CreateUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateUserRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateUserRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateUserRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateUserRsp)
    MergeFrom(*source);
  }
}

void CreateUserRsp::MergeFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void CreateUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRsp::CopyFrom(const CreateUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRsp::IsInitialized() const {
  return true;
}

void CreateUserRsp::Swap(CreateUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateUserRsp::InternalSwap(CreateUserRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateUserRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[85];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateUserRsp

// .cmongoproto.ResHeader header = 1;
bool CreateUserRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateUserRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CreateUserRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateUserRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CreateUserRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateUserRsp.header)
  return header_;
}
::cmongoproto::ResHeader* CreateUserRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateUserRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateUserRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateUserRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserListReq::kHeaderFieldNumber;
const int QueryUserListReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserListReq::QueryUserListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryUserListReq)
}
QueryUserListReq::QueryUserListReq(const QueryUserListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryUserListReq)
}

void QueryUserListReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

QueryUserListReq::~QueryUserListReq() {
  // @@protoc_insertion_point(destructor:masterproto.QueryUserListReq)
  SharedDtor();
}

void QueryUserListReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryUserListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserListReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[86].descriptor;
}

const QueryUserListReq& QueryUserListReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryUserListReq* QueryUserListReq::New(::google::protobuf::Arena* arena) const {
  QueryUserListReq* n = new QueryUserListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryUserListReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool QueryUserListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryUserListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.QueryUserListReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryUserListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryUserListReq)
  return false;
#undef DO_
}

void QueryUserListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryUserListReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryUserListReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryUserListReq)
}

::google::protobuf::uint8* QueryUserListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryUserListReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.QueryUserListReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryUserListReq)
  return target;
}

size_t QueryUserListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryUserListReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryUserListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryUserListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryUserListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryUserListReq)
    MergeFrom(*source);
  }
}

void QueryUserListReq::MergeFrom(const QueryUserListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryUserListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void QueryUserListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryUserListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserListReq::CopyFrom(const QueryUserListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryUserListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserListReq::IsInitialized() const {
  return true;
}

void QueryUserListReq::Swap(QueryUserListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserListReq::InternalSwap(QueryUserListReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserListReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[86];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserListReq

// .cmongoproto.ReqHeader header = 1;
bool QueryUserListReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryUserListReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& QueryUserListReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryUserListReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* QueryUserListReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryUserListReq.header)
  return header_;
}
::cmongoproto::ReqHeader* QueryUserListReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryUserListReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryUserListReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryUserListReq.header)
}

// string cluster_id = 2;
void QueryUserListReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUserListReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryUserListReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void QueryUserListReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.QueryUserListReq.cluster_id)
}
#if LANG_CXX11
void QueryUserListReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.QueryUserListReq.cluster_id)
}
#endif
void QueryUserListReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.QueryUserListReq.cluster_id)
}
void QueryUserListReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.QueryUserListReq.cluster_id)
}
::std::string* QueryUserListReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.QueryUserListReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUserListReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.QueryUserListReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserListReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryUserListReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserListRsp::kHeaderFieldNumber;
const int QueryUserListRsp::kAuthListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserListRsp::QueryUserListRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.QueryUserListRsp)
}
QueryUserListRsp::QueryUserListRsp(const QueryUserListRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_list_(from.auth_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.QueryUserListRsp)
}

void QueryUserListRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

QueryUserListRsp::~QueryUserListRsp() {
  // @@protoc_insertion_point(destructor:masterproto.QueryUserListRsp)
  SharedDtor();
}

void QueryUserListRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void QueryUserListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserListRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[87].descriptor;
}

const QueryUserListRsp& QueryUserListRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryUserListRsp* QueryUserListRsp::New(::google::protobuf::Arena* arena) const {
  QueryUserListRsp* n = new QueryUserListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.QueryUserListRsp)
  auth_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool QueryUserListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.QueryUserListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.AuthEntry auth_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_auth_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.QueryUserListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.QueryUserListRsp)
  return false;
#undef DO_
}

void QueryUserListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.QueryUserListRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.AuthEntry auth_list = 2;
  for (unsigned int i = 0, n = this->auth_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auth_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.QueryUserListRsp)
}

::google::protobuf::uint8* QueryUserListRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.QueryUserListRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.AuthEntry auth_list = 2;
  for (unsigned int i = 0, n = this->auth_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->auth_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.QueryUserListRsp)
  return target;
}

size_t QueryUserListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.QueryUserListRsp)
  size_t total_size = 0;

  // repeated .masterproto.AuthEntry auth_list = 2;
  {
    unsigned int count = this->auth_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_list(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserListRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.QueryUserListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryUserListRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserListRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.QueryUserListRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.QueryUserListRsp)
    MergeFrom(*source);
  }
}

void QueryUserListRsp::MergeFrom(const QueryUserListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.QueryUserListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_list_.MergeFrom(from.auth_list_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void QueryUserListRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.QueryUserListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserListRsp::CopyFrom(const QueryUserListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.QueryUserListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserListRsp::IsInitialized() const {
  return true;
}

void QueryUserListRsp::Swap(QueryUserListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserListRsp::InternalSwap(QueryUserListRsp* other) {
  auth_list_.UnsafeArenaSwap(&other->auth_list_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserListRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[87];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserListRsp

// .cmongoproto.ResHeader header = 1;
bool QueryUserListRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void QueryUserListRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& QueryUserListRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.QueryUserListRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* QueryUserListRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.QueryUserListRsp.header)
  return header_;
}
::cmongoproto::ResHeader* QueryUserListRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.QueryUserListRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void QueryUserListRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.QueryUserListRsp.header)
}

// repeated .masterproto.AuthEntry auth_list = 2;
int QueryUserListRsp::auth_list_size() const {
  return auth_list_.size();
}
void QueryUserListRsp::clear_auth_list() {
  auth_list_.Clear();
}
const ::masterproto::AuthEntry& QueryUserListRsp::auth_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.QueryUserListRsp.auth_list)
  return auth_list_.Get(index);
}
::masterproto::AuthEntry* QueryUserListRsp::mutable_auth_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.QueryUserListRsp.auth_list)
  return auth_list_.Mutable(index);
}
::masterproto::AuthEntry* QueryUserListRsp::add_auth_list() {
  // @@protoc_insertion_point(field_add:masterproto.QueryUserListRsp.auth_list)
  return auth_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::AuthEntry >*
QueryUserListRsp::mutable_auth_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.QueryUserListRsp.auth_list)
  return &auth_list_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::AuthEntry >&
QueryUserListRsp::auth_list() const {
  // @@protoc_insertion_point(field_list:masterproto.QueryUserListRsp.auth_list)
  return auth_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteUserReq::kHeaderFieldNumber;
const int DeleteUserReq::kClusterIdFieldNumber;
const int DeleteUserReq::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteUserReq::DeleteUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DeleteUserReq)
}
DeleteUserReq::DeleteUserReq(const DeleteUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DeleteUserReq)
}

void DeleteUserReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

DeleteUserReq::~DeleteUserReq() {
  // @@protoc_insertion_point(destructor:masterproto.DeleteUserReq)
  SharedDtor();
}

void DeleteUserReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DeleteUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteUserReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[88].descriptor;
}

const DeleteUserReq& DeleteUserReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteUserReq* DeleteUserReq::New(::google::protobuf::Arena* arena) const {
  DeleteUserReq* n = new DeleteUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DeleteUserReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DeleteUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DeleteUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DeleteUserReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DeleteUserReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DeleteUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DeleteUserReq)
  return false;
#undef DO_
}

void DeleteUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DeleteUserReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DeleteUserReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DeleteUserReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DeleteUserReq)
}

::google::protobuf::uint8* DeleteUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DeleteUserReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DeleteUserReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DeleteUserReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DeleteUserReq)
  return target;
}

size_t DeleteUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DeleteUserReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DeleteUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DeleteUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DeleteUserReq)
    MergeFrom(*source);
  }
}

void DeleteUserReq::MergeFrom(const DeleteUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DeleteUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void DeleteUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DeleteUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserReq::CopyFrom(const DeleteUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DeleteUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserReq::IsInitialized() const {
  return true;
}

void DeleteUserReq::Swap(DeleteUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteUserReq::InternalSwap(DeleteUserReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  user_name_.Swap(&other->user_name_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteUserReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[88];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteUserReq

// .cmongoproto.ReqHeader header = 1;
bool DeleteUserReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DeleteUserReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DeleteUserReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DeleteUserReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DeleteUserReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DeleteUserReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DeleteUserReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DeleteUserReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DeleteUserReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DeleteUserReq.header)
}

// string cluster_id = 2;
void DeleteUserReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteUserReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DeleteUserReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DeleteUserReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DeleteUserReq.cluster_id)
}
#if LANG_CXX11
void DeleteUserReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DeleteUserReq.cluster_id)
}
#endif
void DeleteUserReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DeleteUserReq.cluster_id)
}
void DeleteUserReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DeleteUserReq.cluster_id)
}
::std::string* DeleteUserReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DeleteUserReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteUserReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DeleteUserReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteUserReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DeleteUserReq.cluster_id)
}

// string user_name = 3;
void DeleteUserReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteUserReq::user_name() const {
  // @@protoc_insertion_point(field_get:masterproto.DeleteUserReq.user_name)
  return user_name_.GetNoArena();
}
void DeleteUserReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DeleteUserReq.user_name)
}
#if LANG_CXX11
void DeleteUserReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DeleteUserReq.user_name)
}
#endif
void DeleteUserReq::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DeleteUserReq.user_name)
}
void DeleteUserReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DeleteUserReq.user_name)
}
::std::string* DeleteUserReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DeleteUserReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteUserReq::release_user_name() {
  // @@protoc_insertion_point(field_release:masterproto.DeleteUserReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteUserReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DeleteUserReq.user_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteUserRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteUserRsp::DeleteUserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DeleteUserRsp)
}
DeleteUserRsp::DeleteUserRsp(const DeleteUserRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DeleteUserRsp)
}

void DeleteUserRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DeleteUserRsp::~DeleteUserRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DeleteUserRsp)
  SharedDtor();
}

void DeleteUserRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DeleteUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteUserRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[89].descriptor;
}

const DeleteUserRsp& DeleteUserRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteUserRsp* DeleteUserRsp::New(::google::protobuf::Arena* arena) const {
  DeleteUserRsp* n = new DeleteUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DeleteUserRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DeleteUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DeleteUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DeleteUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DeleteUserRsp)
  return false;
#undef DO_
}

void DeleteUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DeleteUserRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DeleteUserRsp)
}

::google::protobuf::uint8* DeleteUserRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DeleteUserRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DeleteUserRsp)
  return target;
}

size_t DeleteUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DeleteUserRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DeleteUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteUserRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DeleteUserRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DeleteUserRsp)
    MergeFrom(*source);
  }
}

void DeleteUserRsp::MergeFrom(const DeleteUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DeleteUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DeleteUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DeleteUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserRsp::CopyFrom(const DeleteUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DeleteUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRsp::IsInitialized() const {
  return true;
}

void DeleteUserRsp::Swap(DeleteUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteUserRsp::InternalSwap(DeleteUserRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteUserRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[89];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteUserRsp

// .cmongoproto.ResHeader header = 1;
bool DeleteUserRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DeleteUserRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DeleteUserRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DeleteUserRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DeleteUserRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DeleteUserRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DeleteUserRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DeleteUserRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DeleteUserRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DeleteUserRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUserAuthReq::kHeaderFieldNumber;
const int SetUserAuthReq::kClusterIdFieldNumber;
const int SetUserAuthReq::kUserNameFieldNumber;
const int SetUserAuthReq::kAuthRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUserAuthReq::SetUserAuthReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetUserAuthReq)
}
SetUserAuthReq::SetUserAuthReq(const SetUserAuthReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      auth_role_(from.auth_role_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetUserAuthReq)
}

void SetUserAuthReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

SetUserAuthReq::~SetUserAuthReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetUserAuthReq)
  SharedDtor();
}

void SetUserAuthReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetUserAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserAuthReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[90].descriptor;
}

const SetUserAuthReq& SetUserAuthReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetUserAuthReq* SetUserAuthReq::New(::google::protobuf::Arena* arena) const {
  SetUserAuthReq* n = new SetUserAuthReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetUserAuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetUserAuthReq)
  auth_role_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetUserAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetUserAuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetUserAuthReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetUserAuthReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.AuthRole auth_role = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_auth_role()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetUserAuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetUserAuthReq)
  return false;
#undef DO_
}

void SetUserAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetUserAuthReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetUserAuthReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetUserAuthReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // repeated .masterproto.AuthRole auth_role = 4;
  for (unsigned int i = 0, n = this->auth_role_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auth_role(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetUserAuthReq)
}

::google::protobuf::uint8* SetUserAuthReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetUserAuthReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetUserAuthReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetUserAuthReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // repeated .masterproto.AuthRole auth_role = 4;
  for (unsigned int i = 0, n = this->auth_role_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->auth_role(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetUserAuthReq)
  return target;
}

size_t SetUserAuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetUserAuthReq)
  size_t total_size = 0;

  // repeated .masterproto.AuthRole auth_role = 4;
  {
    unsigned int count = this->auth_role_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_role(i));
    }
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetUserAuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserAuthReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUserAuthReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetUserAuthReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetUserAuthReq)
    MergeFrom(*source);
  }
}

void SetUserAuthReq::MergeFrom(const SetUserAuthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetUserAuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_role_.MergeFrom(from.auth_role_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void SetUserAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetUserAuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserAuthReq::CopyFrom(const SetUserAuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetUserAuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserAuthReq::IsInitialized() const {
  return true;
}

void SetUserAuthReq::Swap(SetUserAuthReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUserAuthReq::InternalSwap(SetUserAuthReq* other) {
  auth_role_.UnsafeArenaSwap(&other->auth_role_);
  cluster_id_.Swap(&other->cluster_id_);
  user_name_.Swap(&other->user_name_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUserAuthReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[90];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetUserAuthReq

// .cmongoproto.ReqHeader header = 1;
bool SetUserAuthReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetUserAuthReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetUserAuthReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetUserAuthReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetUserAuthReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetUserAuthReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetUserAuthReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetUserAuthReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetUserAuthReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetUserAuthReq.header)
}

// string cluster_id = 2;
void SetUserAuthReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetUserAuthReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetUserAuthReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetUserAuthReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetUserAuthReq.cluster_id)
}
#if LANG_CXX11
void SetUserAuthReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetUserAuthReq.cluster_id)
}
#endif
void SetUserAuthReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetUserAuthReq.cluster_id)
}
void SetUserAuthReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetUserAuthReq.cluster_id)
}
::std::string* SetUserAuthReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetUserAuthReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetUserAuthReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.SetUserAuthReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetUserAuthReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetUserAuthReq.cluster_id)
}

// string user_name = 3;
void SetUserAuthReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetUserAuthReq::user_name() const {
  // @@protoc_insertion_point(field_get:masterproto.SetUserAuthReq.user_name)
  return user_name_.GetNoArena();
}
void SetUserAuthReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetUserAuthReq.user_name)
}
#if LANG_CXX11
void SetUserAuthReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetUserAuthReq.user_name)
}
#endif
void SetUserAuthReq::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetUserAuthReq.user_name)
}
void SetUserAuthReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetUserAuthReq.user_name)
}
::std::string* SetUserAuthReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetUserAuthReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetUserAuthReq::release_user_name() {
  // @@protoc_insertion_point(field_release:masterproto.SetUserAuthReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetUserAuthReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetUserAuthReq.user_name)
}

// repeated .masterproto.AuthRole auth_role = 4;
int SetUserAuthReq::auth_role_size() const {
  return auth_role_.size();
}
void SetUserAuthReq::clear_auth_role() {
  auth_role_.Clear();
}
const ::masterproto::AuthRole& SetUserAuthReq::auth_role(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.SetUserAuthReq.auth_role)
  return auth_role_.Get(index);
}
::masterproto::AuthRole* SetUserAuthReq::mutable_auth_role(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.SetUserAuthReq.auth_role)
  return auth_role_.Mutable(index);
}
::masterproto::AuthRole* SetUserAuthReq::add_auth_role() {
  // @@protoc_insertion_point(field_add:masterproto.SetUserAuthReq.auth_role)
  return auth_role_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >*
SetUserAuthReq::mutable_auth_role() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.SetUserAuthReq.auth_role)
  return &auth_role_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::AuthRole >&
SetUserAuthReq::auth_role() const {
  // @@protoc_insertion_point(field_list:masterproto.SetUserAuthReq.auth_role)
  return auth_role_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUserAuthRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUserAuthRsp::SetUserAuthRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetUserAuthRsp)
}
SetUserAuthRsp::SetUserAuthRsp(const SetUserAuthRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetUserAuthRsp)
}

void SetUserAuthRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetUserAuthRsp::~SetUserAuthRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetUserAuthRsp)
  SharedDtor();
}

void SetUserAuthRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetUserAuthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserAuthRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[91].descriptor;
}

const SetUserAuthRsp& SetUserAuthRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetUserAuthRsp* SetUserAuthRsp::New(::google::protobuf::Arena* arena) const {
  SetUserAuthRsp* n = new SetUserAuthRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetUserAuthRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetUserAuthRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetUserAuthRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetUserAuthRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetUserAuthRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetUserAuthRsp)
  return false;
#undef DO_
}

void SetUserAuthRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetUserAuthRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetUserAuthRsp)
}

::google::protobuf::uint8* SetUserAuthRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetUserAuthRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetUserAuthRsp)
  return target;
}

size_t SetUserAuthRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetUserAuthRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserAuthRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetUserAuthRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUserAuthRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUserAuthRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetUserAuthRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetUserAuthRsp)
    MergeFrom(*source);
  }
}

void SetUserAuthRsp::MergeFrom(const SetUserAuthRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetUserAuthRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetUserAuthRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetUserAuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserAuthRsp::CopyFrom(const SetUserAuthRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetUserAuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserAuthRsp::IsInitialized() const {
  return true;
}

void SetUserAuthRsp::Swap(SetUserAuthRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUserAuthRsp::InternalSwap(SetUserAuthRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUserAuthRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[91];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetUserAuthRsp

// .cmongoproto.ResHeader header = 1;
bool SetUserAuthRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetUserAuthRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetUserAuthRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetUserAuthRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetUserAuthRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetUserAuthRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetUserAuthRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetUserAuthRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetUserAuthRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetUserAuthRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableReq::kHeaderFieldNumber;
const int CreateTableReq::kClusterIdFieldNumber;
const int CreateTableReq::kTableTypeFieldNumber;
const int CreateTableReq::kNamespaceFieldNumber;
const int CreateTableReq::kShardKeysFieldNumber;
const int CreateTableReq::kIsUniqKeyFieldNumber;
const int CreateTableReq::kShardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableReq::CreateTableReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateTableReq)
}
CreateTableReq::CreateTableReq(const CreateTableReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_keys_(from.shard_keys_),
      shard_list_(from.shard_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  table_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_type().size() > 0) {
    table_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_type_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  is_uniq_key_ = from.is_uniq_key_;
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateTableReq)
}

void CreateTableReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&is_uniq_key_) -
    reinterpret_cast<char*>(&header_) + sizeof(is_uniq_key_));
  _cached_size_ = 0;
}

CreateTableReq::~CreateTableReq() {
  // @@protoc_insertion_point(destructor:masterproto.CreateTableReq)
  SharedDtor();
}

void CreateTableReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[92].descriptor;
}

const CreateTableReq& CreateTableReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableReq* CreateTableReq::New(::google::protobuf::Arena* arena) const {
  CreateTableReq* n = new CreateTableReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateTableReq)
  shard_keys_.Clear();
  shard_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  is_uniq_key_ = false;
}

bool CreateTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateTableReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateTableReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_type = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_type().data(), this->table_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateTableReq.table_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateTableReq.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_keys = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_keys(this->shard_keys_size() - 1).data(),
            this->shard_keys(this->shard_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateTableReq.shard_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_uniq_key = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_uniq_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_list = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_list(this->shard_list_size() - 1).data(),
            this->shard_list(this->shard_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CreateTableReq.shard_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateTableReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateTableReq)
  return false;
#undef DO_
}

void CreateTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateTableReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string table_type = 3;
  if (this->table_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_type().data(), this->table_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.table_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_type(), output);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // repeated string shard_keys = 5;
  for (int i = 0; i < this->shard_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_keys(i).data(), this->shard_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.shard_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->shard_keys(i), output);
  }

  // bool is_uniq_key = 6;
  if (this->is_uniq_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_uniq_key(), output);
  }

  // repeated string shard_list = 7;
  for (int i = 0; i < this->shard_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_list(i).data(), this->shard_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.shard_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shard_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateTableReq)
}

::google::protobuf::uint8* CreateTableReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateTableReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string table_type = 3;
  if (this->table_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_type().data(), this->table_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.table_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_type(), target);
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namespace_(), target);
  }

  // repeated string shard_keys = 5;
  for (int i = 0; i < this->shard_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_keys(i).data(), this->shard_keys(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.shard_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->shard_keys(i), target);
  }

  // bool is_uniq_key = 6;
  if (this->is_uniq_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_uniq_key(), target);
  }

  // repeated string shard_list = 7;
  for (int i = 0; i < this->shard_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_list(i).data(), this->shard_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CreateTableReq.shard_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->shard_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateTableReq)
  return target;
}

size_t CreateTableReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateTableReq)
  size_t total_size = 0;

  // repeated string shard_keys = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_keys_size());
  for (int i = 0; i < this->shard_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_keys(i));
  }

  // repeated string shard_list = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_list_size());
  for (int i = 0; i < this->shard_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_list(i));
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string table_type = 3;
  if (this->table_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_type());
  }

  // string namespace = 4;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool is_uniq_key = 6;
  if (this->is_uniq_key() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateTableReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateTableReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateTableReq)
    MergeFrom(*source);
  }
}

void CreateTableReq::MergeFrom(const CreateTableReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateTableReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shard_keys_.MergeFrom(from.shard_keys_);
  shard_list_.MergeFrom(from.shard_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.table_type().size() > 0) {

    table_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_type_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.is_uniq_key() != 0) {
    set_is_uniq_key(from.is_uniq_key());
  }
}

void CreateTableReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableReq::CopyFrom(const CreateTableReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableReq::IsInitialized() const {
  return true;
}

void CreateTableReq::Swap(CreateTableReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableReq::InternalSwap(CreateTableReq* other) {
  shard_keys_.UnsafeArenaSwap(&other->shard_keys_);
  shard_list_.UnsafeArenaSwap(&other->shard_list_);
  cluster_id_.Swap(&other->cluster_id_);
  table_type_.Swap(&other->table_type_);
  namespace__.Swap(&other->namespace__);
  std::swap(header_, other->header_);
  std::swap(is_uniq_key_, other->is_uniq_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[92];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableReq

// .cmongoproto.ReqHeader header = 1;
bool CreateTableReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CreateTableReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CreateTableReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CreateTableReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateTableReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateTableReq.header)
}

// string cluster_id = 2;
void CreateTableReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void CreateTableReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.cluster_id)
}
#if LANG_CXX11
void CreateTableReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateTableReq.cluster_id)
}
#endif
void CreateTableReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateTableReq.cluster_id)
}
void CreateTableReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateTableReq.cluster_id)
}
::std::string* CreateTableReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.CreateTableReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateTableReq.cluster_id)
}

// string table_type = 3;
void CreateTableReq::clear_table_type() {
  table_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableReq::table_type() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.table_type)
  return table_type_.GetNoArena();
}
void CreateTableReq::set_table_type(const ::std::string& value) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.table_type)
}
#if LANG_CXX11
void CreateTableReq::set_table_type(::std::string&& value) {
  
  table_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateTableReq.table_type)
}
#endif
void CreateTableReq::set_table_type(const char* value) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateTableReq.table_type)
}
void CreateTableReq::set_table_type(const char* value, size_t size) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateTableReq.table_type)
}
::std::string* CreateTableReq::mutable_table_type() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.table_type)
  return table_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableReq::release_table_type() {
  // @@protoc_insertion_point(field_release:masterproto.CreateTableReq.table_type)
  
  return table_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableReq::set_allocated_table_type(::std::string* table_type) {
  if (table_type != NULL) {
    
  } else {
    
  }
  table_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_type);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateTableReq.table_type)
}

// string namespace = 4;
void CreateTableReq::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableReq::namespace_() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.namespace)
  return namespace__.GetNoArena();
}
void CreateTableReq::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.namespace)
}
#if LANG_CXX11
void CreateTableReq::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CreateTableReq.namespace)
}
#endif
void CreateTableReq::set_namespace_(const char* value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CreateTableReq.namespace)
}
void CreateTableReq::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateTableReq.namespace)
}
::std::string* CreateTableReq::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableReq::release_namespace_() {
  // @@protoc_insertion_point(field_release:masterproto.CreateTableReq.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableReq::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateTableReq.namespace)
}

// repeated string shard_keys = 5;
int CreateTableReq::shard_keys_size() const {
  return shard_keys_.size();
}
void CreateTableReq::clear_shard_keys() {
  shard_keys_.Clear();
}
const ::std::string& CreateTableReq::shard_keys(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.shard_keys)
  return shard_keys_.Get(index);
}
::std::string* CreateTableReq::mutable_shard_keys(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.shard_keys)
  return shard_keys_.Mutable(index);
}
void CreateTableReq::set_shard_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.shard_keys)
  shard_keys_.Mutable(index)->assign(value);
}
void CreateTableReq::set_shard_keys(int index, const char* value) {
  shard_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.CreateTableReq.shard_keys)
}
void CreateTableReq::set_shard_keys(int index, const char* value, size_t size) {
  shard_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateTableReq.shard_keys)
}
::std::string* CreateTableReq::add_shard_keys() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.CreateTableReq.shard_keys)
  return shard_keys_.Add();
}
void CreateTableReq::add_shard_keys(const ::std::string& value) {
  shard_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.CreateTableReq.shard_keys)
}
void CreateTableReq::add_shard_keys(const char* value) {
  shard_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.CreateTableReq.shard_keys)
}
void CreateTableReq::add_shard_keys(const char* value, size_t size) {
  shard_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.CreateTableReq.shard_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateTableReq::shard_keys() const {
  // @@protoc_insertion_point(field_list:masterproto.CreateTableReq.shard_keys)
  return shard_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateTableReq::mutable_shard_keys() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.CreateTableReq.shard_keys)
  return &shard_keys_;
}

// bool is_uniq_key = 6;
void CreateTableReq::clear_is_uniq_key() {
  is_uniq_key_ = false;
}
bool CreateTableReq::is_uniq_key() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.is_uniq_key)
  return is_uniq_key_;
}
void CreateTableReq::set_is_uniq_key(bool value) {
  
  is_uniq_key_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.is_uniq_key)
}

// repeated string shard_list = 7;
int CreateTableReq::shard_list_size() const {
  return shard_list_.size();
}
void CreateTableReq::clear_shard_list() {
  shard_list_.Clear();
}
const ::std::string& CreateTableReq::shard_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableReq.shard_list)
  return shard_list_.Get(index);
}
::std::string* CreateTableReq::mutable_shard_list(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableReq.shard_list)
  return shard_list_.Mutable(index);
}
void CreateTableReq::set_shard_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.CreateTableReq.shard_list)
  shard_list_.Mutable(index)->assign(value);
}
void CreateTableReq::set_shard_list(int index, const char* value) {
  shard_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.CreateTableReq.shard_list)
}
void CreateTableReq::set_shard_list(int index, const char* value, size_t size) {
  shard_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.CreateTableReq.shard_list)
}
::std::string* CreateTableReq::add_shard_list() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.CreateTableReq.shard_list)
  return shard_list_.Add();
}
void CreateTableReq::add_shard_list(const ::std::string& value) {
  shard_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.CreateTableReq.shard_list)
}
void CreateTableReq::add_shard_list(const char* value) {
  shard_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.CreateTableReq.shard_list)
}
void CreateTableReq::add_shard_list(const char* value, size_t size) {
  shard_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.CreateTableReq.shard_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateTableReq::shard_list() const {
  // @@protoc_insertion_point(field_list:masterproto.CreateTableReq.shard_list)
  return shard_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateTableReq::mutable_shard_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.CreateTableReq.shard_list)
  return &shard_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableRsp::CreateTableRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CreateTableRsp)
}
CreateTableRsp::CreateTableRsp(const CreateTableRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.CreateTableRsp)
}

void CreateTableRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateTableRsp::~CreateTableRsp() {
  // @@protoc_insertion_point(destructor:masterproto.CreateTableRsp)
  SharedDtor();
}

void CreateTableRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CreateTableRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[93].descriptor;
}

const CreateTableRsp& CreateTableRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableRsp* CreateTableRsp::New(::google::protobuf::Arena* arena) const {
  CreateTableRsp* n = new CreateTableRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CreateTableRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CreateTableRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CreateTableRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CreateTableRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CreateTableRsp)
  return false;
#undef DO_
}

void CreateTableRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CreateTableRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CreateTableRsp)
}

::google::protobuf::uint8* CreateTableRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CreateTableRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CreateTableRsp)
  return target;
}

size_t CreateTableRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CreateTableRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CreateTableRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CreateTableRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CreateTableRsp)
    MergeFrom(*source);
  }
}

void CreateTableRsp::MergeFrom(const CreateTableRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CreateTableRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void CreateTableRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CreateTableRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRsp::CopyFrom(const CreateTableRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CreateTableRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRsp::IsInitialized() const {
  return true;
}

void CreateTableRsp::Swap(CreateTableRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableRsp::InternalSwap(CreateTableRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[93];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableRsp

// .cmongoproto.ResHeader header = 1;
bool CreateTableRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CreateTableRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CreateTableRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CreateTableRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CreateTableRsp.header)
  return header_;
}
::cmongoproto::ResHeader* CreateTableRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CreateTableRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CreateTableRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropTableReq::kHeaderFieldNumber;
const int DropTableReq::kClusterIdFieldNumber;
const int DropTableReq::kNamespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropTableReq::DropTableReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropTableReq)
}
DropTableReq::DropTableReq(const DropTableReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropTableReq)
}

void DropTableReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

DropTableReq::~DropTableReq() {
  // @@protoc_insertion_point(destructor:masterproto.DropTableReq)
  SharedDtor();
}

void DropTableReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropTableReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[94].descriptor;
}

const DropTableReq& DropTableReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropTableReq* DropTableReq::New(::google::protobuf::Arena* arena) const {
  DropTableReq* n = new DropTableReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropTableReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropTableReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropTableReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropTableReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropTableReq.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropTableReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropTableReq)
  return false;
#undef DO_
}

void DropTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropTableReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropTableReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropTableReq.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->namespace_(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropTableReq)
}

::google::protobuf::uint8* DropTableReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropTableReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropTableReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropTableReq.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropTableReq)
  return target;
}

size_t DropTableReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropTableReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string namespace = 3;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropTableReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropTableReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DropTableReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropTableReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropTableReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropTableReq)
    MergeFrom(*source);
  }
}

void DropTableReq::MergeFrom(const DropTableReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropTableReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void DropTableReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropTableReq::CopyFrom(const DropTableReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableReq::IsInitialized() const {
  return true;
}

void DropTableReq::Swap(DropTableReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropTableReq::InternalSwap(DropTableReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  namespace__.Swap(&other->namespace__);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropTableReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[94];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropTableReq

// .cmongoproto.ReqHeader header = 1;
bool DropTableReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropTableReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DropTableReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropTableReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DropTableReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropTableReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DropTableReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropTableReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropTableReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropTableReq.header)
}

// string cluster_id = 2;
void DropTableReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropTableReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DropTableReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DropTableReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropTableReq.cluster_id)
}
#if LANG_CXX11
void DropTableReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropTableReq.cluster_id)
}
#endif
void DropTableReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropTableReq.cluster_id)
}
void DropTableReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropTableReq.cluster_id)
}
::std::string* DropTableReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropTableReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropTableReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DropTableReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropTableReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropTableReq.cluster_id)
}

// string namespace = 3;
void DropTableReq::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropTableReq::namespace_() const {
  // @@protoc_insertion_point(field_get:masterproto.DropTableReq.namespace)
  return namespace__.GetNoArena();
}
void DropTableReq::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropTableReq.namespace)
}
#if LANG_CXX11
void DropTableReq::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropTableReq.namespace)
}
#endif
void DropTableReq::set_namespace_(const char* value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropTableReq.namespace)
}
void DropTableReq::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropTableReq.namespace)
}
::std::string* DropTableReq::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropTableReq.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropTableReq::release_namespace_() {
  // @@protoc_insertion_point(field_release:masterproto.DropTableReq.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropTableReq::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropTableReq.namespace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropTableRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropTableRsp::DropTableRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropTableRsp)
}
DropTableRsp::DropTableRsp(const DropTableRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropTableRsp)
}

void DropTableRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DropTableRsp::~DropTableRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DropTableRsp)
  SharedDtor();
}

void DropTableRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropTableRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropTableRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[95].descriptor;
}

const DropTableRsp& DropTableRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropTableRsp* DropTableRsp::New(::google::protobuf::Arena* arena) const {
  DropTableRsp* n = new DropTableRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropTableRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropTableRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropTableRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropTableRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropTableRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropTableRsp)
  return false;
#undef DO_
}

void DropTableRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropTableRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropTableRsp)
}

::google::protobuf::uint8* DropTableRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropTableRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropTableRsp)
  return target;
}

size_t DropTableRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropTableRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropTableRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropTableRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DropTableRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropTableRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropTableRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropTableRsp)
    MergeFrom(*source);
  }
}

void DropTableRsp::MergeFrom(const DropTableRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropTableRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DropTableRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropTableRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropTableRsp::CopyFrom(const DropTableRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropTableRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableRsp::IsInitialized() const {
  return true;
}

void DropTableRsp::Swap(DropTableRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropTableRsp::InternalSwap(DropTableRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropTableRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[95];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropTableRsp

// .cmongoproto.ResHeader header = 1;
bool DropTableRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropTableRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DropTableRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropTableRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DropTableRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropTableRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DropTableRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropTableRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropTableRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropTableRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropDatabaseReq::kHeaderFieldNumber;
const int DropDatabaseReq::kClusterIdFieldNumber;
const int DropDatabaseReq::kDbNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropDatabaseReq::DropDatabaseReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropDatabaseReq)
}
DropDatabaseReq::DropDatabaseReq(const DropDatabaseReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropDatabaseReq)
}

void DropDatabaseReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

DropDatabaseReq::~DropDatabaseReq() {
  // @@protoc_insertion_point(destructor:masterproto.DropDatabaseReq)
  SharedDtor();
}

void DropDatabaseReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropDatabaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropDatabaseReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[96].descriptor;
}

const DropDatabaseReq& DropDatabaseReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropDatabaseReq* DropDatabaseReq::New(::google::protobuf::Arena* arena) const {
  DropDatabaseReq* n = new DropDatabaseReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropDatabaseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropDatabaseReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropDatabaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropDatabaseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropDatabaseReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropDatabaseReq.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropDatabaseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropDatabaseReq)
  return false;
#undef DO_
}

void DropDatabaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropDatabaseReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropDatabaseReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropDatabaseReq.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropDatabaseReq)
}

::google::protobuf::uint8* DropDatabaseReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropDatabaseReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropDatabaseReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropDatabaseReq.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropDatabaseReq)
  return target;
}

size_t DropDatabaseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropDatabaseReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropDatabaseReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropDatabaseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DropDatabaseReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropDatabaseReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropDatabaseReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropDatabaseReq)
    MergeFrom(*source);
  }
}

void DropDatabaseReq::MergeFrom(const DropDatabaseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropDatabaseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void DropDatabaseReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropDatabaseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropDatabaseReq::CopyFrom(const DropDatabaseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropDatabaseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseReq::IsInitialized() const {
  return true;
}

void DropDatabaseReq::Swap(DropDatabaseReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropDatabaseReq::InternalSwap(DropDatabaseReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  db_name_.Swap(&other->db_name_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropDatabaseReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[96];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropDatabaseReq

// .cmongoproto.ReqHeader header = 1;
bool DropDatabaseReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropDatabaseReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DropDatabaseReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropDatabaseReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DropDatabaseReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropDatabaseReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DropDatabaseReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropDatabaseReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropDatabaseReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropDatabaseReq.header)
}

// string cluster_id = 2;
void DropDatabaseReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropDatabaseReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DropDatabaseReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DropDatabaseReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropDatabaseReq.cluster_id)
}
#if LANG_CXX11
void DropDatabaseReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropDatabaseReq.cluster_id)
}
#endif
void DropDatabaseReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropDatabaseReq.cluster_id)
}
void DropDatabaseReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropDatabaseReq.cluster_id)
}
::std::string* DropDatabaseReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropDatabaseReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropDatabaseReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DropDatabaseReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropDatabaseReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropDatabaseReq.cluster_id)
}

// string db_name = 3;
void DropDatabaseReq::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropDatabaseReq::db_name() const {
  // @@protoc_insertion_point(field_get:masterproto.DropDatabaseReq.db_name)
  return db_name_.GetNoArena();
}
void DropDatabaseReq::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropDatabaseReq.db_name)
}
#if LANG_CXX11
void DropDatabaseReq::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropDatabaseReq.db_name)
}
#endif
void DropDatabaseReq::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropDatabaseReq.db_name)
}
void DropDatabaseReq::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropDatabaseReq.db_name)
}
::std::string* DropDatabaseReq::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropDatabaseReq.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropDatabaseReq::release_db_name() {
  // @@protoc_insertion_point(field_release:masterproto.DropDatabaseReq.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropDatabaseReq::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropDatabaseReq.db_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropDatabaseRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropDatabaseRsp::DropDatabaseRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropDatabaseRsp)
}
DropDatabaseRsp::DropDatabaseRsp(const DropDatabaseRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropDatabaseRsp)
}

void DropDatabaseRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DropDatabaseRsp::~DropDatabaseRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DropDatabaseRsp)
  SharedDtor();
}

void DropDatabaseRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropDatabaseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropDatabaseRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[97].descriptor;
}

const DropDatabaseRsp& DropDatabaseRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropDatabaseRsp* DropDatabaseRsp::New(::google::protobuf::Arena* arena) const {
  DropDatabaseRsp* n = new DropDatabaseRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropDatabaseRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropDatabaseRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropDatabaseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropDatabaseRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropDatabaseRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropDatabaseRsp)
  return false;
#undef DO_
}

void DropDatabaseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropDatabaseRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropDatabaseRsp)
}

::google::protobuf::uint8* DropDatabaseRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropDatabaseRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropDatabaseRsp)
  return target;
}

size_t DropDatabaseRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropDatabaseRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropDatabaseRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropDatabaseRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DropDatabaseRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropDatabaseRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropDatabaseRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropDatabaseRsp)
    MergeFrom(*source);
  }
}

void DropDatabaseRsp::MergeFrom(const DropDatabaseRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropDatabaseRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DropDatabaseRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropDatabaseRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropDatabaseRsp::CopyFrom(const DropDatabaseRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropDatabaseRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseRsp::IsInitialized() const {
  return true;
}

void DropDatabaseRsp::Swap(DropDatabaseRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropDatabaseRsp::InternalSwap(DropDatabaseRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropDatabaseRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[97];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropDatabaseRsp

// .cmongoproto.ResHeader header = 1;
bool DropDatabaseRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropDatabaseRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DropDatabaseRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropDatabaseRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DropDatabaseRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropDatabaseRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DropDatabaseRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropDatabaseRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropDatabaseRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropDatabaseRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnsureIndexReq::kHeaderFieldNumber;
const int EnsureIndexReq::kClusterIdFieldNumber;
const int EnsureIndexReq::kNsFieldNumber;
const int EnsureIndexReq::kKeyFieldNumber;
const int EnsureIndexReq::kUniqueFieldNumber;
const int EnsureIndexReq::kDropDupsFieldNumber;
const int EnsureIndexReq::kBackgroundFieldNumber;
const int EnsureIndexReq::kSparseFieldNumber;
const int EnsureIndexReq::kExpireAfterFieldNumber;
const int EnsureIndexReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnsureIndexReq::EnsureIndexReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.EnsureIndexReq)
}
EnsureIndexReq::EnsureIndexReq(const EnsureIndexReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_(from.key_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&unique_, &from.unique_,
    reinterpret_cast<char*>(&expire_after_) -
    reinterpret_cast<char*>(&unique_) + sizeof(expire_after_));
  // @@protoc_insertion_point(copy_constructor:masterproto.EnsureIndexReq)
}

void EnsureIndexReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&expire_after_) -
    reinterpret_cast<char*>(&header_) + sizeof(expire_after_));
  _cached_size_ = 0;
}

EnsureIndexReq::~EnsureIndexReq() {
  // @@protoc_insertion_point(destructor:masterproto.EnsureIndexReq)
  SharedDtor();
}

void EnsureIndexReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void EnsureIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnsureIndexReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[98].descriptor;
}

const EnsureIndexReq& EnsureIndexReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnsureIndexReq* EnsureIndexReq::New(::google::protobuf::Arena* arena) const {
  EnsureIndexReq* n = new EnsureIndexReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnsureIndexReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.EnsureIndexReq)
  key_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&unique_, 0, reinterpret_cast<char*>(&expire_after_) -
    reinterpret_cast<char*>(&unique_) + sizeof(expire_after_));
}

bool EnsureIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.EnsureIndexReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.EnsureIndexReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.EnsureIndexReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string key = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.EnsureIndexReq.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unique = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool drop_dups = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_dups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool background = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sparse = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expire_after = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.EnsureIndexReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.EnsureIndexReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.EnsureIndexReq)
  return false;
#undef DO_
}

void EnsureIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.EnsureIndexReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ns(), output);
  }

  // repeated string key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(i), output);
  }

  // bool unique = 5;
  if (this->unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->unique(), output);
  }

  // bool drop_dups = 6;
  if (this->drop_dups() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->drop_dups(), output);
  }

  // bool background = 7;
  if (this->background() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->background(), output);
  }

  // bool sparse = 8;
  if (this->sparse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sparse(), output);
  }

  // int32 expire_after = 9;
  if (this->expire_after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expire_after(), output);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.EnsureIndexReq)
}

::google::protobuf::uint8* EnsureIndexReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.EnsureIndexReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ns(), target);
  }

  // repeated string key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->key(i), target);
  }

  // bool unique = 5;
  if (this->unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->unique(), target);
  }

  // bool drop_dups = 6;
  if (this->drop_dups() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->drop_dups(), target);
  }

  // bool background = 7;
  if (this->background() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->background(), target);
  }

  // bool sparse = 8;
  if (this->sparse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sparse(), target);
  }

  // int32 expire_after = 9;
  if (this->expire_after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expire_after(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.EnsureIndexReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.EnsureIndexReq)
  return target;
}

size_t EnsureIndexReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.EnsureIndexReq)
  size_t total_size = 0;

  // repeated string key = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->key_size());
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool unique = 5;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_dups = 6;
  if (this->drop_dups() != 0) {
    total_size += 1 + 1;
  }

  // bool background = 7;
  if (this->background() != 0) {
    total_size += 1 + 1;
  }

  // bool sparse = 8;
  if (this->sparse() != 0) {
    total_size += 1 + 1;
  }

  // int32 expire_after = 9;
  if (this->expire_after() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expire_after());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnsureIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.EnsureIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnsureIndexReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnsureIndexReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.EnsureIndexReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.EnsureIndexReq)
    MergeFrom(*source);
  }
}

void EnsureIndexReq::MergeFrom(const EnsureIndexReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.EnsureIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.MergeFrom(from.key_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.unique() != 0) {
    set_unique(from.unique());
  }
  if (from.drop_dups() != 0) {
    set_drop_dups(from.drop_dups());
  }
  if (from.background() != 0) {
    set_background(from.background());
  }
  if (from.sparse() != 0) {
    set_sparse(from.sparse());
  }
  if (from.expire_after() != 0) {
    set_expire_after(from.expire_after());
  }
}

void EnsureIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.EnsureIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnsureIndexReq::CopyFrom(const EnsureIndexReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.EnsureIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnsureIndexReq::IsInitialized() const {
  return true;
}

void EnsureIndexReq::Swap(EnsureIndexReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnsureIndexReq::InternalSwap(EnsureIndexReq* other) {
  key_.UnsafeArenaSwap(&other->key_);
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  name_.Swap(&other->name_);
  std::swap(header_, other->header_);
  std::swap(unique_, other->unique_);
  std::swap(drop_dups_, other->drop_dups_);
  std::swap(background_, other->background_);
  std::swap(sparse_, other->sparse_);
  std::swap(expire_after_, other->expire_after_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnsureIndexReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[98];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnsureIndexReq

// .cmongoproto.ReqHeader header = 1;
bool EnsureIndexReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void EnsureIndexReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& EnsureIndexReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* EnsureIndexReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexReq.header)
  return header_;
}
::cmongoproto::ReqHeader* EnsureIndexReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.EnsureIndexReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void EnsureIndexReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.EnsureIndexReq.header)
}

// string cluster_id = 2;
void EnsureIndexReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EnsureIndexReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void EnsureIndexReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.cluster_id)
}
#if LANG_CXX11
void EnsureIndexReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.EnsureIndexReq.cluster_id)
}
#endif
void EnsureIndexReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.EnsureIndexReq.cluster_id)
}
void EnsureIndexReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.EnsureIndexReq.cluster_id)
}
::std::string* EnsureIndexReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnsureIndexReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.EnsureIndexReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnsureIndexReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.EnsureIndexReq.cluster_id)
}

// string ns = 3;
void EnsureIndexReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EnsureIndexReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.ns)
  return ns_.GetNoArena();
}
void EnsureIndexReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.ns)
}
#if LANG_CXX11
void EnsureIndexReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.EnsureIndexReq.ns)
}
#endif
void EnsureIndexReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.EnsureIndexReq.ns)
}
void EnsureIndexReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.EnsureIndexReq.ns)
}
::std::string* EnsureIndexReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnsureIndexReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.EnsureIndexReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnsureIndexReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.EnsureIndexReq.ns)
}

// repeated string key = 4;
int EnsureIndexReq::key_size() const {
  return key_.size();
}
void EnsureIndexReq::clear_key() {
  key_.Clear();
}
const ::std::string& EnsureIndexReq::key(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.key)
  return key_.Get(index);
}
::std::string* EnsureIndexReq::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexReq.key)
  return key_.Mutable(index);
}
void EnsureIndexReq::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.key)
  key_.Mutable(index)->assign(value);
}
void EnsureIndexReq::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.EnsureIndexReq.key)
}
void EnsureIndexReq::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.EnsureIndexReq.key)
}
::std::string* EnsureIndexReq::add_key() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.EnsureIndexReq.key)
  return key_.Add();
}
void EnsureIndexReq::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.EnsureIndexReq.key)
}
void EnsureIndexReq::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.EnsureIndexReq.key)
}
void EnsureIndexReq::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.EnsureIndexReq.key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnsureIndexReq::key() const {
  // @@protoc_insertion_point(field_list:masterproto.EnsureIndexReq.key)
  return key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EnsureIndexReq::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.EnsureIndexReq.key)
  return &key_;
}

// bool unique = 5;
void EnsureIndexReq::clear_unique() {
  unique_ = false;
}
bool EnsureIndexReq::unique() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.unique)
  return unique_;
}
void EnsureIndexReq::set_unique(bool value) {
  
  unique_ = value;
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.unique)
}

// bool drop_dups = 6;
void EnsureIndexReq::clear_drop_dups() {
  drop_dups_ = false;
}
bool EnsureIndexReq::drop_dups() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.drop_dups)
  return drop_dups_;
}
void EnsureIndexReq::set_drop_dups(bool value) {
  
  drop_dups_ = value;
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.drop_dups)
}

// bool background = 7;
void EnsureIndexReq::clear_background() {
  background_ = false;
}
bool EnsureIndexReq::background() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.background)
  return background_;
}
void EnsureIndexReq::set_background(bool value) {
  
  background_ = value;
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.background)
}

// bool sparse = 8;
void EnsureIndexReq::clear_sparse() {
  sparse_ = false;
}
bool EnsureIndexReq::sparse() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.sparse)
  return sparse_;
}
void EnsureIndexReq::set_sparse(bool value) {
  
  sparse_ = value;
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.sparse)
}

// int32 expire_after = 9;
void EnsureIndexReq::clear_expire_after() {
  expire_after_ = 0;
}
::google::protobuf::int32 EnsureIndexReq::expire_after() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.expire_after)
  return expire_after_;
}
void EnsureIndexReq::set_expire_after(::google::protobuf::int32 value) {
  
  expire_after_ = value;
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.expire_after)
}

// string name = 10;
void EnsureIndexReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EnsureIndexReq::name() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexReq.name)
  return name_.GetNoArena();
}
void EnsureIndexReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.EnsureIndexReq.name)
}
#if LANG_CXX11
void EnsureIndexReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.EnsureIndexReq.name)
}
#endif
void EnsureIndexReq::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.EnsureIndexReq.name)
}
void EnsureIndexReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.EnsureIndexReq.name)
}
::std::string* EnsureIndexReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnsureIndexReq::release_name() {
  // @@protoc_insertion_point(field_release:masterproto.EnsureIndexReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnsureIndexReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.EnsureIndexReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnsureIndexRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnsureIndexRsp::EnsureIndexRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.EnsureIndexRsp)
}
EnsureIndexRsp::EnsureIndexRsp(const EnsureIndexRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.EnsureIndexRsp)
}

void EnsureIndexRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

EnsureIndexRsp::~EnsureIndexRsp() {
  // @@protoc_insertion_point(destructor:masterproto.EnsureIndexRsp)
  SharedDtor();
}

void EnsureIndexRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void EnsureIndexRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnsureIndexRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[99].descriptor;
}

const EnsureIndexRsp& EnsureIndexRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnsureIndexRsp* EnsureIndexRsp::New(::google::protobuf::Arena* arena) const {
  EnsureIndexRsp* n = new EnsureIndexRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnsureIndexRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.EnsureIndexRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool EnsureIndexRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.EnsureIndexRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.EnsureIndexRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.EnsureIndexRsp)
  return false;
#undef DO_
}

void EnsureIndexRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.EnsureIndexRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.EnsureIndexRsp)
}

::google::protobuf::uint8* EnsureIndexRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.EnsureIndexRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.EnsureIndexRsp)
  return target;
}

size_t EnsureIndexRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.EnsureIndexRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnsureIndexRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.EnsureIndexRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const EnsureIndexRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnsureIndexRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.EnsureIndexRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.EnsureIndexRsp)
    MergeFrom(*source);
  }
}

void EnsureIndexRsp::MergeFrom(const EnsureIndexRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.EnsureIndexRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void EnsureIndexRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.EnsureIndexRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnsureIndexRsp::CopyFrom(const EnsureIndexRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.EnsureIndexRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnsureIndexRsp::IsInitialized() const {
  return true;
}

void EnsureIndexRsp::Swap(EnsureIndexRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnsureIndexRsp::InternalSwap(EnsureIndexRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnsureIndexRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[99];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnsureIndexRsp

// .cmongoproto.ResHeader header = 1;
bool EnsureIndexRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void EnsureIndexRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& EnsureIndexRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.EnsureIndexRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* EnsureIndexRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.EnsureIndexRsp.header)
  return header_;
}
::cmongoproto::ResHeader* EnsureIndexRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.EnsureIndexRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void EnsureIndexRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.EnsureIndexRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropIndexReq::kHeaderFieldNumber;
const int DropIndexReq::kClusterIdFieldNumber;
const int DropIndexReq::kNsFieldNumber;
const int DropIndexReq::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropIndexReq::DropIndexReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropIndexReq)
}
DropIndexReq::DropIndexReq(const DropIndexReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_(from.key_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropIndexReq)
}

void DropIndexReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

DropIndexReq::~DropIndexReq() {
  // @@protoc_insertion_point(destructor:masterproto.DropIndexReq)
  SharedDtor();
}

void DropIndexReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropIndexReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[100].descriptor;
}

const DropIndexReq& DropIndexReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropIndexReq* DropIndexReq::New(::google::protobuf::Arena* arena) const {
  DropIndexReq* n = new DropIndexReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropIndexReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropIndexReq)
  key_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropIndexReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string key = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexReq.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropIndexReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropIndexReq)
  return false;
#undef DO_
}

void DropIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropIndexReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ns(), output);
  }

  // repeated string key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropIndexReq)
}

::google::protobuf::uint8* DropIndexReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropIndexReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ns(), target);
  }

  // repeated string key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexReq.key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->key(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropIndexReq)
  return target;
}

size_t DropIndexReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropIndexReq)
  size_t total_size = 0;

  // repeated string key = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->key_size());
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropIndexReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropIndexReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropIndexReq)
    MergeFrom(*source);
  }
}

void DropIndexReq::MergeFrom(const DropIndexReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropIndexReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.MergeFrom(from.key_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void DropIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexReq::CopyFrom(const DropIndexReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropIndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexReq::IsInitialized() const {
  return true;
}

void DropIndexReq::Swap(DropIndexReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropIndexReq::InternalSwap(DropIndexReq* other) {
  key_.UnsafeArenaSwap(&other->key_);
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropIndexReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[100];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropIndexReq

// .cmongoproto.ReqHeader header = 1;
bool DropIndexReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropIndexReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DropIndexReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DropIndexReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DropIndexReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropIndexReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexReq.header)
}

// string cluster_id = 2;
void DropIndexReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropIndexReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DropIndexReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropIndexReq.cluster_id)
}
#if LANG_CXX11
void DropIndexReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropIndexReq.cluster_id)
}
#endif
void DropIndexReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexReq.cluster_id)
}
void DropIndexReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexReq.cluster_id)
}
::std::string* DropIndexReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropIndexReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropIndexReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexReq.cluster_id)
}

// string ns = 3;
void DropIndexReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropIndexReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexReq.ns)
  return ns_.GetNoArena();
}
void DropIndexReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropIndexReq.ns)
}
#if LANG_CXX11
void DropIndexReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropIndexReq.ns)
}
#endif
void DropIndexReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexReq.ns)
}
void DropIndexReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexReq.ns)
}
::std::string* DropIndexReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropIndexReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropIndexReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexReq.ns)
}

// repeated string key = 4;
int DropIndexReq::key_size() const {
  return key_.size();
}
void DropIndexReq::clear_key() {
  key_.Clear();
}
const ::std::string& DropIndexReq::key(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexReq.key)
  return key_.Get(index);
}
::std::string* DropIndexReq::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexReq.key)
  return key_.Mutable(index);
}
void DropIndexReq::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.DropIndexReq.key)
  key_.Mutable(index)->assign(value);
}
void DropIndexReq::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexReq.key)
}
void DropIndexReq::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexReq.key)
}
::std::string* DropIndexReq::add_key() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.DropIndexReq.key)
  return key_.Add();
}
void DropIndexReq::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.DropIndexReq.key)
}
void DropIndexReq::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.DropIndexReq.key)
}
void DropIndexReq::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.DropIndexReq.key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DropIndexReq::key() const {
  // @@protoc_insertion_point(field_list:masterproto.DropIndexReq.key)
  return key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DropIndexReq::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.DropIndexReq.key)
  return &key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropIndexRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropIndexRsp::DropIndexRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropIndexRsp)
}
DropIndexRsp::DropIndexRsp(const DropIndexRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropIndexRsp)
}

void DropIndexRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DropIndexRsp::~DropIndexRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DropIndexRsp)
  SharedDtor();
}

void DropIndexRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropIndexRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropIndexRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[101].descriptor;
}

const DropIndexRsp& DropIndexRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropIndexRsp* DropIndexRsp::New(::google::protobuf::Arena* arena) const {
  DropIndexRsp* n = new DropIndexRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropIndexRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropIndexRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropIndexRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropIndexRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropIndexRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropIndexRsp)
  return false;
#undef DO_
}

void DropIndexRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropIndexRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropIndexRsp)
}

::google::protobuf::uint8* DropIndexRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropIndexRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropIndexRsp)
  return target;
}

size_t DropIndexRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropIndexRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropIndexRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropIndexRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropIndexRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropIndexRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropIndexRsp)
    MergeFrom(*source);
  }
}

void DropIndexRsp::MergeFrom(const DropIndexRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropIndexRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DropIndexRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropIndexRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexRsp::CopyFrom(const DropIndexRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropIndexRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRsp::IsInitialized() const {
  return true;
}

void DropIndexRsp::Swap(DropIndexRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropIndexRsp::InternalSwap(DropIndexRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropIndexRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[101];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropIndexRsp

// .cmongoproto.ResHeader header = 1;
bool DropIndexRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropIndexRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DropIndexRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DropIndexRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DropIndexRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropIndexRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropIndexNameReq::kHeaderFieldNumber;
const int DropIndexNameReq::kClusterIdFieldNumber;
const int DropIndexNameReq::kNsFieldNumber;
const int DropIndexNameReq::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropIndexNameReq::DropIndexNameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropIndexNameReq)
}
DropIndexNameReq::DropIndexNameReq(const DropIndexNameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropIndexNameReq)
}

void DropIndexNameReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

DropIndexNameReq::~DropIndexNameReq() {
  // @@protoc_insertion_point(destructor:masterproto.DropIndexNameReq)
  SharedDtor();
}

void DropIndexNameReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropIndexNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropIndexNameReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[102].descriptor;
}

const DropIndexNameReq& DropIndexNameReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropIndexNameReq* DropIndexNameReq::New(::google::protobuf::Arena* arena) const {
  DropIndexNameReq* n = new DropIndexNameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropIndexNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropIndexNameReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropIndexNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropIndexNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexNameReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexNameReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DropIndexNameReq.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropIndexNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropIndexNameReq)
  return false;
#undef DO_
}

void DropIndexNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropIndexNameReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ns(), output);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropIndexNameReq)
}

::google::protobuf::uint8* DropIndexNameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropIndexNameReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ns(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DropIndexNameReq.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropIndexNameReq)
  return target;
}

size_t DropIndexNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropIndexNameReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropIndexNameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropIndexNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexNameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropIndexNameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropIndexNameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropIndexNameReq)
    MergeFrom(*source);
  }
}

void DropIndexNameReq::MergeFrom(const DropIndexNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropIndexNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void DropIndexNameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropIndexNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexNameReq::CopyFrom(const DropIndexNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropIndexNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexNameReq::IsInitialized() const {
  return true;
}

void DropIndexNameReq::Swap(DropIndexNameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropIndexNameReq::InternalSwap(DropIndexNameReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  key_.Swap(&other->key_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropIndexNameReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[102];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropIndexNameReq

// .cmongoproto.ReqHeader header = 1;
bool DropIndexNameReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropIndexNameReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DropIndexNameReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexNameReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DropIndexNameReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexNameReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DropIndexNameReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexNameReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropIndexNameReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexNameReq.header)
}

// string cluster_id = 2;
void DropIndexNameReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropIndexNameReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexNameReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DropIndexNameReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropIndexNameReq.cluster_id)
}
#if LANG_CXX11
void DropIndexNameReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropIndexNameReq.cluster_id)
}
#endif
void DropIndexNameReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexNameReq.cluster_id)
}
void DropIndexNameReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexNameReq.cluster_id)
}
::std::string* DropIndexNameReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexNameReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropIndexNameReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexNameReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropIndexNameReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexNameReq.cluster_id)
}

// string ns = 3;
void DropIndexNameReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropIndexNameReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexNameReq.ns)
  return ns_.GetNoArena();
}
void DropIndexNameReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropIndexNameReq.ns)
}
#if LANG_CXX11
void DropIndexNameReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropIndexNameReq.ns)
}
#endif
void DropIndexNameReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexNameReq.ns)
}
void DropIndexNameReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexNameReq.ns)
}
::std::string* DropIndexNameReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexNameReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropIndexNameReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexNameReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropIndexNameReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexNameReq.ns)
}

// string key = 4;
void DropIndexNameReq::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropIndexNameReq::key() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexNameReq.key)
  return key_.GetNoArena();
}
void DropIndexNameReq::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DropIndexNameReq.key)
}
#if LANG_CXX11
void DropIndexNameReq::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DropIndexNameReq.key)
}
#endif
void DropIndexNameReq::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DropIndexNameReq.key)
}
void DropIndexNameReq::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DropIndexNameReq.key)
}
::std::string* DropIndexNameReq::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexNameReq.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropIndexNameReq::release_key() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexNameReq.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropIndexNameReq::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexNameReq.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropIndexNameRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropIndexNameRsp::DropIndexNameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DropIndexNameRsp)
}
DropIndexNameRsp::DropIndexNameRsp(const DropIndexNameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DropIndexNameRsp)
}

void DropIndexNameRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DropIndexNameRsp::~DropIndexNameRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DropIndexNameRsp)
  SharedDtor();
}

void DropIndexNameRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DropIndexNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropIndexNameRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[103].descriptor;
}

const DropIndexNameRsp& DropIndexNameRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropIndexNameRsp* DropIndexNameRsp::New(::google::protobuf::Arena* arena) const {
  DropIndexNameRsp* n = new DropIndexNameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropIndexNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DropIndexNameRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DropIndexNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DropIndexNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DropIndexNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DropIndexNameRsp)
  return false;
#undef DO_
}

void DropIndexNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DropIndexNameRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DropIndexNameRsp)
}

::google::protobuf::uint8* DropIndexNameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DropIndexNameRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DropIndexNameRsp)
  return target;
}

size_t DropIndexNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DropIndexNameRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropIndexNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DropIndexNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexNameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropIndexNameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DropIndexNameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DropIndexNameRsp)
    MergeFrom(*source);
  }
}

void DropIndexNameRsp::MergeFrom(const DropIndexNameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DropIndexNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DropIndexNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DropIndexNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexNameRsp::CopyFrom(const DropIndexNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DropIndexNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexNameRsp::IsInitialized() const {
  return true;
}

void DropIndexNameRsp::Swap(DropIndexNameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropIndexNameRsp::InternalSwap(DropIndexNameRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropIndexNameRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[103];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropIndexNameRsp

// .cmongoproto.ResHeader header = 1;
bool DropIndexNameRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DropIndexNameRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DropIndexNameRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DropIndexNameRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DropIndexNameRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DropIndexNameRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DropIndexNameRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DropIndexNameRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DropIndexNameRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DropIndexNameRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateReq::kHeaderFieldNumber;
const int MigrateReq::kClusterIdFieldNumber;
const int MigrateReq::kSrcSetNameFieldNumber;
const int MigrateReq::kDstSetNameFieldNumber;
const int MigrateReq::kNsFieldNumber;
const int MigrateReq::kCreatorFieldNumber;
const int MigrateReq::kChunkListFieldNumber;
const int MigrateReq::kAutoCleanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateReq::MigrateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateReq)
}
MigrateReq::MigrateReq(const MigrateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  src_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_set_name().size() > 0) {
    src_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_set_name_);
  }
  dst_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_set_name().size() > 0) {
    dst_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_set_name_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator().size() > 0) {
    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  auto_clean_ = from.auto_clean_;
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateReq)
}

void MigrateReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&auto_clean_) -
    reinterpret_cast<char*>(&header_) + sizeof(auto_clean_));
  _cached_size_ = 0;
}

MigrateReq::~MigrateReq() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateReq)
  SharedDtor();
}

void MigrateReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MigrateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[104].descriptor;
}

const MigrateReq& MigrateReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateReq* MigrateReq::New(::google::protobuf::Arena* arena) const {
  MigrateReq* n = new MigrateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateReq)
  chunk_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  auto_clean_ = false;
}

bool MigrateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_set_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_set_name().data(), this->src_set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateReq.src_set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_set_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_set_name().data(), this->dst_set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateReq.dst_set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateReq.creator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 7;
      case 7: {
        if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_clean = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_clean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateReq)
  return false;
#undef DO_
}

void MigrateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string src_set_name = 3;
  if (this->src_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_set_name().data(), this->src_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.src_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->src_set_name(), output);
  }

  // string dst_set_name = 4;
  if (this->dst_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_set_name().data(), this->dst_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.dst_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dst_set_name(), output);
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ns(), output);
  }

  // string creator = 6;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.creator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->creator(), output);
  }

  // repeated int32 chunk_list = 7;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // bool auto_clean = 8;
  if (this->auto_clean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->auto_clean(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateReq)
}

::google::protobuf::uint8* MigrateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string src_set_name = 3;
  if (this->src_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_set_name().data(), this->src_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.src_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src_set_name(), target);
  }

  // string dst_set_name = 4;
  if (this->dst_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_set_name().data(), this->dst_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.dst_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dst_set_name(), target);
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ns(), target);
  }

  // string creator = 6;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateReq.creator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->creator(), target);
  }

  // repeated int32 chunk_list = 7;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // bool auto_clean = 8;
  if (this->auto_clean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->auto_clean(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateReq)
  return target;
}

size_t MigrateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateReq)
  size_t total_size = 0;

  // repeated int32 chunk_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string src_set_name = 3;
  if (this->src_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_set_name());
  }

  // string dst_set_name = 4;
  if (this->dst_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_set_name());
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string creator = 6;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool auto_clean = 8;
  if (this->auto_clean() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateReq)
    MergeFrom(*source);
  }
}

void MigrateReq::MergeFrom(const MigrateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.src_set_name().size() > 0) {

    src_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_set_name_);
  }
  if (from.dst_set_name().size() > 0) {

    dst_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_set_name_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.creator().size() > 0) {

    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.auto_clean() != 0) {
    set_auto_clean(from.auto_clean());
  }
}

void MigrateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateReq::CopyFrom(const MigrateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateReq::IsInitialized() const {
  return true;
}

void MigrateReq::Swap(MigrateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateReq::InternalSwap(MigrateReq* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  cluster_id_.Swap(&other->cluster_id_);
  src_set_name_.Swap(&other->src_set_name_);
  dst_set_name_.Swap(&other->dst_set_name_);
  ns_.Swap(&other->ns_);
  creator_.Swap(&other->creator_);
  std::swap(header_, other->header_);
  std::swap(auto_clean_, other->auto_clean_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[104];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateReq

// .cmongoproto.ReqHeader header = 1;
bool MigrateReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& MigrateReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* MigrateReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.header)
  return header_;
}
::cmongoproto::ReqHeader* MigrateReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.header)
}

// string cluster_id = 2;
void MigrateReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void MigrateReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.cluster_id)
}
#if LANG_CXX11
void MigrateReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateReq.cluster_id)
}
#endif
void MigrateReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateReq.cluster_id)
}
void MigrateReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateReq.cluster_id)
}
::std::string* MigrateReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.cluster_id)
}

// string src_set_name = 3;
void MigrateReq::clear_src_set_name() {
  src_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateReq::src_set_name() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.src_set_name)
  return src_set_name_.GetNoArena();
}
void MigrateReq::set_src_set_name(const ::std::string& value) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.src_set_name)
}
#if LANG_CXX11
void MigrateReq::set_src_set_name(::std::string&& value) {
  
  src_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateReq.src_set_name)
}
#endif
void MigrateReq::set_src_set_name(const char* value) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateReq.src_set_name)
}
void MigrateReq::set_src_set_name(const char* value, size_t size) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateReq.src_set_name)
}
::std::string* MigrateReq::mutable_src_set_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.src_set_name)
  return src_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateReq::release_src_set_name() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.src_set_name)
  
  return src_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateReq::set_allocated_src_set_name(::std::string* src_set_name) {
  if (src_set_name != NULL) {
    
  } else {
    
  }
  src_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_set_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.src_set_name)
}

// string dst_set_name = 4;
void MigrateReq::clear_dst_set_name() {
  dst_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateReq::dst_set_name() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.dst_set_name)
  return dst_set_name_.GetNoArena();
}
void MigrateReq::set_dst_set_name(const ::std::string& value) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.dst_set_name)
}
#if LANG_CXX11
void MigrateReq::set_dst_set_name(::std::string&& value) {
  
  dst_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateReq.dst_set_name)
}
#endif
void MigrateReq::set_dst_set_name(const char* value) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateReq.dst_set_name)
}
void MigrateReq::set_dst_set_name(const char* value, size_t size) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateReq.dst_set_name)
}
::std::string* MigrateReq::mutable_dst_set_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.dst_set_name)
  return dst_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateReq::release_dst_set_name() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.dst_set_name)
  
  return dst_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateReq::set_allocated_dst_set_name(::std::string* dst_set_name) {
  if (dst_set_name != NULL) {
    
  } else {
    
  }
  dst_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_set_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.dst_set_name)
}

// string ns = 5;
void MigrateReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.ns)
  return ns_.GetNoArena();
}
void MigrateReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.ns)
}
#if LANG_CXX11
void MigrateReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateReq.ns)
}
#endif
void MigrateReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateReq.ns)
}
void MigrateReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateReq.ns)
}
::std::string* MigrateReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.ns)
}

// string creator = 6;
void MigrateReq::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateReq::creator() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.creator)
  return creator_.GetNoArena();
}
void MigrateReq::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.creator)
}
#if LANG_CXX11
void MigrateReq::set_creator(::std::string&& value) {
  
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateReq.creator)
}
#endif
void MigrateReq::set_creator(const char* value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateReq.creator)
}
void MigrateReq::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateReq.creator)
}
::std::string* MigrateReq::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateReq.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateReq::release_creator() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateReq.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateReq::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateReq.creator)
}

// repeated int32 chunk_list = 7;
int MigrateReq::chunk_list_size() const {
  return chunk_list_.size();
}
void MigrateReq::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 MigrateReq::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.chunk_list)
  return chunk_list_.Get(index);
}
void MigrateReq::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.chunk_list)
}
void MigrateReq::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.MigrateReq.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MigrateReq::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateReq.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MigrateReq::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateReq.chunk_list)
  return &chunk_list_;
}

// bool auto_clean = 8;
void MigrateReq::clear_auto_clean() {
  auto_clean_ = false;
}
bool MigrateReq::auto_clean() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateReq.auto_clean)
  return auto_clean_;
}
void MigrateReq::set_auto_clean(bool value) {
  
  auto_clean_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateReq.auto_clean)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateRsp::kHeaderFieldNumber;
const int MigrateRsp::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateRsp::MigrateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateRsp)
}
MigrateRsp::MigrateRsp(const MigrateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateRsp)
}

void MigrateRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(task_id_));
  _cached_size_ = 0;
}

MigrateRsp::~MigrateRsp() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateRsp)
  SharedDtor();
}

void MigrateRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MigrateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[105].descriptor;
}

const MigrateRsp& MigrateRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateRsp* MigrateRsp::New(::google::protobuf::Arena* arena) const {
  MigrateRsp* n = new MigrateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
}

bool MigrateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 task_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateRsp)
  return false;
#undef DO_
}

void MigrateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->task_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateRsp)
}

::google::protobuf::uint8* MigrateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->task_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateRsp)
  return target;
}

size_t MigrateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateRsp)
    MergeFrom(*source);
  }
}

void MigrateRsp::MergeFrom(const MigrateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void MigrateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateRsp::CopyFrom(const MigrateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateRsp::IsInitialized() const {
  return true;
}

void MigrateRsp::Swap(MigrateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateRsp::InternalSwap(MigrateRsp* other) {
  std::swap(header_, other->header_);
  std::swap(task_id_, other->task_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[105];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateRsp

// .cmongoproto.ResHeader header = 1;
bool MigrateRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MigrateRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& MigrateRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* MigrateRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateRsp.header)
  return header_;
}
::cmongoproto::ResHeader* MigrateRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MigrateRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateRsp.header)
}

// uint64 task_id = 2;
void MigrateRsp::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MigrateRsp::task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateRsp.task_id)
  return task_id_;
}
void MigrateRsp::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateRsp.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanMigrateReq::kHeaderFieldNumber;
const int CleanMigrateReq::kClusterIdFieldNumber;
const int CleanMigrateReq::kTaskIdFieldNumber;
const int CleanMigrateReq::kSubTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanMigrateReq::CleanMigrateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CleanMigrateReq)
}
CleanMigrateReq::CleanMigrateReq(const CleanMigrateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  sub_task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sub_task_id().size() > 0) {
    sub_task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_task_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.CleanMigrateReq)
}

void CleanMigrateReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(task_id_));
  _cached_size_ = 0;
}

CleanMigrateReq::~CleanMigrateReq() {
  // @@protoc_insertion_point(destructor:masterproto.CleanMigrateReq)
  SharedDtor();
}

void CleanMigrateReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CleanMigrateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanMigrateReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[106].descriptor;
}

const CleanMigrateReq& CleanMigrateReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanMigrateReq* CleanMigrateReq::New(::google::protobuf::Arena* arena) const {
  CleanMigrateReq* n = new CleanMigrateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanMigrateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CleanMigrateReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
}

bool CleanMigrateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CleanMigrateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CleanMigrateReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 task_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_task_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_task_id().data(), this->sub_task_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.CleanMigrateReq.sub_task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CleanMigrateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CleanMigrateReq)
  return false;
#undef DO_
}

void CleanMigrateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CleanMigrateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CleanMigrateReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->task_id(), output);
  }

  // string sub_task_id = 4;
  if (this->sub_task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_task_id().data(), this->sub_task_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CleanMigrateReq.sub_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sub_task_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CleanMigrateReq)
}

::google::protobuf::uint8* CleanMigrateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CleanMigrateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CleanMigrateReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->task_id(), target);
  }

  // string sub_task_id = 4;
  if (this->sub_task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_task_id().data(), this->sub_task_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.CleanMigrateReq.sub_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sub_task_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CleanMigrateReq)
  return target;
}

size_t CleanMigrateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CleanMigrateReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string sub_task_id = 4;
  if (this->sub_task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_task_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanMigrateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CleanMigrateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanMigrateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanMigrateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CleanMigrateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CleanMigrateReq)
    MergeFrom(*source);
  }
}

void CleanMigrateReq::MergeFrom(const CleanMigrateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CleanMigrateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.sub_task_id().size() > 0) {

    sub_task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_task_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void CleanMigrateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CleanMigrateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanMigrateReq::CopyFrom(const CleanMigrateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CleanMigrateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanMigrateReq::IsInitialized() const {
  return true;
}

void CleanMigrateReq::Swap(CleanMigrateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanMigrateReq::InternalSwap(CleanMigrateReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  sub_task_id_.Swap(&other->sub_task_id_);
  std::swap(header_, other->header_);
  std::swap(task_id_, other->task_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanMigrateReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[106];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanMigrateReq

// .cmongoproto.ReqHeader header = 1;
bool CleanMigrateReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CleanMigrateReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& CleanMigrateReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CleanMigrateReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* CleanMigrateReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CleanMigrateReq.header)
  return header_;
}
::cmongoproto::ReqHeader* CleanMigrateReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CleanMigrateReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CleanMigrateReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CleanMigrateReq.header)
}

// string cluster_id = 2;
void CleanMigrateReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CleanMigrateReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CleanMigrateReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void CleanMigrateReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CleanMigrateReq.cluster_id)
}
#if LANG_CXX11
void CleanMigrateReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CleanMigrateReq.cluster_id)
}
#endif
void CleanMigrateReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CleanMigrateReq.cluster_id)
}
void CleanMigrateReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CleanMigrateReq.cluster_id)
}
::std::string* CleanMigrateReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CleanMigrateReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CleanMigrateReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.CleanMigrateReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CleanMigrateReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CleanMigrateReq.cluster_id)
}

// uint64 task_id = 3;
void CleanMigrateReq::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CleanMigrateReq::task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CleanMigrateReq.task_id)
  return task_id_;
}
void CleanMigrateReq::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.CleanMigrateReq.task_id)
}

// string sub_task_id = 4;
void CleanMigrateReq::clear_sub_task_id() {
  sub_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CleanMigrateReq::sub_task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.CleanMigrateReq.sub_task_id)
  return sub_task_id_.GetNoArena();
}
void CleanMigrateReq::set_sub_task_id(const ::std::string& value) {
  
  sub_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.CleanMigrateReq.sub_task_id)
}
#if LANG_CXX11
void CleanMigrateReq::set_sub_task_id(::std::string&& value) {
  
  sub_task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.CleanMigrateReq.sub_task_id)
}
#endif
void CleanMigrateReq::set_sub_task_id(const char* value) {
  
  sub_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.CleanMigrateReq.sub_task_id)
}
void CleanMigrateReq::set_sub_task_id(const char* value, size_t size) {
  
  sub_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.CleanMigrateReq.sub_task_id)
}
::std::string* CleanMigrateReq::mutable_sub_task_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.CleanMigrateReq.sub_task_id)
  return sub_task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CleanMigrateReq::release_sub_task_id() {
  // @@protoc_insertion_point(field_release:masterproto.CleanMigrateReq.sub_task_id)
  
  return sub_task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CleanMigrateReq::set_allocated_sub_task_id(::std::string* sub_task_id) {
  if (sub_task_id != NULL) {
    
  } else {
    
  }
  sub_task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_task_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.CleanMigrateReq.sub_task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanMigrateRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanMigrateRsp::CleanMigrateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.CleanMigrateRsp)
}
CleanMigrateRsp::CleanMigrateRsp(const CleanMigrateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.CleanMigrateRsp)
}

void CleanMigrateRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CleanMigrateRsp::~CleanMigrateRsp() {
  // @@protoc_insertion_point(destructor:masterproto.CleanMigrateRsp)
  SharedDtor();
}

void CleanMigrateRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void CleanMigrateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanMigrateRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[107].descriptor;
}

const CleanMigrateRsp& CleanMigrateRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanMigrateRsp* CleanMigrateRsp::New(::google::protobuf::Arena* arena) const {
  CleanMigrateRsp* n = new CleanMigrateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanMigrateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.CleanMigrateRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool CleanMigrateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.CleanMigrateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.CleanMigrateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.CleanMigrateRsp)
  return false;
#undef DO_
}

void CleanMigrateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.CleanMigrateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.CleanMigrateRsp)
}

::google::protobuf::uint8* CleanMigrateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.CleanMigrateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.CleanMigrateRsp)
  return target;
}

size_t CleanMigrateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.CleanMigrateRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanMigrateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.CleanMigrateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanMigrateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanMigrateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.CleanMigrateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.CleanMigrateRsp)
    MergeFrom(*source);
  }
}

void CleanMigrateRsp::MergeFrom(const CleanMigrateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.CleanMigrateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void CleanMigrateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.CleanMigrateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanMigrateRsp::CopyFrom(const CleanMigrateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.CleanMigrateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanMigrateRsp::IsInitialized() const {
  return true;
}

void CleanMigrateRsp::Swap(CleanMigrateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanMigrateRsp::InternalSwap(CleanMigrateRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanMigrateRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[107];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanMigrateRsp

// .cmongoproto.ResHeader header = 1;
bool CleanMigrateRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CleanMigrateRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& CleanMigrateRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.CleanMigrateRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* CleanMigrateRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.CleanMigrateRsp.header)
  return header_;
}
::cmongoproto::ResHeader* CleanMigrateRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.CleanMigrateRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CleanMigrateRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.CleanMigrateRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMigrateStatusReq::kHeaderFieldNumber;
const int GetMigrateStatusReq::kClusterIdFieldNumber;
const int GetMigrateStatusReq::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMigrateStatusReq::GetMigrateStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetMigrateStatusReq)
}
GetMigrateStatusReq::GetMigrateStatusReq(const GetMigrateStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetMigrateStatusReq)
}

void GetMigrateStatusReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(task_id_));
  _cached_size_ = 0;
}

GetMigrateStatusReq::~GetMigrateStatusReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetMigrateStatusReq)
  SharedDtor();
}

void GetMigrateStatusReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetMigrateStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMigrateStatusReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[108].descriptor;
}

const GetMigrateStatusReq& GetMigrateStatusReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMigrateStatusReq* GetMigrateStatusReq::New(::google::protobuf::Arena* arena) const {
  GetMigrateStatusReq* n = new GetMigrateStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMigrateStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetMigrateStatusReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
}

bool GetMigrateStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetMigrateStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetMigrateStatusReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 task_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetMigrateStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetMigrateStatusReq)
  return false;
#undef DO_
}

void GetMigrateStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetMigrateStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetMigrateStatusReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->task_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetMigrateStatusReq)
}

::google::protobuf::uint8* GetMigrateStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetMigrateStatusReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetMigrateStatusReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->task_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetMigrateStatusReq)
  return target;
}

size_t GetMigrateStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetMigrateStatusReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 task_id = 3;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMigrateStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetMigrateStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMigrateStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMigrateStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetMigrateStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetMigrateStatusReq)
    MergeFrom(*source);
  }
}

void GetMigrateStatusReq::MergeFrom(const GetMigrateStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetMigrateStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void GetMigrateStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetMigrateStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMigrateStatusReq::CopyFrom(const GetMigrateStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetMigrateStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMigrateStatusReq::IsInitialized() const {
  return true;
}

void GetMigrateStatusReq::Swap(GetMigrateStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMigrateStatusReq::InternalSwap(GetMigrateStatusReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(task_id_, other->task_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMigrateStatusReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[108];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMigrateStatusReq

// .cmongoproto.ReqHeader header = 1;
bool GetMigrateStatusReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMigrateStatusReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetMigrateStatusReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetMigrateStatusReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetMigrateStatusReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetMigrateStatusReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetMigrateStatusReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetMigrateStatusReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMigrateStatusReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetMigrateStatusReq.header)
}

// string cluster_id = 2;
void GetMigrateStatusReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetMigrateStatusReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetMigrateStatusReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetMigrateStatusReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetMigrateStatusReq.cluster_id)
}
#if LANG_CXX11
void GetMigrateStatusReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetMigrateStatusReq.cluster_id)
}
#endif
void GetMigrateStatusReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetMigrateStatusReq.cluster_id)
}
void GetMigrateStatusReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetMigrateStatusReq.cluster_id)
}
::std::string* GetMigrateStatusReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetMigrateStatusReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetMigrateStatusReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetMigrateStatusReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetMigrateStatusReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetMigrateStatusReq.cluster_id)
}

// uint64 task_id = 3;
void GetMigrateStatusReq::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetMigrateStatusReq::task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetMigrateStatusReq.task_id)
  return task_id_;
}
void GetMigrateStatusReq::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetMigrateStatusReq.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateStatus::kSrcIpFieldNumber;
const int MigrateStatus::kSrcSetNameFieldNumber;
const int MigrateStatus::kDstSetNameFieldNumber;
const int MigrateStatus::kChunkListFieldNumber;
const int MigrateStatus::kCTimeFieldNumber;
const int MigrateStatus::kFTimeFieldNumber;
const int MigrateStatus::kNsFieldNumber;
const int MigrateStatus::kStageFieldNumber;
const int MigrateStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateStatus::MigrateStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateStatus)
}
MigrateStatus::MigrateStatus(const MigrateStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_ip().size() > 0) {
    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  src_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_set_name().size() > 0) {
    src_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_set_name_);
  }
  dst_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_set_name().size() > 0) {
    dst_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_set_name_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stage().size() > 0) {
    stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&c_time_, &from.c_time_,
    reinterpret_cast<char*>(&f_time_) -
    reinterpret_cast<char*>(&c_time_) + sizeof(f_time_));
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateStatus)
}

void MigrateStatus::SharedCtor() {
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&c_time_, 0, reinterpret_cast<char*>(&f_time_) -
    reinterpret_cast<char*>(&c_time_) + sizeof(f_time_));
  _cached_size_ = 0;
}

MigrateStatus::~MigrateStatus() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateStatus)
  SharedDtor();
}

void MigrateStatus::SharedDtor() {
  src_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MigrateStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateStatus::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[109].descriptor;
}

const MigrateStatus& MigrateStatus::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateStatus* MigrateStatus::New(::google::protobuf::Arena* arena) const {
  MigrateStatus* n = new MigrateStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateStatus)
  chunk_list_.Clear();
  src_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&c_time_, 0, reinterpret_cast<char*>(&f_time_) -
    reinterpret_cast<char*>(&c_time_) + sizeof(f_time_));
}

bool MigrateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string src_ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_ip().data(), this->src_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.src_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_set_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_set_name().data(), this->src_set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.src_set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_set_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_set_name().data(), this->dst_set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.dst_set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 c_time = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 f_time = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stage = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stage().data(), this->stage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.stage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateStatus.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateStatus)
  return false;
#undef DO_
}

void MigrateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateStatus)
  // string src_ip = 1;
  if (this->src_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_ip().data(), this->src_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.src_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_ip(), output);
  }

  // string src_set_name = 2;
  if (this->src_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_set_name().data(), this->src_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.src_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src_set_name(), output);
  }

  // string dst_set_name = 3;
  if (this->dst_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_set_name().data(), this->dst_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.dst_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dst_set_name(), output);
  }

  // repeated int32 chunk_list = 4;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // uint32 c_time = 5;
  if (this->c_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->c_time(), output);
  }

  // uint32 f_time = 6;
  if (this->f_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->f_time(), output);
  }

  // string ns = 7;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ns(), output);
  }

  // string stage = 8;
  if (this->stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->stage(), output);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateStatus)
}

::google::protobuf::uint8* MigrateStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateStatus)
  // string src_ip = 1;
  if (this->src_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_ip().data(), this->src_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.src_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_ip(), target);
  }

  // string src_set_name = 2;
  if (this->src_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_set_name().data(), this->src_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.src_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_set_name(), target);
  }

  // string dst_set_name = 3;
  if (this->dst_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_set_name().data(), this->dst_set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.dst_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dst_set_name(), target);
  }

  // repeated int32 chunk_list = 4;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // uint32 c_time = 5;
  if (this->c_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->c_time(), target);
  }

  // uint32 f_time = 6;
  if (this->f_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->f_time(), target);
  }

  // string ns = 7;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ns(), target);
  }

  // string stage = 8;
  if (this->stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->stage(), target);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateStatus.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateStatus)
  return target;
}

size_t MigrateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateStatus)
  size_t total_size = 0;

  // repeated int32 chunk_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string src_ip = 1;
  if (this->src_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());
  }

  // string src_set_name = 2;
  if (this->src_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_set_name());
  }

  // string dst_set_name = 3;
  if (this->dst_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_set_name());
  }

  // string ns = 7;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string stage = 8;
  if (this->stage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stage());
  }

  // string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // uint32 c_time = 5;
  if (this->c_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c_time());
  }

  // uint32 f_time = 6;
  if (this->f_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->f_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateStatus)
    MergeFrom(*source);
  }
}

void MigrateStatus::MergeFrom(const MigrateStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.src_ip().size() > 0) {

    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  if (from.src_set_name().size() > 0) {

    src_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_set_name_);
  }
  if (from.dst_set_name().size() > 0) {

    dst_set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_set_name_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.stage().size() > 0) {

    stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.c_time() != 0) {
    set_c_time(from.c_time());
  }
  if (from.f_time() != 0) {
    set_f_time(from.f_time());
  }
}

void MigrateStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateStatus::CopyFrom(const MigrateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateStatus::IsInitialized() const {
  return true;
}

void MigrateStatus::Swap(MigrateStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateStatus::InternalSwap(MigrateStatus* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  src_ip_.Swap(&other->src_ip_);
  src_set_name_.Swap(&other->src_set_name_);
  dst_set_name_.Swap(&other->dst_set_name_);
  ns_.Swap(&other->ns_);
  stage_.Swap(&other->stage_);
  status_.Swap(&other->status_);
  std::swap(c_time_, other->c_time_);
  std::swap(f_time_, other->f_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateStatus::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[109];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateStatus

// string src_ip = 1;
void MigrateStatus::clear_src_ip() {
  src_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::src_ip() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.src_ip)
  return src_ip_.GetNoArena();
}
void MigrateStatus::set_src_ip(const ::std::string& value) {
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.src_ip)
}
#if LANG_CXX11
void MigrateStatus::set_src_ip(::std::string&& value) {
  
  src_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.src_ip)
}
#endif
void MigrateStatus::set_src_ip(const char* value) {
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.src_ip)
}
void MigrateStatus::set_src_ip(const char* value, size_t size) {
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.src_ip)
}
::std::string* MigrateStatus::mutable_src_ip() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.src_ip)
  return src_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_src_ip() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.src_ip)
  
  return src_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_src_ip(::std::string* src_ip) {
  if (src_ip != NULL) {
    
  } else {
    
  }
  src_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_ip);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.src_ip)
}

// string src_set_name = 2;
void MigrateStatus::clear_src_set_name() {
  src_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::src_set_name() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.src_set_name)
  return src_set_name_.GetNoArena();
}
void MigrateStatus::set_src_set_name(const ::std::string& value) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.src_set_name)
}
#if LANG_CXX11
void MigrateStatus::set_src_set_name(::std::string&& value) {
  
  src_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.src_set_name)
}
#endif
void MigrateStatus::set_src_set_name(const char* value) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.src_set_name)
}
void MigrateStatus::set_src_set_name(const char* value, size_t size) {
  
  src_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.src_set_name)
}
::std::string* MigrateStatus::mutable_src_set_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.src_set_name)
  return src_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_src_set_name() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.src_set_name)
  
  return src_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_src_set_name(::std::string* src_set_name) {
  if (src_set_name != NULL) {
    
  } else {
    
  }
  src_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_set_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.src_set_name)
}

// string dst_set_name = 3;
void MigrateStatus::clear_dst_set_name() {
  dst_set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::dst_set_name() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.dst_set_name)
  return dst_set_name_.GetNoArena();
}
void MigrateStatus::set_dst_set_name(const ::std::string& value) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.dst_set_name)
}
#if LANG_CXX11
void MigrateStatus::set_dst_set_name(::std::string&& value) {
  
  dst_set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.dst_set_name)
}
#endif
void MigrateStatus::set_dst_set_name(const char* value) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.dst_set_name)
}
void MigrateStatus::set_dst_set_name(const char* value, size_t size) {
  
  dst_set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.dst_set_name)
}
::std::string* MigrateStatus::mutable_dst_set_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.dst_set_name)
  return dst_set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_dst_set_name() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.dst_set_name)
  
  return dst_set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_dst_set_name(::std::string* dst_set_name) {
  if (dst_set_name != NULL) {
    
  } else {
    
  }
  dst_set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_set_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.dst_set_name)
}

// repeated int32 chunk_list = 4;
int MigrateStatus::chunk_list_size() const {
  return chunk_list_.size();
}
void MigrateStatus::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 MigrateStatus::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.chunk_list)
  return chunk_list_.Get(index);
}
void MigrateStatus::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.chunk_list)
}
void MigrateStatus::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.MigrateStatus.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MigrateStatus::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateStatus.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MigrateStatus::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateStatus.chunk_list)
  return &chunk_list_;
}

// uint32 c_time = 5;
void MigrateStatus::clear_c_time() {
  c_time_ = 0u;
}
::google::protobuf::uint32 MigrateStatus::c_time() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.c_time)
  return c_time_;
}
void MigrateStatus::set_c_time(::google::protobuf::uint32 value) {
  
  c_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.c_time)
}

// uint32 f_time = 6;
void MigrateStatus::clear_f_time() {
  f_time_ = 0u;
}
::google::protobuf::uint32 MigrateStatus::f_time() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.f_time)
  return f_time_;
}
void MigrateStatus::set_f_time(::google::protobuf::uint32 value) {
  
  f_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.f_time)
}

// string ns = 7;
void MigrateStatus::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.ns)
  return ns_.GetNoArena();
}
void MigrateStatus::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.ns)
}
#if LANG_CXX11
void MigrateStatus::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.ns)
}
#endif
void MigrateStatus::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.ns)
}
void MigrateStatus::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.ns)
}
::std::string* MigrateStatus::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.ns)
}

// string stage = 8;
void MigrateStatus::clear_stage() {
  stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::stage() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.stage)
  return stage_.GetNoArena();
}
void MigrateStatus::set_stage(const ::std::string& value) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.stage)
}
#if LANG_CXX11
void MigrateStatus::set_stage(::std::string&& value) {
  
  stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.stage)
}
#endif
void MigrateStatus::set_stage(const char* value) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.stage)
}
void MigrateStatus::set_stage(const char* value, size_t size) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.stage)
}
::std::string* MigrateStatus::mutable_stage() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.stage)
  return stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_stage() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.stage)
  
  return stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_stage(::std::string* stage) {
  if (stage != NULL) {
    
  } else {
    
  }
  stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stage);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.stage)
}

// string status = 9;
void MigrateStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateStatus::status() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateStatus.status)
  return status_.GetNoArena();
}
void MigrateStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateStatus.status)
}
#if LANG_CXX11
void MigrateStatus::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateStatus.status)
}
#endif
void MigrateStatus::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateStatus.status)
}
void MigrateStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateStatus.status)
}
::std::string* MigrateStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateStatus::release_status() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateGroup::kTaskIdFieldNumber;
const int MigrateGroup::kSubTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateGroup::MigrateGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateGroup)
}
MigrateGroup::MigrateGroup(const MigrateGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sub_task_id_(from.sub_task_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateGroup)
}

void MigrateGroup::SharedCtor() {
  task_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MigrateGroup::~MigrateGroup() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateGroup)
  SharedDtor();
}

void MigrateGroup::SharedDtor() {
}

void MigrateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateGroup::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[110].descriptor;
}

const MigrateGroup& MigrateGroup::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateGroup* MigrateGroup::New(::google::protobuf::Arena* arena) const {
  MigrateGroup* n = new MigrateGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateGroup)
  sub_task_id_.Clear();
  task_id_ = GOOGLE_ULONGLONG(0);
}

bool MigrateGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sub_task_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sub_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_task_id(this->sub_task_id_size() - 1).data(),
            this->sub_task_id(this->sub_task_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateGroup.sub_task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateGroup)
  return false;
#undef DO_
}

void MigrateGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateGroup)
  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // repeated string sub_task_id = 2;
  for (int i = 0; i < this->sub_task_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_task_id(i).data(), this->sub_task_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateGroup.sub_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sub_task_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateGroup)
}

::google::protobuf::uint8* MigrateGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateGroup)
  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // repeated string sub_task_id = 2;
  for (int i = 0; i < this->sub_task_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_task_id(i).data(), this->sub_task_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateGroup.sub_task_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sub_task_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateGroup)
  return target;
}

size_t MigrateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateGroup)
  size_t total_size = 0;

  // repeated string sub_task_id = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sub_task_id_size());
  for (int i = 0; i < this->sub_task_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sub_task_id(i));
  }

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateGroup)
    MergeFrom(*source);
  }
}

void MigrateGroup::MergeFrom(const MigrateGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sub_task_id_.MergeFrom(from.sub_task_id_);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void MigrateGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateGroup::CopyFrom(const MigrateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateGroup::IsInitialized() const {
  return true;
}

void MigrateGroup::Swap(MigrateGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateGroup::InternalSwap(MigrateGroup* other) {
  sub_task_id_.UnsafeArenaSwap(&other->sub_task_id_);
  std::swap(task_id_, other->task_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateGroup::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[110];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateGroup

// uint64 task_id = 1;
void MigrateGroup::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MigrateGroup::task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateGroup.task_id)
  return task_id_;
}
void MigrateGroup::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateGroup.task_id)
}

// repeated string sub_task_id = 2;
int MigrateGroup::sub_task_id_size() const {
  return sub_task_id_.size();
}
void MigrateGroup::clear_sub_task_id() {
  sub_task_id_.Clear();
}
const ::std::string& MigrateGroup::sub_task_id(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateGroup.sub_task_id)
  return sub_task_id_.Get(index);
}
::std::string* MigrateGroup::mutable_sub_task_id(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateGroup.sub_task_id)
  return sub_task_id_.Mutable(index);
}
void MigrateGroup::set_sub_task_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.MigrateGroup.sub_task_id)
  sub_task_id_.Mutable(index)->assign(value);
}
void MigrateGroup::set_sub_task_id(int index, const char* value) {
  sub_task_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateGroup.sub_task_id)
}
void MigrateGroup::set_sub_task_id(int index, const char* value, size_t size) {
  sub_task_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateGroup.sub_task_id)
}
::std::string* MigrateGroup::add_sub_task_id() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.MigrateGroup.sub_task_id)
  return sub_task_id_.Add();
}
void MigrateGroup::add_sub_task_id(const ::std::string& value) {
  sub_task_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.MigrateGroup.sub_task_id)
}
void MigrateGroup::add_sub_task_id(const char* value) {
  sub_task_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.MigrateGroup.sub_task_id)
}
void MigrateGroup::add_sub_task_id(const char* value, size_t size) {
  sub_task_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.MigrateGroup.sub_task_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MigrateGroup::sub_task_id() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateGroup.sub_task_id)
  return sub_task_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MigrateGroup::mutable_sub_task_id() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateGroup.sub_task_id)
  return &sub_task_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMigrateStatusRsp::kHeaderFieldNumber;
const int GetMigrateStatusRsp::kMigrateStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMigrateStatusRsp::GetMigrateStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetMigrateStatusRsp)
}
GetMigrateStatusRsp::GetMigrateStatusRsp(const GetMigrateStatusRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      migrate_status_(from.migrate_status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetMigrateStatusRsp)
}

void GetMigrateStatusRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetMigrateStatusRsp::~GetMigrateStatusRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetMigrateStatusRsp)
  SharedDtor();
}

void GetMigrateStatusRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetMigrateStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMigrateStatusRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[111].descriptor;
}

const GetMigrateStatusRsp& GetMigrateStatusRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMigrateStatusRsp* GetMigrateStatusRsp::New(::google::protobuf::Arena* arena) const {
  GetMigrateStatusRsp* n = new GetMigrateStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMigrateStatusRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetMigrateStatusRsp)
  migrate_status_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetMigrateStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetMigrateStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.MigrateStatus migrate_status = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_migrate_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetMigrateStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetMigrateStatusRsp)
  return false;
#undef DO_
}

void GetMigrateStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetMigrateStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.MigrateStatus migrate_status = 2;
  for (unsigned int i = 0, n = this->migrate_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->migrate_status(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetMigrateStatusRsp)
}

::google::protobuf::uint8* GetMigrateStatusRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetMigrateStatusRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.MigrateStatus migrate_status = 2;
  for (unsigned int i = 0, n = this->migrate_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->migrate_status(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetMigrateStatusRsp)
  return target;
}

size_t GetMigrateStatusRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetMigrateStatusRsp)
  size_t total_size = 0;

  // repeated .masterproto.MigrateStatus migrate_status = 2;
  {
    unsigned int count = this->migrate_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrate_status(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMigrateStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetMigrateStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMigrateStatusRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMigrateStatusRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetMigrateStatusRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetMigrateStatusRsp)
    MergeFrom(*source);
  }
}

void GetMigrateStatusRsp::MergeFrom(const GetMigrateStatusRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetMigrateStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  migrate_status_.MergeFrom(from.migrate_status_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GetMigrateStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetMigrateStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMigrateStatusRsp::CopyFrom(const GetMigrateStatusRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetMigrateStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMigrateStatusRsp::IsInitialized() const {
  return true;
}

void GetMigrateStatusRsp::Swap(GetMigrateStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMigrateStatusRsp::InternalSwap(GetMigrateStatusRsp* other) {
  migrate_status_.UnsafeArenaSwap(&other->migrate_status_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMigrateStatusRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[111];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMigrateStatusRsp

// .cmongoproto.ResHeader header = 1;
bool GetMigrateStatusRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMigrateStatusRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetMigrateStatusRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetMigrateStatusRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetMigrateStatusRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetMigrateStatusRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetMigrateStatusRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetMigrateStatusRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMigrateStatusRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetMigrateStatusRsp.header)
}

// repeated .masterproto.MigrateStatus migrate_status = 2;
int GetMigrateStatusRsp::migrate_status_size() const {
  return migrate_status_.size();
}
void GetMigrateStatusRsp::clear_migrate_status() {
  migrate_status_.Clear();
}
const ::masterproto::MigrateStatus& GetMigrateStatusRsp::migrate_status(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GetMigrateStatusRsp.migrate_status)
  return migrate_status_.Get(index);
}
::masterproto::MigrateStatus* GetMigrateStatusRsp::mutable_migrate_status(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GetMigrateStatusRsp.migrate_status)
  return migrate_status_.Mutable(index);
}
::masterproto::MigrateStatus* GetMigrateStatusRsp::add_migrate_status() {
  // @@protoc_insertion_point(field_add:masterproto.GetMigrateStatusRsp.migrate_status)
  return migrate_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::MigrateStatus >*
GetMigrateStatusRsp::mutable_migrate_status() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GetMigrateStatusRsp.migrate_status)
  return &migrate_status_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::MigrateStatus >&
GetMigrateStatusRsp::migrate_status() const {
  // @@protoc_insertion_point(field_list:masterproto.GetMigrateStatusRsp.migrate_status)
  return migrate_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateJob::kIdFieldNumber;
const int MigrateJob::kStageFieldNumber;
const int MigrateJob::kStatusFieldNumber;
const int MigrateJob::kErrFieldNumber;
const int MigrateJob::kReadCtFieldNumber;
const int MigrateJob::kSendCtFieldNumber;
const int MigrateJob::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateJob::MigrateJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateJob)
}
MigrateJob::MigrateJob(const MigrateJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stage().size() > 0) {
    stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  ::memcpy(&read_ct_, &from.read_ct_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&read_ct_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateJob)
}

void MigrateJob::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_ct_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&read_ct_) + sizeof(version_));
  _cached_size_ = 0;
}

MigrateJob::~MigrateJob() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateJob)
  SharedDtor();
}

void MigrateJob::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MigrateJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateJob::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[112].descriptor;
}

const MigrateJob& MigrateJob::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateJob* MigrateJob::New(::google::protobuf::Arena* arena) const {
  MigrateJob* n = new MigrateJob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateJob::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateJob)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_ct_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&read_ct_) + sizeof(version_));
}

bool MigrateJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateJob.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stage().data(), this->stage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateJob.stage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateJob.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateJob.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_ct = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 send_ct = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateJob)
  return false;
#undef DO_
}

void MigrateJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateJob)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string stage = 2;
  if (this->stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stage(), output);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // string err = 4;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->err(), output);
  }

  // uint64 read_ct = 5;
  if (this->read_ct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->read_ct(), output);
  }

  // uint64 send_ct = 6;
  if (this->send_ct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->send_ct(), output);
  }

  // uint32 version = 7;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateJob)
}

::google::protobuf::uint8* MigrateJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateJob)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string stage = 2;
  if (this->stage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stage(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // string err = 4;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateJob.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  // uint64 read_ct = 5;
  if (this->read_ct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->read_ct(), target);
  }

  // uint64 send_ct = 6;
  if (this->send_ct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->send_ct(), target);
  }

  // uint32 version = 7;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateJob)
  return target;
}

size_t MigrateJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateJob)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string stage = 2;
  if (this->stage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stage());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string err = 4;
  if (this->err().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  // uint64 read_ct = 5;
  if (this->read_ct() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_ct());
  }

  // uint64 send_ct = 6;
  if (this->send_ct() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_ct());
  }

  // uint32 version = 7;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateJob)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateJob)
    MergeFrom(*source);
  }
}

void MigrateJob::MergeFrom(const MigrateJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.stage().size() > 0) {

    stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.read_ct() != 0) {
    set_read_ct(from.read_ct());
  }
  if (from.send_ct() != 0) {
    set_send_ct(from.send_ct());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void MigrateJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateJob::CopyFrom(const MigrateJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateJob::IsInitialized() const {
  return true;
}

void MigrateJob::Swap(MigrateJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateJob::InternalSwap(MigrateJob* other) {
  id_.Swap(&other->id_);
  stage_.Swap(&other->stage_);
  status_.Swap(&other->status_);
  err_.Swap(&other->err_);
  std::swap(read_ct_, other->read_ct_);
  std::swap(send_ct_, other->send_ct_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateJob::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[112];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateJob

// string id = 1;
void MigrateJob::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateJob::id() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.id)
  return id_.GetNoArena();
}
void MigrateJob::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.id)
}
#if LANG_CXX11
void MigrateJob::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateJob.id)
}
#endif
void MigrateJob::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateJob.id)
}
void MigrateJob::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateJob.id)
}
::std::string* MigrateJob::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateJob.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateJob::release_id() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateJob.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateJob::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateJob.id)
}

// string stage = 2;
void MigrateJob::clear_stage() {
  stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateJob::stage() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.stage)
  return stage_.GetNoArena();
}
void MigrateJob::set_stage(const ::std::string& value) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.stage)
}
#if LANG_CXX11
void MigrateJob::set_stage(::std::string&& value) {
  
  stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateJob.stage)
}
#endif
void MigrateJob::set_stage(const char* value) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateJob.stage)
}
void MigrateJob::set_stage(const char* value, size_t size) {
  
  stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateJob.stage)
}
::std::string* MigrateJob::mutable_stage() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateJob.stage)
  return stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateJob::release_stage() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateJob.stage)
  
  return stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateJob::set_allocated_stage(::std::string* stage) {
  if (stage != NULL) {
    
  } else {
    
  }
  stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stage);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateJob.stage)
}

// string status = 3;
void MigrateJob::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateJob::status() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.status)
  return status_.GetNoArena();
}
void MigrateJob::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.status)
}
#if LANG_CXX11
void MigrateJob::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateJob.status)
}
#endif
void MigrateJob::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateJob.status)
}
void MigrateJob::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateJob.status)
}
::std::string* MigrateJob::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateJob.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateJob::release_status() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateJob.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateJob::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateJob.status)
}

// string err = 4;
void MigrateJob::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateJob::err() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.err)
  return err_.GetNoArena();
}
void MigrateJob::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.err)
}
#if LANG_CXX11
void MigrateJob::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateJob.err)
}
#endif
void MigrateJob::set_err(const char* value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateJob.err)
}
void MigrateJob::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateJob.err)
}
::std::string* MigrateJob::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateJob.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateJob::release_err() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateJob.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateJob::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateJob.err)
}

// uint64 read_ct = 5;
void MigrateJob::clear_read_ct() {
  read_ct_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MigrateJob::read_ct() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.read_ct)
  return read_ct_;
}
void MigrateJob::set_read_ct(::google::protobuf::uint64 value) {
  
  read_ct_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.read_ct)
}

// uint64 send_ct = 6;
void MigrateJob::clear_send_ct() {
  send_ct_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MigrateJob::send_ct() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.send_ct)
  return send_ct_;
}
void MigrateJob::set_send_ct(::google::protobuf::uint64 value) {
  
  send_ct_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.send_ct)
}

// uint32 version = 7;
void MigrateJob::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 MigrateJob::version() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateJob.version)
  return version_;
}
void MigrateJob::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateJob.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportMigrateInfoReq::kHeaderFieldNumber;
const int ReportMigrateInfoReq::kSessionIdFieldNumber;
const int ReportMigrateInfoReq::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportMigrateInfoReq::ReportMigrateInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ReportMigrateInfoReq)
}
ReportMigrateInfoReq::ReportMigrateInfoReq(const ReportMigrateInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_job()) {
    job_ = new ::masterproto::MigrateJob(*from.job_);
  } else {
    job_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ReportMigrateInfoReq)
}

void ReportMigrateInfoReq::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&header_) + sizeof(job_));
  _cached_size_ = 0;
}

ReportMigrateInfoReq::~ReportMigrateInfoReq() {
  // @@protoc_insertion_point(destructor:masterproto.ReportMigrateInfoReq)
  SharedDtor();
}

void ReportMigrateInfoReq::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete job_;
  }
}

void ReportMigrateInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportMigrateInfoReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[113].descriptor;
}

const ReportMigrateInfoReq& ReportMigrateInfoReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportMigrateInfoReq* ReportMigrateInfoReq::New(::google::protobuf::Arena* arena) const {
  ReportMigrateInfoReq* n = new ReportMigrateInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportMigrateInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ReportMigrateInfoReq)
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}

bool ReportMigrateInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ReportMigrateInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ReportMigrateInfoReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.MigrateJob job = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ReportMigrateInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ReportMigrateInfoReq)
  return false;
#undef DO_
}

void ReportMigrateInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ReportMigrateInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ReportMigrateInfoReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // .masterproto.MigrateJob job = 3;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->job_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ReportMigrateInfoReq)
}

::google::protobuf::uint8* ReportMigrateInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ReportMigrateInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ReportMigrateInfoReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // .masterproto.MigrateJob job = 3;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->job_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ReportMigrateInfoReq)
  return target;
}

size_t ReportMigrateInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ReportMigrateInfoReq)
  size_t total_size = 0;

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.MigrateJob job = 3;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportMigrateInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ReportMigrateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportMigrateInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportMigrateInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ReportMigrateInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ReportMigrateInfoReq)
    MergeFrom(*source);
  }
}

void ReportMigrateInfoReq::MergeFrom(const ReportMigrateInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ReportMigrateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.has_job()) {
    mutable_job()->::masterproto::MigrateJob::MergeFrom(from.job());
  }
}

void ReportMigrateInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ReportMigrateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportMigrateInfoReq::CopyFrom(const ReportMigrateInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ReportMigrateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportMigrateInfoReq::IsInitialized() const {
  return true;
}

void ReportMigrateInfoReq::Swap(ReportMigrateInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportMigrateInfoReq::InternalSwap(ReportMigrateInfoReq* other) {
  session_id_.Swap(&other->session_id_);
  std::swap(header_, other->header_);
  std::swap(job_, other->job_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportMigrateInfoReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[113];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportMigrateInfoReq

// .cmongoproto.ReqHeader header = 1;
bool ReportMigrateInfoReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportMigrateInfoReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ReportMigrateInfoReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ReportMigrateInfoReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ReportMigrateInfoReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ReportMigrateInfoReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ReportMigrateInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ReportMigrateInfoReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportMigrateInfoReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ReportMigrateInfoReq.header)
}

// string session_id = 2;
void ReportMigrateInfoReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReportMigrateInfoReq::session_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ReportMigrateInfoReq.session_id)
  return session_id_.GetNoArena();
}
void ReportMigrateInfoReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ReportMigrateInfoReq.session_id)
}
#if LANG_CXX11
void ReportMigrateInfoReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ReportMigrateInfoReq.session_id)
}
#endif
void ReportMigrateInfoReq::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ReportMigrateInfoReq.session_id)
}
void ReportMigrateInfoReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ReportMigrateInfoReq.session_id)
}
::std::string* ReportMigrateInfoReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ReportMigrateInfoReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReportMigrateInfoReq::release_session_id() {
  // @@protoc_insertion_point(field_release:masterproto.ReportMigrateInfoReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReportMigrateInfoReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ReportMigrateInfoReq.session_id)
}

// .masterproto.MigrateJob job = 3;
bool ReportMigrateInfoReq::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
void ReportMigrateInfoReq::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
const ::masterproto::MigrateJob& ReportMigrateInfoReq::job() const {
  // @@protoc_insertion_point(field_get:masterproto.ReportMigrateInfoReq.job)
  return job_ != NULL ? *job_
                         : *::masterproto::MigrateJob::internal_default_instance();
}
::masterproto::MigrateJob* ReportMigrateInfoReq::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::masterproto::MigrateJob;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ReportMigrateInfoReq.job)
  return job_;
}
::masterproto::MigrateJob* ReportMigrateInfoReq::release_job() {
  // @@protoc_insertion_point(field_release:masterproto.ReportMigrateInfoReq.job)
  
  ::masterproto::MigrateJob* temp = job_;
  job_ = NULL;
  return temp;
}
void ReportMigrateInfoReq::set_allocated_job(::masterproto::MigrateJob* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ReportMigrateInfoReq.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportMigrateInfoRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportMigrateInfoRsp::ReportMigrateInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ReportMigrateInfoRsp)
}
ReportMigrateInfoRsp::ReportMigrateInfoRsp(const ReportMigrateInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ReportMigrateInfoRsp)
}

void ReportMigrateInfoRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReportMigrateInfoRsp::~ReportMigrateInfoRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ReportMigrateInfoRsp)
  SharedDtor();
}

void ReportMigrateInfoRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ReportMigrateInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportMigrateInfoRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[114].descriptor;
}

const ReportMigrateInfoRsp& ReportMigrateInfoRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportMigrateInfoRsp* ReportMigrateInfoRsp::New(::google::protobuf::Arena* arena) const {
  ReportMigrateInfoRsp* n = new ReportMigrateInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportMigrateInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ReportMigrateInfoRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ReportMigrateInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ReportMigrateInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ReportMigrateInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ReportMigrateInfoRsp)
  return false;
#undef DO_
}

void ReportMigrateInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ReportMigrateInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ReportMigrateInfoRsp)
}

::google::protobuf::uint8* ReportMigrateInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ReportMigrateInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ReportMigrateInfoRsp)
  return target;
}

size_t ReportMigrateInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ReportMigrateInfoRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportMigrateInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ReportMigrateInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportMigrateInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportMigrateInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ReportMigrateInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ReportMigrateInfoRsp)
    MergeFrom(*source);
  }
}

void ReportMigrateInfoRsp::MergeFrom(const ReportMigrateInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ReportMigrateInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ReportMigrateInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ReportMigrateInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportMigrateInfoRsp::CopyFrom(const ReportMigrateInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ReportMigrateInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportMigrateInfoRsp::IsInitialized() const {
  return true;
}

void ReportMigrateInfoRsp::Swap(ReportMigrateInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportMigrateInfoRsp::InternalSwap(ReportMigrateInfoRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportMigrateInfoRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[114];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportMigrateInfoRsp

// .cmongoproto.ResHeader header = 1;
bool ReportMigrateInfoRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportMigrateInfoRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ReportMigrateInfoRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ReportMigrateInfoRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ReportMigrateInfoRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ReportMigrateInfoRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ReportMigrateInfoRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ReportMigrateInfoRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportMigrateInfoRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ReportMigrateInfoRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTableInMigratingReq::kHeaderFieldNumber;
const int IsTableInMigratingReq::kClusterIdFieldNumber;
const int IsTableInMigratingReq::kNsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTableInMigratingReq::IsTableInMigratingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.IsTableInMigratingReq)
}
IsTableInMigratingReq::IsTableInMigratingReq(const IsTableInMigratingReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.IsTableInMigratingReq)
}

void IsTableInMigratingReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

IsTableInMigratingReq::~IsTableInMigratingReq() {
  // @@protoc_insertion_point(destructor:masterproto.IsTableInMigratingReq)
  SharedDtor();
}

void IsTableInMigratingReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void IsTableInMigratingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsTableInMigratingReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[115].descriptor;
}

const IsTableInMigratingReq& IsTableInMigratingReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsTableInMigratingReq* IsTableInMigratingReq::New(::google::protobuf::Arena* arena) const {
  IsTableInMigratingReq* n = new IsTableInMigratingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsTableInMigratingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.IsTableInMigratingReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool IsTableInMigratingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.IsTableInMigratingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.IsTableInMigratingReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.IsTableInMigratingReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.IsTableInMigratingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.IsTableInMigratingReq)
  return false;
#undef DO_
}

void IsTableInMigratingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.IsTableInMigratingReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsTableInMigratingReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsTableInMigratingReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ns(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.IsTableInMigratingReq)
}

::google::protobuf::uint8* IsTableInMigratingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.IsTableInMigratingReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsTableInMigratingReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.IsTableInMigratingReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.IsTableInMigratingReq)
  return target;
}

size_t IsTableInMigratingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.IsTableInMigratingReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsTableInMigratingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.IsTableInMigratingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTableInMigratingReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTableInMigratingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.IsTableInMigratingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.IsTableInMigratingReq)
    MergeFrom(*source);
  }
}

void IsTableInMigratingReq::MergeFrom(const IsTableInMigratingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.IsTableInMigratingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void IsTableInMigratingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.IsTableInMigratingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTableInMigratingReq::CopyFrom(const IsTableInMigratingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.IsTableInMigratingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTableInMigratingReq::IsInitialized() const {
  return true;
}

void IsTableInMigratingReq::Swap(IsTableInMigratingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTableInMigratingReq::InternalSwap(IsTableInMigratingReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsTableInMigratingReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[115];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsTableInMigratingReq

// .cmongoproto.ReqHeader header = 1;
bool IsTableInMigratingReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsTableInMigratingReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& IsTableInMigratingReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.IsTableInMigratingReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* IsTableInMigratingReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.IsTableInMigratingReq.header)
  return header_;
}
::cmongoproto::ReqHeader* IsTableInMigratingReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.IsTableInMigratingReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsTableInMigratingReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsTableInMigratingReq.header)
}

// string cluster_id = 2;
void IsTableInMigratingReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IsTableInMigratingReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.IsTableInMigratingReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void IsTableInMigratingReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.IsTableInMigratingReq.cluster_id)
}
#if LANG_CXX11
void IsTableInMigratingReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.IsTableInMigratingReq.cluster_id)
}
#endif
void IsTableInMigratingReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.IsTableInMigratingReq.cluster_id)
}
void IsTableInMigratingReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.IsTableInMigratingReq.cluster_id)
}
::std::string* IsTableInMigratingReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.IsTableInMigratingReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IsTableInMigratingReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.IsTableInMigratingReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IsTableInMigratingReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsTableInMigratingReq.cluster_id)
}

// string ns = 3;
void IsTableInMigratingReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IsTableInMigratingReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.IsTableInMigratingReq.ns)
  return ns_.GetNoArena();
}
void IsTableInMigratingReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.IsTableInMigratingReq.ns)
}
#if LANG_CXX11
void IsTableInMigratingReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.IsTableInMigratingReq.ns)
}
#endif
void IsTableInMigratingReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.IsTableInMigratingReq.ns)
}
void IsTableInMigratingReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.IsTableInMigratingReq.ns)
}
::std::string* IsTableInMigratingReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.IsTableInMigratingReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IsTableInMigratingReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.IsTableInMigratingReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IsTableInMigratingReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsTableInMigratingReq.ns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsTableInMigratingRsp::kHeaderFieldNumber;
const int IsTableInMigratingRsp::kIsMigratingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsTableInMigratingRsp::IsTableInMigratingRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.IsTableInMigratingRsp)
}
IsTableInMigratingRsp::IsTableInMigratingRsp(const IsTableInMigratingRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  is_migrating_ = from.is_migrating_;
  // @@protoc_insertion_point(copy_constructor:masterproto.IsTableInMigratingRsp)
}

void IsTableInMigratingRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&is_migrating_) -
    reinterpret_cast<char*>(&header_) + sizeof(is_migrating_));
  _cached_size_ = 0;
}

IsTableInMigratingRsp::~IsTableInMigratingRsp() {
  // @@protoc_insertion_point(destructor:masterproto.IsTableInMigratingRsp)
  SharedDtor();
}

void IsTableInMigratingRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void IsTableInMigratingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsTableInMigratingRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[116].descriptor;
}

const IsTableInMigratingRsp& IsTableInMigratingRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

IsTableInMigratingRsp* IsTableInMigratingRsp::New(::google::protobuf::Arena* arena) const {
  IsTableInMigratingRsp* n = new IsTableInMigratingRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsTableInMigratingRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.IsTableInMigratingRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  is_migrating_ = false;
}

bool IsTableInMigratingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.IsTableInMigratingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_migrating = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_migrating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.IsTableInMigratingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.IsTableInMigratingRsp)
  return false;
#undef DO_
}

void IsTableInMigratingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.IsTableInMigratingRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool is_migrating = 2;
  if (this->is_migrating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_migrating(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.IsTableInMigratingRsp)
}

::google::protobuf::uint8* IsTableInMigratingRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.IsTableInMigratingRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // bool is_migrating = 2;
  if (this->is_migrating() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_migrating(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.IsTableInMigratingRsp)
  return target;
}

size_t IsTableInMigratingRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.IsTableInMigratingRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool is_migrating = 2;
  if (this->is_migrating() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsTableInMigratingRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.IsTableInMigratingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IsTableInMigratingRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsTableInMigratingRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.IsTableInMigratingRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.IsTableInMigratingRsp)
    MergeFrom(*source);
  }
}

void IsTableInMigratingRsp::MergeFrom(const IsTableInMigratingRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.IsTableInMigratingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.is_migrating() != 0) {
    set_is_migrating(from.is_migrating());
  }
}

void IsTableInMigratingRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.IsTableInMigratingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsTableInMigratingRsp::CopyFrom(const IsTableInMigratingRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.IsTableInMigratingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsTableInMigratingRsp::IsInitialized() const {
  return true;
}

void IsTableInMigratingRsp::Swap(IsTableInMigratingRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsTableInMigratingRsp::InternalSwap(IsTableInMigratingRsp* other) {
  std::swap(header_, other->header_);
  std::swap(is_migrating_, other->is_migrating_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsTableInMigratingRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[116];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsTableInMigratingRsp

// .cmongoproto.ResHeader header = 1;
bool IsTableInMigratingRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsTableInMigratingRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& IsTableInMigratingRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.IsTableInMigratingRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* IsTableInMigratingRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.IsTableInMigratingRsp.header)
  return header_;
}
::cmongoproto::ResHeader* IsTableInMigratingRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.IsTableInMigratingRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsTableInMigratingRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.IsTableInMigratingRsp.header)
}

// bool is_migrating = 2;
void IsTableInMigratingRsp::clear_is_migrating() {
  is_migrating_ = false;
}
bool IsTableInMigratingRsp::is_migrating() const {
  // @@protoc_insertion_point(field_get:masterproto.IsTableInMigratingRsp.is_migrating)
  return is_migrating_;
}
void IsTableInMigratingRsp::set_is_migrating(bool value) {
  
  is_migrating_ = value;
  // @@protoc_insertion_point(field_set:masterproto.IsTableInMigratingRsp.is_migrating)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreFilesReq::kHeaderFieldNumber;
const int RestoreFilesReq::kSrcFieldNumber;
const int RestoreFilesReq::kTsFieldNumber;
const int RestoreFilesReq::kDbFieldNumber;
const int RestoreFilesReq::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreFilesReq::RestoreFilesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestoreFilesReq)
}
RestoreFilesReq::RestoreFilesReq(const RestoreFilesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src().size() > 0) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:masterproto.RestoreFilesReq)
}

void RestoreFilesReq::SharedCtor() {
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&header_) + sizeof(ts_));
  _cached_size_ = 0;
}

RestoreFilesReq::~RestoreFilesReq() {
  // @@protoc_insertion_point(destructor:masterproto.RestoreFilesReq)
  SharedDtor();
}

void RestoreFilesReq::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestoreFilesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreFilesReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[117].descriptor;
}

const RestoreFilesReq& RestoreFilesReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestoreFilesReq* RestoreFilesReq::New(::google::protobuf::Arena* arena) const {
  RestoreFilesReq* n = new RestoreFilesReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreFilesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestoreFilesReq)
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ts_ = GOOGLE_LONGLONG(0);
}

bool RestoreFilesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestoreFilesReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreFilesReq.src"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ts = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreFilesReq.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreFilesReq.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestoreFilesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestoreFilesReq)
  return false;
#undef DO_
}

void RestoreFilesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestoreFilesReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string src = 2;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src(), output);
  }

  // int64 ts = 3;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ts(), output);
  }

  // string db = 4;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db(), output);
  }

  // string table = 5;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->table(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestoreFilesReq)
}

::google::protobuf::uint8* RestoreFilesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestoreFilesReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string src = 2;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src(), target);
  }

  // int64 ts = 3;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ts(), target);
  }

  // string db = 4;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->db(), target);
  }

  // string table = 5;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesReq.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->table(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestoreFilesReq)
  return target;
}

size_t RestoreFilesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestoreFilesReq)
  size_t total_size = 0;

  // string src = 2;
  if (this->src().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  // string db = 4;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string table = 5;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 ts = 3;
  if (this->ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreFilesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestoreFilesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFilesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreFilesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestoreFilesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestoreFilesReq)
    MergeFrom(*source);
  }
}

void RestoreFilesReq::MergeFrom(const RestoreFilesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestoreFilesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.src().size() > 0) {

    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
}

void RestoreFilesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestoreFilesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFilesReq::CopyFrom(const RestoreFilesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestoreFilesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFilesReq::IsInitialized() const {
  return true;
}

void RestoreFilesReq::Swap(RestoreFilesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreFilesReq::InternalSwap(RestoreFilesReq* other) {
  src_.Swap(&other->src_);
  db_.Swap(&other->db_);
  table_.Swap(&other->table_);
  std::swap(header_, other->header_);
  std::swap(ts_, other->ts_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreFilesReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[117];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreFilesReq

// .cmongoproto.ReqHeader header = 1;
bool RestoreFilesReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestoreFilesReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RestoreFilesReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RestoreFilesReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RestoreFilesReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestoreFilesReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesReq.header)
}

// string src = 2;
void RestoreFilesReq::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreFilesReq::src() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesReq.src)
  return src_.GetNoArena();
}
void RestoreFilesReq::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesReq.src)
}
#if LANG_CXX11
void RestoreFilesReq::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreFilesReq.src)
}
#endif
void RestoreFilesReq::set_src(const char* value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreFilesReq.src)
}
void RestoreFilesReq::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreFilesReq.src)
}
::std::string* RestoreFilesReq::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesReq.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreFilesReq::release_src() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesReq.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreFilesReq::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesReq.src)
}

// int64 ts = 3;
void RestoreFilesReq::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RestoreFilesReq::ts() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesReq.ts)
  return ts_;
}
void RestoreFilesReq::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesReq.ts)
}

// string db = 4;
void RestoreFilesReq::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreFilesReq::db() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesReq.db)
  return db_.GetNoArena();
}
void RestoreFilesReq::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesReq.db)
}
#if LANG_CXX11
void RestoreFilesReq::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreFilesReq.db)
}
#endif
void RestoreFilesReq::set_db(const char* value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreFilesReq.db)
}
void RestoreFilesReq::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreFilesReq.db)
}
::std::string* RestoreFilesReq::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesReq.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreFilesReq::release_db() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesReq.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreFilesReq::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesReq.db)
}

// string table = 5;
void RestoreFilesReq::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreFilesReq::table() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesReq.table)
  return table_.GetNoArena();
}
void RestoreFilesReq::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesReq.table)
}
#if LANG_CXX11
void RestoreFilesReq::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreFilesReq.table)
}
#endif
void RestoreFilesReq::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreFilesReq.table)
}
void RestoreFilesReq::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreFilesReq.table)
}
::std::string* RestoreFilesReq::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesReq.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreFilesReq::release_table() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesReq.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreFilesReq::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesReq.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreFilesRes::kHeaderFieldNumber;
const int RestoreFilesRes::kSnapshotFileFieldNumber;
const int RestoreFilesRes::kIncrementFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreFilesRes::RestoreFilesRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestoreFilesRes)
}
RestoreFilesRes::RestoreFilesRes(const RestoreFilesRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      incrementfiles_(from.incrementfiles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshotfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshotfile().size() > 0) {
    snapshotfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshotfile_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.RestoreFilesRes)
}

void RestoreFilesRes::SharedCtor() {
  snapshotfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

RestoreFilesRes::~RestoreFilesRes() {
  // @@protoc_insertion_point(destructor:masterproto.RestoreFilesRes)
  SharedDtor();
}

void RestoreFilesRes::SharedDtor() {
  snapshotfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestoreFilesRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreFilesRes::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[118].descriptor;
}

const RestoreFilesRes& RestoreFilesRes::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestoreFilesRes* RestoreFilesRes::New(::google::protobuf::Arena* arena) const {
  RestoreFilesRes* n = new RestoreFilesRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreFilesRes::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestoreFilesRes)
  incrementfiles_.Clear();
  snapshotfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RestoreFilesRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestoreFilesRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshotFile = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshotfile().data(), this->snapshotfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreFilesRes.snapshotFile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string incrementFiles = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_incrementfiles()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->incrementfiles(this->incrementfiles_size() - 1).data(),
            this->incrementfiles(this->incrementfiles_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestoreFilesRes.incrementFiles"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestoreFilesRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestoreFilesRes)
  return false;
#undef DO_
}

void RestoreFilesRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestoreFilesRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string snapshotFile = 2;
  if (this->snapshotfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshotfile().data(), this->snapshotfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesRes.snapshotFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshotfile(), output);
  }

  // repeated string incrementFiles = 3;
  for (int i = 0; i < this->incrementfiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->incrementfiles(i).data(), this->incrementfiles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesRes.incrementFiles");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->incrementfiles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestoreFilesRes)
}

::google::protobuf::uint8* RestoreFilesRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestoreFilesRes)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string snapshotFile = 2;
  if (this->snapshotfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshotfile().data(), this->snapshotfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesRes.snapshotFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshotfile(), target);
  }

  // repeated string incrementFiles = 3;
  for (int i = 0; i < this->incrementfiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->incrementfiles(i).data(), this->incrementfiles(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestoreFilesRes.incrementFiles");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->incrementfiles(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestoreFilesRes)
  return target;
}

size_t RestoreFilesRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestoreFilesRes)
  size_t total_size = 0;

  // repeated string incrementFiles = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->incrementfiles_size());
  for (int i = 0; i < this->incrementfiles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->incrementfiles(i));
  }

  // string snapshotFile = 2;
  if (this->snapshotfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshotfile());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreFilesRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestoreFilesRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFilesRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreFilesRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestoreFilesRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestoreFilesRes)
    MergeFrom(*source);
  }
}

void RestoreFilesRes::MergeFrom(const RestoreFilesRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestoreFilesRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  incrementfiles_.MergeFrom(from.incrementfiles_);
  if (from.snapshotfile().size() > 0) {

    snapshotfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshotfile_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RestoreFilesRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestoreFilesRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFilesRes::CopyFrom(const RestoreFilesRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestoreFilesRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFilesRes::IsInitialized() const {
  return true;
}

void RestoreFilesRes::Swap(RestoreFilesRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreFilesRes::InternalSwap(RestoreFilesRes* other) {
  incrementfiles_.UnsafeArenaSwap(&other->incrementfiles_);
  snapshotfile_.Swap(&other->snapshotfile_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreFilesRes::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[118];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreFilesRes

// .cmongoproto.ResHeader header = 1;
bool RestoreFilesRes::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestoreFilesRes::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RestoreFilesRes::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesRes.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RestoreFilesRes::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesRes.header)
  return header_;
}
::cmongoproto::ResHeader* RestoreFilesRes::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesRes.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestoreFilesRes::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesRes.header)
}

// string snapshotFile = 2;
void RestoreFilesRes::clear_snapshotfile() {
  snapshotfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestoreFilesRes::snapshotfile() const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesRes.snapshotFile)
  return snapshotfile_.GetNoArena();
}
void RestoreFilesRes::set_snapshotfile(const ::std::string& value) {
  
  snapshotfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesRes.snapshotFile)
}
#if LANG_CXX11
void RestoreFilesRes::set_snapshotfile(::std::string&& value) {
  
  snapshotfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestoreFilesRes.snapshotFile)
}
#endif
void RestoreFilesRes::set_snapshotfile(const char* value) {
  
  snapshotfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreFilesRes.snapshotFile)
}
void RestoreFilesRes::set_snapshotfile(const char* value, size_t size) {
  
  snapshotfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreFilesRes.snapshotFile)
}
::std::string* RestoreFilesRes::mutable_snapshotfile() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesRes.snapshotFile)
  return snapshotfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreFilesRes::release_snapshotfile() {
  // @@protoc_insertion_point(field_release:masterproto.RestoreFilesRes.snapshotFile)
  
  return snapshotfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreFilesRes::set_allocated_snapshotfile(::std::string* snapshotfile) {
  if (snapshotfile != NULL) {
    
  } else {
    
  }
  snapshotfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshotfile);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestoreFilesRes.snapshotFile)
}

// repeated string incrementFiles = 3;
int RestoreFilesRes::incrementfiles_size() const {
  return incrementfiles_.size();
}
void RestoreFilesRes::clear_incrementfiles() {
  incrementfiles_.Clear();
}
const ::std::string& RestoreFilesRes::incrementfiles(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.RestoreFilesRes.incrementFiles)
  return incrementfiles_.Get(index);
}
::std::string* RestoreFilesRes::mutable_incrementfiles(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.RestoreFilesRes.incrementFiles)
  return incrementfiles_.Mutable(index);
}
void RestoreFilesRes::set_incrementfiles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.RestoreFilesRes.incrementFiles)
  incrementfiles_.Mutable(index)->assign(value);
}
void RestoreFilesRes::set_incrementfiles(int index, const char* value) {
  incrementfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.RestoreFilesRes.incrementFiles)
}
void RestoreFilesRes::set_incrementfiles(int index, const char* value, size_t size) {
  incrementfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestoreFilesRes.incrementFiles)
}
::std::string* RestoreFilesRes::add_incrementfiles() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.RestoreFilesRes.incrementFiles)
  return incrementfiles_.Add();
}
void RestoreFilesRes::add_incrementfiles(const ::std::string& value) {
  incrementfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.RestoreFilesRes.incrementFiles)
}
void RestoreFilesRes::add_incrementfiles(const char* value) {
  incrementfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.RestoreFilesRes.incrementFiles)
}
void RestoreFilesRes::add_incrementfiles(const char* value, size_t size) {
  incrementfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.RestoreFilesRes.incrementFiles)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RestoreFilesRes::incrementfiles() const {
  // @@protoc_insertion_point(field_list:masterproto.RestoreFilesRes.incrementFiles)
  return incrementfiles_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RestoreFilesRes::mutable_incrementfiles() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.RestoreFilesRes.incrementFiles)
  return &incrementfiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveNodeInfo::kNameserviceIdFieldNumber;
const int ActiveNodeInfo::kNamenodeIdFieldNumber;
const int ActiveNodeInfo::kHostnameFieldNumber;
const int ActiveNodeInfo::kPortFieldNumber;
const int ActiveNodeInfo::kZkfcPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveNodeInfo::ActiveNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ActiveNodeInfo)
}
ActiveNodeInfo::ActiveNodeInfo(const ActiveNodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nameserviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nameserviceid().size() > 0) {
    nameserviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nameserviceid_);
  }
  namenodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namenodeid().size() > 0) {
    namenodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namenodeid_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&zkfcport_) -
    reinterpret_cast<char*>(&port_) + sizeof(zkfcport_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ActiveNodeInfo)
}

void ActiveNodeInfo::SharedCtor() {
  nameserviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namenodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&zkfcport_) -
    reinterpret_cast<char*>(&port_) + sizeof(zkfcport_));
  _cached_size_ = 0;
}

ActiveNodeInfo::~ActiveNodeInfo() {
  // @@protoc_insertion_point(destructor:masterproto.ActiveNodeInfo)
  SharedDtor();
}

void ActiveNodeInfo::SharedDtor() {
  nameserviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namenodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActiveNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveNodeInfo::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[119].descriptor;
}

const ActiveNodeInfo& ActiveNodeInfo::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActiveNodeInfo* ActiveNodeInfo::New(::google::protobuf::Arena* arena) const {
  ActiveNodeInfo* n = new ActiveNodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActiveNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ActiveNodeInfo)
  nameserviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namenodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&zkfcport_) -
    reinterpret_cast<char*>(&port_) + sizeof(zkfcport_));
}

bool ActiveNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ActiveNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nameserviceId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameserviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nameserviceid().data(), this->nameserviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ActiveNodeInfo.nameserviceId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namenodeId = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namenodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namenodeid().data(), this->namenodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ActiveNodeInfo.namenodeId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostname = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ActiveNodeInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 zkfcPort = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zkfcport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ActiveNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ActiveNodeInfo)
  return false;
#undef DO_
}

void ActiveNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ActiveNodeInfo)
  // string nameserviceId = 1;
  if (this->nameserviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameserviceid().data(), this->nameserviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.nameserviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nameserviceid(), output);
  }

  // string namenodeId = 2;
  if (this->namenodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namenodeid().data(), this->namenodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.namenodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namenodeid(), output);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // int32 zkfcPort = 5;
  if (this->zkfcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zkfcport(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ActiveNodeInfo)
}

::google::protobuf::uint8* ActiveNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ActiveNodeInfo)
  // string nameserviceId = 1;
  if (this->nameserviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameserviceid().data(), this->nameserviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.nameserviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nameserviceid(), target);
  }

  // string namenodeId = 2;
  if (this->namenodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namenodeid().data(), this->namenodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.namenodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namenodeid(), target);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ActiveNodeInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // int32 zkfcPort = 5;
  if (this->zkfcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zkfcport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ActiveNodeInfo)
  return target;
}

size_t ActiveNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ActiveNodeInfo)
  size_t total_size = 0;

  // string nameserviceId = 1;
  if (this->nameserviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nameserviceid());
  }

  // string namenodeId = 2;
  if (this->namenodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namenodeid());
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 zkfcPort = 5;
  if (this->zkfcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zkfcport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ActiveNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveNodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ActiveNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ActiveNodeInfo)
    MergeFrom(*source);
  }
}

void ActiveNodeInfo::MergeFrom(const ActiveNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ActiveNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nameserviceid().size() > 0) {

    nameserviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nameserviceid_);
  }
  if (from.namenodeid().size() > 0) {

    namenodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namenodeid_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.zkfcport() != 0) {
    set_zkfcport(from.zkfcport());
  }
}

void ActiveNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ActiveNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveNodeInfo::CopyFrom(const ActiveNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ActiveNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveNodeInfo::IsInitialized() const {
  return true;
}

void ActiveNodeInfo::Swap(ActiveNodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveNodeInfo::InternalSwap(ActiveNodeInfo* other) {
  nameserviceid_.Swap(&other->nameserviceid_);
  namenodeid_.Swap(&other->namenodeid_);
  hostname_.Swap(&other->hostname_);
  std::swap(port_, other->port_);
  std::swap(zkfcport_, other->zkfcport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActiveNodeInfo::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[119];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveNodeInfo

// string nameserviceId = 1;
void ActiveNodeInfo::clear_nameserviceid() {
  nameserviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActiveNodeInfo::nameserviceid() const {
  // @@protoc_insertion_point(field_get:masterproto.ActiveNodeInfo.nameserviceId)
  return nameserviceid_.GetNoArena();
}
void ActiveNodeInfo::set_nameserviceid(const ::std::string& value) {
  
  nameserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ActiveNodeInfo.nameserviceId)
}
#if LANG_CXX11
void ActiveNodeInfo::set_nameserviceid(::std::string&& value) {
  
  nameserviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ActiveNodeInfo.nameserviceId)
}
#endif
void ActiveNodeInfo::set_nameserviceid(const char* value) {
  
  nameserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ActiveNodeInfo.nameserviceId)
}
void ActiveNodeInfo::set_nameserviceid(const char* value, size_t size) {
  
  nameserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ActiveNodeInfo.nameserviceId)
}
::std::string* ActiveNodeInfo::mutable_nameserviceid() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ActiveNodeInfo.nameserviceId)
  return nameserviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveNodeInfo::release_nameserviceid() {
  // @@protoc_insertion_point(field_release:masterproto.ActiveNodeInfo.nameserviceId)
  
  return nameserviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveNodeInfo::set_allocated_nameserviceid(::std::string* nameserviceid) {
  if (nameserviceid != NULL) {
    
  } else {
    
  }
  nameserviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameserviceid);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ActiveNodeInfo.nameserviceId)
}

// string namenodeId = 2;
void ActiveNodeInfo::clear_namenodeid() {
  namenodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActiveNodeInfo::namenodeid() const {
  // @@protoc_insertion_point(field_get:masterproto.ActiveNodeInfo.namenodeId)
  return namenodeid_.GetNoArena();
}
void ActiveNodeInfo::set_namenodeid(const ::std::string& value) {
  
  namenodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ActiveNodeInfo.namenodeId)
}
#if LANG_CXX11
void ActiveNodeInfo::set_namenodeid(::std::string&& value) {
  
  namenodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ActiveNodeInfo.namenodeId)
}
#endif
void ActiveNodeInfo::set_namenodeid(const char* value) {
  
  namenodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ActiveNodeInfo.namenodeId)
}
void ActiveNodeInfo::set_namenodeid(const char* value, size_t size) {
  
  namenodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ActiveNodeInfo.namenodeId)
}
::std::string* ActiveNodeInfo::mutable_namenodeid() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ActiveNodeInfo.namenodeId)
  return namenodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveNodeInfo::release_namenodeid() {
  // @@protoc_insertion_point(field_release:masterproto.ActiveNodeInfo.namenodeId)
  
  return namenodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveNodeInfo::set_allocated_namenodeid(::std::string* namenodeid) {
  if (namenodeid != NULL) {
    
  } else {
    
  }
  namenodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namenodeid);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ActiveNodeInfo.namenodeId)
}

// string hostname = 3;
void ActiveNodeInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ActiveNodeInfo::hostname() const {
  // @@protoc_insertion_point(field_get:masterproto.ActiveNodeInfo.hostname)
  return hostname_.GetNoArena();
}
void ActiveNodeInfo::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ActiveNodeInfo.hostname)
}
#if LANG_CXX11
void ActiveNodeInfo::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ActiveNodeInfo.hostname)
}
#endif
void ActiveNodeInfo::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ActiveNodeInfo.hostname)
}
void ActiveNodeInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ActiveNodeInfo.hostname)
}
::std::string* ActiveNodeInfo::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ActiveNodeInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActiveNodeInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:masterproto.ActiveNodeInfo.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActiveNodeInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ActiveNodeInfo.hostname)
}

// int32 port = 4;
void ActiveNodeInfo::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 ActiveNodeInfo::port() const {
  // @@protoc_insertion_point(field_get:masterproto.ActiveNodeInfo.port)
  return port_;
}
void ActiveNodeInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ActiveNodeInfo.port)
}

// int32 zkfcPort = 5;
void ActiveNodeInfo::clear_zkfcport() {
  zkfcport_ = 0;
}
::google::protobuf::int32 ActiveNodeInfo::zkfcport() const {
  // @@protoc_insertion_point(field_get:masterproto.ActiveNodeInfo.zkfcPort)
  return zkfcport_;
}
void ActiveNodeInfo::set_zkfcport(::google::protobuf::int32 value) {
  
  zkfcport_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ActiveNodeInfo.zkfcPort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenBalanceTaskReq::kHeaderFieldNumber;
const int GenBalanceTaskReq::kClusterIdFieldNumber;
const int GenBalanceTaskReq::kNsFieldNumber;
const int GenBalanceTaskReq::kCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenBalanceTaskReq::GenBalanceTaskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GenBalanceTaskReq)
}
GenBalanceTaskReq::GenBalanceTaskReq(const GenBalanceTaskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator().size() > 0) {
    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GenBalanceTaskReq)
}

void GenBalanceTaskReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GenBalanceTaskReq::~GenBalanceTaskReq() {
  // @@protoc_insertion_point(destructor:masterproto.GenBalanceTaskReq)
  SharedDtor();
}

void GenBalanceTaskReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GenBalanceTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenBalanceTaskReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[120].descriptor;
}

const GenBalanceTaskReq& GenBalanceTaskReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenBalanceTaskReq* GenBalanceTaskReq::New(::google::protobuf::Arena* arena) const {
  GenBalanceTaskReq* n = new GenBalanceTaskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenBalanceTaskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GenBalanceTaskReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GenBalanceTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GenBalanceTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GenBalanceTaskReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GenBalanceTaskReq.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GenBalanceTaskReq.creator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GenBalanceTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GenBalanceTaskReq)
  return false;
#undef DO_
}

void GenBalanceTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GenBalanceTaskReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ns(), output);
  }

  // string creator = 4;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.creator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GenBalanceTaskReq)
}

::google::protobuf::uint8* GenBalanceTaskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GenBalanceTaskReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ns(), target);
  }

  // string creator = 4;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GenBalanceTaskReq.creator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->creator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GenBalanceTaskReq)
  return target;
}

size_t GenBalanceTaskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GenBalanceTaskReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 3;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string creator = 4;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenBalanceTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GenBalanceTaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GenBalanceTaskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenBalanceTaskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GenBalanceTaskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GenBalanceTaskReq)
    MergeFrom(*source);
  }
}

void GenBalanceTaskReq::MergeFrom(const GenBalanceTaskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GenBalanceTaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.creator().size() > 0) {

    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void GenBalanceTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GenBalanceTaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenBalanceTaskReq::CopyFrom(const GenBalanceTaskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GenBalanceTaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenBalanceTaskReq::IsInitialized() const {
  return true;
}

void GenBalanceTaskReq::Swap(GenBalanceTaskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenBalanceTaskReq::InternalSwap(GenBalanceTaskReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  creator_.Swap(&other->creator_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenBalanceTaskReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[120];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenBalanceTaskReq

// .cmongoproto.ReqHeader header = 1;
bool GenBalanceTaskReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GenBalanceTaskReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GenBalanceTaskReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GenBalanceTaskReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GenBalanceTaskReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GenBalanceTaskReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GenBalanceTaskReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GenBalanceTaskReq.header)
}

// string cluster_id = 2;
void GenBalanceTaskReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenBalanceTaskReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GenBalanceTaskReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GenBalanceTaskReq.cluster_id)
}
#if LANG_CXX11
void GenBalanceTaskReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GenBalanceTaskReq.cluster_id)
}
#endif
void GenBalanceTaskReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GenBalanceTaskReq.cluster_id)
}
void GenBalanceTaskReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GenBalanceTaskReq.cluster_id)
}
::std::string* GenBalanceTaskReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenBalanceTaskReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GenBalanceTaskReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenBalanceTaskReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GenBalanceTaskReq.cluster_id)
}

// string ns = 3;
void GenBalanceTaskReq::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenBalanceTaskReq::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskReq.ns)
  return ns_.GetNoArena();
}
void GenBalanceTaskReq::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GenBalanceTaskReq.ns)
}
#if LANG_CXX11
void GenBalanceTaskReq::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GenBalanceTaskReq.ns)
}
#endif
void GenBalanceTaskReq::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GenBalanceTaskReq.ns)
}
void GenBalanceTaskReq::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GenBalanceTaskReq.ns)
}
::std::string* GenBalanceTaskReq::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskReq.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenBalanceTaskReq::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.GenBalanceTaskReq.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenBalanceTaskReq::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GenBalanceTaskReq.ns)
}

// string creator = 4;
void GenBalanceTaskReq::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenBalanceTaskReq::creator() const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskReq.creator)
  return creator_.GetNoArena();
}
void GenBalanceTaskReq::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GenBalanceTaskReq.creator)
}
#if LANG_CXX11
void GenBalanceTaskReq::set_creator(::std::string&& value) {
  
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GenBalanceTaskReq.creator)
}
#endif
void GenBalanceTaskReq::set_creator(const char* value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GenBalanceTaskReq.creator)
}
void GenBalanceTaskReq::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GenBalanceTaskReq.creator)
}
::std::string* GenBalanceTaskReq::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskReq.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenBalanceTaskReq::release_creator() {
  // @@protoc_insertion_point(field_release:masterproto.GenBalanceTaskReq.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenBalanceTaskReq::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GenBalanceTaskReq.creator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalanceTask::kClusterIdFieldNumber;
const int BalanceTask::kNsFieldNumber;
const int BalanceTask::kChunkListFieldNumber;
const int BalanceTask::kSrcShardFieldNumber;
const int BalanceTask::kDstShardFieldNumber;
const int BalanceTask::kAutoCleanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalanceTask::BalanceTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BalanceTask)
}
BalanceTask::BalanceTask(const BalanceTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  src_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_shard().size() > 0) {
    src_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_shard_);
  }
  dst_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_shard().size() > 0) {
    dst_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_shard_);
  }
  auto_clean_ = from.auto_clean_;
  // @@protoc_insertion_point(copy_constructor:masterproto.BalanceTask)
}

void BalanceTask::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_clean_ = false;
  _cached_size_ = 0;
}

BalanceTask::~BalanceTask() {
  // @@protoc_insertion_point(destructor:masterproto.BalanceTask)
  SharedDtor();
}

void BalanceTask::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BalanceTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceTask::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[121].descriptor;
}

const BalanceTask& BalanceTask::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalanceTask* BalanceTask::New(::google::protobuf::Arena* arena) const {
  BalanceTask* n = new BalanceTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalanceTask::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BalanceTask)
  chunk_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auto_clean_ = false;
}

bool BalanceTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BalanceTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BalanceTask.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BalanceTask.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_shard = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_shard().data(), this->src_shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BalanceTask.src_shard"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_shard = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_shard().data(), this->dst_shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BalanceTask.dst_shard"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_clean = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_clean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BalanceTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BalanceTask)
  return false;
#undef DO_
}

void BalanceTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BalanceTask)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ns(), output);
  }

  // repeated int32 chunk_list = 3;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // string src_shard = 4;
  if (this->src_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_shard().data(), this->src_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.src_shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->src_shard(), output);
  }

  // string dst_shard = 5;
  if (this->dst_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_shard().data(), this->dst_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.dst_shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dst_shard(), output);
  }

  // bool auto_clean = 6;
  if (this->auto_clean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_clean(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BalanceTask)
}

::google::protobuf::uint8* BalanceTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BalanceTask)
  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ns(), target);
  }

  // repeated int32 chunk_list = 3;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // string src_shard = 4;
  if (this->src_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_shard().data(), this->src_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.src_shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->src_shard(), target);
  }

  // string dst_shard = 5;
  if (this->dst_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_shard().data(), this->dst_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceTask.dst_shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dst_shard(), target);
  }

  // bool auto_clean = 6;
  if (this->auto_clean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_clean(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BalanceTask)
  return target;
}

size_t BalanceTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BalanceTask)
  size_t total_size = 0;

  // repeated int32 chunk_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string cluster_id = 1;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string src_shard = 4;
  if (this->src_shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_shard());
  }

  // string dst_shard = 5;
  if (this->dst_shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_shard());
  }

  // bool auto_clean = 6;
  if (this->auto_clean() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BalanceTask)
  GOOGLE_DCHECK_NE(&from, this);
  const BalanceTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalanceTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BalanceTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BalanceTask)
    MergeFrom(*source);
  }
}

void BalanceTask::MergeFrom(const BalanceTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BalanceTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.src_shard().size() > 0) {

    src_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_shard_);
  }
  if (from.dst_shard().size() > 0) {

    dst_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_shard_);
  }
  if (from.auto_clean() != 0) {
    set_auto_clean(from.auto_clean());
  }
}

void BalanceTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BalanceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceTask::CopyFrom(const BalanceTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BalanceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceTask::IsInitialized() const {
  return true;
}

void BalanceTask::Swap(BalanceTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalanceTask::InternalSwap(BalanceTask* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  cluster_id_.Swap(&other->cluster_id_);
  ns_.Swap(&other->ns_);
  src_shard_.Swap(&other->src_shard_);
  dst_shard_.Swap(&other->dst_shard_);
  std::swap(auto_clean_, other->auto_clean_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalanceTask::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[121];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalanceTask

// string cluster_id = 1;
void BalanceTask::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BalanceTask::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.cluster_id)
  return cluster_id_.GetNoArena();
}
void BalanceTask::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.cluster_id)
}
#if LANG_CXX11
void BalanceTask::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BalanceTask.cluster_id)
}
#endif
void BalanceTask::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BalanceTask.cluster_id)
}
void BalanceTask::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BalanceTask.cluster_id)
}
::std::string* BalanceTask::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceTask.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BalanceTask::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceTask.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BalanceTask::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceTask.cluster_id)
}

// string ns = 2;
void BalanceTask::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BalanceTask::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.ns)
  return ns_.GetNoArena();
}
void BalanceTask::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.ns)
}
#if LANG_CXX11
void BalanceTask::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BalanceTask.ns)
}
#endif
void BalanceTask::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BalanceTask.ns)
}
void BalanceTask::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BalanceTask.ns)
}
::std::string* BalanceTask::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceTask.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BalanceTask::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceTask.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BalanceTask::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceTask.ns)
}

// repeated int32 chunk_list = 3;
int BalanceTask::chunk_list_size() const {
  return chunk_list_.size();
}
void BalanceTask::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 BalanceTask::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.chunk_list)
  return chunk_list_.Get(index);
}
void BalanceTask::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.chunk_list)
}
void BalanceTask::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.BalanceTask.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BalanceTask::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.BalanceTask.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BalanceTask::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.BalanceTask.chunk_list)
  return &chunk_list_;
}

// string src_shard = 4;
void BalanceTask::clear_src_shard() {
  src_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BalanceTask::src_shard() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.src_shard)
  return src_shard_.GetNoArena();
}
void BalanceTask::set_src_shard(const ::std::string& value) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.src_shard)
}
#if LANG_CXX11
void BalanceTask::set_src_shard(::std::string&& value) {
  
  src_shard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BalanceTask.src_shard)
}
#endif
void BalanceTask::set_src_shard(const char* value) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BalanceTask.src_shard)
}
void BalanceTask::set_src_shard(const char* value, size_t size) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BalanceTask.src_shard)
}
::std::string* BalanceTask::mutable_src_shard() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceTask.src_shard)
  return src_shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BalanceTask::release_src_shard() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceTask.src_shard)
  
  return src_shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BalanceTask::set_allocated_src_shard(::std::string* src_shard) {
  if (src_shard != NULL) {
    
  } else {
    
  }
  src_shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_shard);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceTask.src_shard)
}

// string dst_shard = 5;
void BalanceTask::clear_dst_shard() {
  dst_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BalanceTask::dst_shard() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.dst_shard)
  return dst_shard_.GetNoArena();
}
void BalanceTask::set_dst_shard(const ::std::string& value) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.dst_shard)
}
#if LANG_CXX11
void BalanceTask::set_dst_shard(::std::string&& value) {
  
  dst_shard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BalanceTask.dst_shard)
}
#endif
void BalanceTask::set_dst_shard(const char* value) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BalanceTask.dst_shard)
}
void BalanceTask::set_dst_shard(const char* value, size_t size) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BalanceTask.dst_shard)
}
::std::string* BalanceTask::mutable_dst_shard() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceTask.dst_shard)
  return dst_shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BalanceTask::release_dst_shard() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceTask.dst_shard)
  
  return dst_shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BalanceTask::set_allocated_dst_shard(::std::string* dst_shard) {
  if (dst_shard != NULL) {
    
  } else {
    
  }
  dst_shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_shard);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceTask.dst_shard)
}

// bool auto_clean = 6;
void BalanceTask::clear_auto_clean() {
  auto_clean_ = false;
}
bool BalanceTask::auto_clean() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceTask.auto_clean)
  return auto_clean_;
}
void BalanceTask::set_auto_clean(bool value) {
  
  auto_clean_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BalanceTask.auto_clean)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenBalanceTaskRsp::kHeaderFieldNumber;
const int GenBalanceTaskRsp::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenBalanceTaskRsp::GenBalanceTaskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GenBalanceTaskRsp)
}
GenBalanceTaskRsp::GenBalanceTaskRsp(const GenBalanceTaskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GenBalanceTaskRsp)
}

void GenBalanceTaskRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GenBalanceTaskRsp::~GenBalanceTaskRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GenBalanceTaskRsp)
  SharedDtor();
}

void GenBalanceTaskRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GenBalanceTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenBalanceTaskRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[122].descriptor;
}

const GenBalanceTaskRsp& GenBalanceTaskRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenBalanceTaskRsp* GenBalanceTaskRsp::New(::google::protobuf::Arena* arena) const {
  GenBalanceTaskRsp* n = new GenBalanceTaskRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenBalanceTaskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GenBalanceTaskRsp)
  tasks_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GenBalanceTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GenBalanceTaskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.BalanceTask tasks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GenBalanceTaskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GenBalanceTaskRsp)
  return false;
#undef DO_
}

void GenBalanceTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GenBalanceTaskRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.BalanceTask tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GenBalanceTaskRsp)
}

::google::protobuf::uint8* GenBalanceTaskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GenBalanceTaskRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.BalanceTask tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tasks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GenBalanceTaskRsp)
  return target;
}

size_t GenBalanceTaskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GenBalanceTaskRsp)
  size_t total_size = 0;

  // repeated .masterproto.BalanceTask tasks = 2;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenBalanceTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GenBalanceTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GenBalanceTaskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenBalanceTaskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GenBalanceTaskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GenBalanceTaskRsp)
    MergeFrom(*source);
  }
}

void GenBalanceTaskRsp::MergeFrom(const GenBalanceTaskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GenBalanceTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tasks_.MergeFrom(from.tasks_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GenBalanceTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GenBalanceTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenBalanceTaskRsp::CopyFrom(const GenBalanceTaskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GenBalanceTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenBalanceTaskRsp::IsInitialized() const {
  return true;
}

void GenBalanceTaskRsp::Swap(GenBalanceTaskRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenBalanceTaskRsp::InternalSwap(GenBalanceTaskRsp* other) {
  tasks_.UnsafeArenaSwap(&other->tasks_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenBalanceTaskRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[122];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenBalanceTaskRsp

// .cmongoproto.ResHeader header = 1;
bool GenBalanceTaskRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GenBalanceTaskRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GenBalanceTaskRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GenBalanceTaskRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GenBalanceTaskRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GenBalanceTaskRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GenBalanceTaskRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GenBalanceTaskRsp.header)
}

// repeated .masterproto.BalanceTask tasks = 2;
int GenBalanceTaskRsp::tasks_size() const {
  return tasks_.size();
}
void GenBalanceTaskRsp::clear_tasks() {
  tasks_.Clear();
}
const ::masterproto::BalanceTask& GenBalanceTaskRsp::tasks(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GenBalanceTaskRsp.tasks)
  return tasks_.Get(index);
}
::masterproto::BalanceTask* GenBalanceTaskRsp::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GenBalanceTaskRsp.tasks)
  return tasks_.Mutable(index);
}
::masterproto::BalanceTask* GenBalanceTaskRsp::add_tasks() {
  // @@protoc_insertion_point(field_add:masterproto.GenBalanceTaskRsp.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::BalanceTask >*
GenBalanceTaskRsp::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GenBalanceTaskRsp.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::BalanceTask >&
GenBalanceTaskRsp::tasks() const {
  // @@protoc_insertion_point(field_list:masterproto.GenBalanceTaskRsp.tasks)
  return tasks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalanceReq::kHeaderFieldNumber;
const int BalanceReq::kTasksFieldNumber;
const int BalanceReq::kCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalanceReq::BalanceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BalanceReq)
}
BalanceReq::BalanceReq(const BalanceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator().size() > 0) {
    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.BalanceReq)
}

void BalanceReq::SharedCtor() {
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

BalanceReq::~BalanceReq() {
  // @@protoc_insertion_point(destructor:masterproto.BalanceReq)
  SharedDtor();
}

void BalanceReq::SharedDtor() {
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BalanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[123].descriptor;
}

const BalanceReq& BalanceReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalanceReq* BalanceReq::New(::google::protobuf::Arena* arena) const {
  BalanceReq* n = new BalanceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalanceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BalanceReq)
  tasks_.Clear();
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool BalanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BalanceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.BalanceTask tasks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string creator = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.BalanceReq.creator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BalanceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BalanceReq)
  return false;
#undef DO_
}

void BalanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BalanceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.BalanceTask tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  // string creator = 3;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceReq.creator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BalanceReq)
}

::google::protobuf::uint8* BalanceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BalanceReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.BalanceTask tasks = 2;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tasks(i), false, target);
  }

  // string creator = 3;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.BalanceReq.creator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BalanceReq)
  return target;
}

size_t BalanceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BalanceReq)
  size_t total_size = 0;

  // repeated .masterproto.BalanceTask tasks = 2;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  // string creator = 3;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BalanceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BalanceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalanceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BalanceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BalanceReq)
    MergeFrom(*source);
  }
}

void BalanceReq::MergeFrom(const BalanceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BalanceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tasks_.MergeFrom(from.tasks_);
  if (from.creator().size() > 0) {

    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void BalanceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BalanceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceReq::CopyFrom(const BalanceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BalanceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceReq::IsInitialized() const {
  return true;
}

void BalanceReq::Swap(BalanceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalanceReq::InternalSwap(BalanceReq* other) {
  tasks_.UnsafeArenaSwap(&other->tasks_);
  creator_.Swap(&other->creator_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalanceReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[123];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalanceReq

// .cmongoproto.ReqHeader header = 1;
bool BalanceReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BalanceReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& BalanceReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* BalanceReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceReq.header)
  return header_;
}
::cmongoproto::ReqHeader* BalanceReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BalanceReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceReq.header)
}

// repeated .masterproto.BalanceTask tasks = 2;
int BalanceReq::tasks_size() const {
  return tasks_.size();
}
void BalanceReq::clear_tasks() {
  tasks_.Clear();
}
const ::masterproto::BalanceTask& BalanceReq::tasks(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceReq.tasks)
  return tasks_.Get(index);
}
::masterproto::BalanceTask* BalanceReq::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceReq.tasks)
  return tasks_.Mutable(index);
}
::masterproto::BalanceTask* BalanceReq::add_tasks() {
  // @@protoc_insertion_point(field_add:masterproto.BalanceReq.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::BalanceTask >*
BalanceReq::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.BalanceReq.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::BalanceTask >&
BalanceReq::tasks() const {
  // @@protoc_insertion_point(field_list:masterproto.BalanceReq.tasks)
  return tasks_;
}

// string creator = 3;
void BalanceReq::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BalanceReq::creator() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceReq.creator)
  return creator_.GetNoArena();
}
void BalanceReq::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.BalanceReq.creator)
}
#if LANG_CXX11
void BalanceReq::set_creator(::std::string&& value) {
  
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.BalanceReq.creator)
}
#endif
void BalanceReq::set_creator(const char* value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.BalanceReq.creator)
}
void BalanceReq::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.BalanceReq.creator)
}
::std::string* BalanceReq::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceReq.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BalanceReq::release_creator() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceReq.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BalanceReq::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceReq.creator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalanceRsp::kHeaderFieldNumber;
const int BalanceRsp::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalanceRsp::BalanceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.BalanceRsp)
}
BalanceRsp::BalanceRsp(const BalanceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.BalanceRsp)
}

void BalanceRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(task_id_));
  _cached_size_ = 0;
}

BalanceRsp::~BalanceRsp() {
  // @@protoc_insertion_point(destructor:masterproto.BalanceRsp)
  SharedDtor();
}

void BalanceRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void BalanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[124].descriptor;
}

const BalanceRsp& BalanceRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalanceRsp* BalanceRsp::New(::google::protobuf::Arena* arena) const {
  BalanceRsp* n = new BalanceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalanceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.BalanceRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
}

bool BalanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.BalanceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 task_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.BalanceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.BalanceRsp)
  return false;
#undef DO_
}

void BalanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.BalanceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->task_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.BalanceRsp)
}

::google::protobuf::uint8* BalanceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.BalanceRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->task_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.BalanceRsp)
  return target;
}

size_t BalanceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.BalanceRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.BalanceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BalanceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalanceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.BalanceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.BalanceRsp)
    MergeFrom(*source);
  }
}

void BalanceRsp::MergeFrom(const BalanceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.BalanceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void BalanceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.BalanceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceRsp::CopyFrom(const BalanceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.BalanceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceRsp::IsInitialized() const {
  return true;
}

void BalanceRsp::Swap(BalanceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalanceRsp::InternalSwap(BalanceRsp* other) {
  std::swap(header_, other->header_);
  std::swap(task_id_, other->task_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalanceRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[124];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalanceRsp

// .cmongoproto.ResHeader header = 1;
bool BalanceRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BalanceRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& BalanceRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* BalanceRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.BalanceRsp.header)
  return header_;
}
::cmongoproto::ResHeader* BalanceRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.BalanceRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BalanceRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.BalanceRsp.header)
}

// uint64 task_id = 2;
void BalanceRsp::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BalanceRsp::task_id() const {
  // @@protoc_insertion_point(field_get:masterproto.BalanceRsp.task_id)
  return task_id_;
}
void BalanceRsp::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.BalanceRsp.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeRouteStateReq::kHeaderFieldNumber;
const int ChangeRouteStateReq::kClusterIdFieldNumber;
const int ChangeRouteStateReq::kDbNameFieldNumber;
const int ChangeRouteStateReq::kTableNameFieldNumber;
const int ChangeRouteStateReq::kChunkListFieldNumber;
const int ChangeRouteStateReq::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRouteStateReq::ChangeRouteStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChangeRouteStateReq)
}
ChangeRouteStateReq::ChangeRouteStateReq(const ChangeRouteStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:masterproto.ChangeRouteStateReq)
}

void ChangeRouteStateReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&header_) + sizeof(state_));
  _cached_size_ = 0;
}

ChangeRouteStateReq::~ChangeRouteStateReq() {
  // @@protoc_insertion_point(destructor:masterproto.ChangeRouteStateReq)
  SharedDtor();
}

void ChangeRouteStateReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChangeRouteStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRouteStateReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[125].descriptor;
}

const ChangeRouteStateReq& ChangeRouteStateReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRouteStateReq* ChangeRouteStateReq::New(::google::protobuf::Arena* arena) const {
  ChangeRouteStateReq* n = new ChangeRouteStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRouteStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChangeRouteStateReq)
  chunk_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  state_ = 0;
}

bool ChangeRouteStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChangeRouteStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteStateReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteStateReq.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteStateReq.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChangeRouteStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChangeRouteStateReq)
  return false;
#undef DO_
}

void ChangeRouteStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChangeRouteStateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->table_name(), output);
  }

  // repeated int32 chunk_list = 5;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChangeRouteStateReq)
}

::google::protobuf::uint8* ChangeRouteStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChangeRouteStateReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteStateReq.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->table_name(), target);
  }

  // repeated int32 chunk_list = 5;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChangeRouteStateReq)
  return target;
}

size_t ChangeRouteStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChangeRouteStateReq)
  size_t total_size = 0;

  // repeated int32 chunk_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRouteStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChangeRouteStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRouteStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRouteStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChangeRouteStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChangeRouteStateReq)
    MergeFrom(*source);
  }
}

void ChangeRouteStateReq::MergeFrom(const ChangeRouteStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChangeRouteStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ChangeRouteStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChangeRouteStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRouteStateReq::CopyFrom(const ChangeRouteStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChangeRouteStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRouteStateReq::IsInitialized() const {
  return true;
}

void ChangeRouteStateReq::Swap(ChangeRouteStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRouteStateReq::InternalSwap(ChangeRouteStateReq* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  cluster_id_.Swap(&other->cluster_id_);
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  std::swap(header_, other->header_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRouteStateReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[125];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRouteStateReq

// .cmongoproto.ReqHeader header = 1;
bool ChangeRouteStateReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChangeRouteStateReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ChangeRouteStateReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ChangeRouteStateReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteStateReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ChangeRouteStateReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteStateReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChangeRouteStateReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteStateReq.header)
}

// string cluster_id = 2;
void ChangeRouteStateReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteStateReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ChangeRouteStateReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteStateReq.cluster_id)
}
#if LANG_CXX11
void ChangeRouteStateReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteStateReq.cluster_id)
}
#endif
void ChangeRouteStateReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteStateReq.cluster_id)
}
void ChangeRouteStateReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteStateReq.cluster_id)
}
::std::string* ChangeRouteStateReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteStateReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteStateReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteStateReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteStateReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteStateReq.cluster_id)
}

// string db_name = 3;
void ChangeRouteStateReq::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteStateReq::db_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.db_name)
  return db_name_.GetNoArena();
}
void ChangeRouteStateReq::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteStateReq.db_name)
}
#if LANG_CXX11
void ChangeRouteStateReq::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteStateReq.db_name)
}
#endif
void ChangeRouteStateReq::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteStateReq.db_name)
}
void ChangeRouteStateReq::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteStateReq.db_name)
}
::std::string* ChangeRouteStateReq::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteStateReq.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteStateReq::release_db_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteStateReq.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteStateReq::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteStateReq.db_name)
}

// string table_name = 4;
void ChangeRouteStateReq::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteStateReq::table_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.table_name)
  return table_name_.GetNoArena();
}
void ChangeRouteStateReq::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteStateReq.table_name)
}
#if LANG_CXX11
void ChangeRouteStateReq::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteStateReq.table_name)
}
#endif
void ChangeRouteStateReq::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteStateReq.table_name)
}
void ChangeRouteStateReq::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteStateReq.table_name)
}
::std::string* ChangeRouteStateReq::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteStateReq.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteStateReq::release_table_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteStateReq.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteStateReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteStateReq.table_name)
}

// repeated int32 chunk_list = 5;
int ChangeRouteStateReq::chunk_list_size() const {
  return chunk_list_.size();
}
void ChangeRouteStateReq::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 ChangeRouteStateReq::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.chunk_list)
  return chunk_list_.Get(index);
}
void ChangeRouteStateReq::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteStateReq.chunk_list)
}
void ChangeRouteStateReq::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.ChangeRouteStateReq.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChangeRouteStateReq::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ChangeRouteStateReq.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChangeRouteStateReq::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ChangeRouteStateReq.chunk_list)
  return &chunk_list_;
}

// int32 state = 6;
void ChangeRouteStateReq::clear_state() {
  state_ = 0;
}
::google::protobuf::int32 ChangeRouteStateReq::state() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateReq.state)
  return state_;
}
void ChangeRouteStateReq::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteStateReq.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeRouteStateRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRouteStateRsp::ChangeRouteStateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChangeRouteStateRsp)
}
ChangeRouteStateRsp::ChangeRouteStateRsp(const ChangeRouteStateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ChangeRouteStateRsp)
}

void ChangeRouteStateRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ChangeRouteStateRsp::~ChangeRouteStateRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ChangeRouteStateRsp)
  SharedDtor();
}

void ChangeRouteStateRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChangeRouteStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRouteStateRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[126].descriptor;
}

const ChangeRouteStateRsp& ChangeRouteStateRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRouteStateRsp* ChangeRouteStateRsp::New(::google::protobuf::Arena* arena) const {
  ChangeRouteStateRsp* n = new ChangeRouteStateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRouteStateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChangeRouteStateRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ChangeRouteStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChangeRouteStateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChangeRouteStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChangeRouteStateRsp)
  return false;
#undef DO_
}

void ChangeRouteStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChangeRouteStateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChangeRouteStateRsp)
}

::google::protobuf::uint8* ChangeRouteStateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChangeRouteStateRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChangeRouteStateRsp)
  return target;
}

size_t ChangeRouteStateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChangeRouteStateRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRouteStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChangeRouteStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRouteStateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRouteStateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChangeRouteStateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChangeRouteStateRsp)
    MergeFrom(*source);
  }
}

void ChangeRouteStateRsp::MergeFrom(const ChangeRouteStateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChangeRouteStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ChangeRouteStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChangeRouteStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRouteStateRsp::CopyFrom(const ChangeRouteStateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChangeRouteStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRouteStateRsp::IsInitialized() const {
  return true;
}

void ChangeRouteStateRsp::Swap(ChangeRouteStateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRouteStateRsp::InternalSwap(ChangeRouteStateRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRouteStateRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[126];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRouteStateRsp

// .cmongoproto.ResHeader header = 1;
bool ChangeRouteStateRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChangeRouteStateRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ChangeRouteStateRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteStateRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ChangeRouteStateRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteStateRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ChangeRouteStateRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteStateRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChangeRouteStateRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteStateRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeRouteRsReq::kHeaderFieldNumber;
const int ChangeRouteRsReq::kClusterIdFieldNumber;
const int ChangeRouteRsReq::kDbNameFieldNumber;
const int ChangeRouteRsReq::kTableNameFieldNumber;
const int ChangeRouteRsReq::kChunkListFieldNumber;
const int ChangeRouteRsReq::kSourceRsNameFieldNumber;
const int ChangeRouteRsReq::kDestRsNameFieldNumber;
const int ChangeRouteRsReq::kStateFieldNumber;
const int ChangeRouteRsReq::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRouteRsReq::ChangeRouteRsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChangeRouteRsReq)
}
ChangeRouteRsReq::ChangeRouteRsReq(const ChangeRouteRsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  source_rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_rs_name().size() > 0) {
    source_rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_rs_name_);
  }
  dest_rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_rs_name().size() > 0) {
    dest_rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_rs_name_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:masterproto.ChangeRouteRsReq)
}

void ChangeRouteRsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_rs_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&header_) + sizeof(state_));
  _cached_size_ = 0;
}

ChangeRouteRsReq::~ChangeRouteRsReq() {
  // @@protoc_insertion_point(destructor:masterproto.ChangeRouteRsReq)
  SharedDtor();
}

void ChangeRouteRsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_rs_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChangeRouteRsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRouteRsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[127].descriptor;
}

const ChangeRouteRsReq& ChangeRouteRsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRouteRsReq* ChangeRouteRsReq::New(::google::protobuf::Arena* arena) const {
  ChangeRouteRsReq* n = new ChangeRouteRsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRouteRsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChangeRouteRsReq)
  chunk_list_.Clear();
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  state_ = 0;
}

bool ChangeRouteRsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChangeRouteRsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_rs_name = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_rs_name().data(), this->source_rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.source_rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_rs_name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_rs_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_rs_name().data(), this->dest_rs_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.dest_rs_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ChangeRouteRsReq.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChangeRouteRsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChangeRouteRsReq)
  return false;
#undef DO_
}

void ChangeRouteRsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChangeRouteRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_name(), output);
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->table_name(), output);
  }

  // repeated int32 chunk_list = 5;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // string source_rs_name = 6;
  if (this->source_rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_rs_name().data(), this->source_rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.source_rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->source_rs_name(), output);
  }

  // string dest_rs_name = 7;
  if (this->dest_rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_rs_name().data(), this->dest_rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.dest_rs_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dest_rs_name(), output);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // string session_id = 9;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->session_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChangeRouteRsReq)
}

::google::protobuf::uint8* ChangeRouteRsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChangeRouteRsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->table_name(), target);
  }

  // repeated int32 chunk_list = 5;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // string source_rs_name = 6;
  if (this->source_rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_rs_name().data(), this->source_rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.source_rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->source_rs_name(), target);
  }

  // string dest_rs_name = 7;
  if (this->dest_rs_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_rs_name().data(), this->dest_rs_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.dest_rs_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dest_rs_name(), target);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // string session_id = 9;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ChangeRouteRsReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->session_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChangeRouteRsReq)
  return target;
}

size_t ChangeRouteRsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChangeRouteRsReq)
  size_t total_size = 0;

  // repeated int32 chunk_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string db_name = 3;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 4;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // string source_rs_name = 6;
  if (this->source_rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_rs_name());
  }

  // string dest_rs_name = 7;
  if (this->dest_rs_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_rs_name());
  }

  // string session_id = 9;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRouteRsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChangeRouteRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRouteRsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRouteRsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChangeRouteRsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChangeRouteRsReq)
    MergeFrom(*source);
  }
}

void ChangeRouteRsReq::MergeFrom(const ChangeRouteRsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChangeRouteRsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.source_rs_name().size() > 0) {

    source_rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_rs_name_);
  }
  if (from.dest_rs_name().size() > 0) {

    dest_rs_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_rs_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ChangeRouteRsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChangeRouteRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRouteRsReq::CopyFrom(const ChangeRouteRsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChangeRouteRsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRouteRsReq::IsInitialized() const {
  return true;
}

void ChangeRouteRsReq::Swap(ChangeRouteRsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRouteRsReq::InternalSwap(ChangeRouteRsReq* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  cluster_id_.Swap(&other->cluster_id_);
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  source_rs_name_.Swap(&other->source_rs_name_);
  dest_rs_name_.Swap(&other->dest_rs_name_);
  session_id_.Swap(&other->session_id_);
  std::swap(header_, other->header_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRouteRsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[127];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRouteRsReq

// .cmongoproto.ReqHeader header = 1;
bool ChangeRouteRsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChangeRouteRsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ChangeRouteRsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ChangeRouteRsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ChangeRouteRsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChangeRouteRsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.header)
}

// string cluster_id = 2;
void ChangeRouteRsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ChangeRouteRsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.cluster_id)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.cluster_id)
}
#endif
void ChangeRouteRsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.cluster_id)
}
void ChangeRouteRsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.cluster_id)
}
::std::string* ChangeRouteRsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.cluster_id)
}

// string db_name = 3;
void ChangeRouteRsReq::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::db_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.db_name)
  return db_name_.GetNoArena();
}
void ChangeRouteRsReq::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.db_name)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.db_name)
}
#endif
void ChangeRouteRsReq::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.db_name)
}
void ChangeRouteRsReq::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.db_name)
}
::std::string* ChangeRouteRsReq::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_db_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.db_name)
}

// string table_name = 4;
void ChangeRouteRsReq::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::table_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.table_name)
  return table_name_.GetNoArena();
}
void ChangeRouteRsReq::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.table_name)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.table_name)
}
#endif
void ChangeRouteRsReq::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.table_name)
}
void ChangeRouteRsReq::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.table_name)
}
::std::string* ChangeRouteRsReq::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_table_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.table_name)
}

// repeated int32 chunk_list = 5;
int ChangeRouteRsReq::chunk_list_size() const {
  return chunk_list_.size();
}
void ChangeRouteRsReq::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 ChangeRouteRsReq::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.chunk_list)
  return chunk_list_.Get(index);
}
void ChangeRouteRsReq::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.chunk_list)
}
void ChangeRouteRsReq::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.ChangeRouteRsReq.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChangeRouteRsReq::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.ChangeRouteRsReq.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChangeRouteRsReq::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.ChangeRouteRsReq.chunk_list)
  return &chunk_list_;
}

// string source_rs_name = 6;
void ChangeRouteRsReq::clear_source_rs_name() {
  source_rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::source_rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.source_rs_name)
  return source_rs_name_.GetNoArena();
}
void ChangeRouteRsReq::set_source_rs_name(const ::std::string& value) {
  
  source_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.source_rs_name)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_source_rs_name(::std::string&& value) {
  
  source_rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.source_rs_name)
}
#endif
void ChangeRouteRsReq::set_source_rs_name(const char* value) {
  
  source_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.source_rs_name)
}
void ChangeRouteRsReq::set_source_rs_name(const char* value, size_t size) {
  
  source_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.source_rs_name)
}
::std::string* ChangeRouteRsReq::mutable_source_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.source_rs_name)
  return source_rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_source_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.source_rs_name)
  
  return source_rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_source_rs_name(::std::string* source_rs_name) {
  if (source_rs_name != NULL) {
    
  } else {
    
  }
  source_rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.source_rs_name)
}

// string dest_rs_name = 7;
void ChangeRouteRsReq::clear_dest_rs_name() {
  dest_rs_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::dest_rs_name() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.dest_rs_name)
  return dest_rs_name_.GetNoArena();
}
void ChangeRouteRsReq::set_dest_rs_name(const ::std::string& value) {
  
  dest_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.dest_rs_name)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_dest_rs_name(::std::string&& value) {
  
  dest_rs_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.dest_rs_name)
}
#endif
void ChangeRouteRsReq::set_dest_rs_name(const char* value) {
  
  dest_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.dest_rs_name)
}
void ChangeRouteRsReq::set_dest_rs_name(const char* value, size_t size) {
  
  dest_rs_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.dest_rs_name)
}
::std::string* ChangeRouteRsReq::mutable_dest_rs_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.dest_rs_name)
  return dest_rs_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_dest_rs_name() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.dest_rs_name)
  
  return dest_rs_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_dest_rs_name(::std::string* dest_rs_name) {
  if (dest_rs_name != NULL) {
    
  } else {
    
  }
  dest_rs_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_rs_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.dest_rs_name)
}

// int32 state = 8;
void ChangeRouteRsReq::clear_state() {
  state_ = 0;
}
::google::protobuf::int32 ChangeRouteRsReq::state() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.state)
  return state_;
}
void ChangeRouteRsReq::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.state)
}

// string session_id = 9;
void ChangeRouteRsReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeRouteRsReq::session_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsReq.session_id)
  return session_id_.GetNoArena();
}
void ChangeRouteRsReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ChangeRouteRsReq.session_id)
}
#if LANG_CXX11
void ChangeRouteRsReq::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ChangeRouteRsReq.session_id)
}
#endif
void ChangeRouteRsReq::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ChangeRouteRsReq.session_id)
}
void ChangeRouteRsReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ChangeRouteRsReq.session_id)
}
::std::string* ChangeRouteRsReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeRouteRsReq::release_session_id() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsReq.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeRouteRsReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsReq.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeRouteRsRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeRouteRsRsp::ChangeRouteRsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ChangeRouteRsRsp)
}
ChangeRouteRsRsp::ChangeRouteRsRsp(const ChangeRouteRsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ChangeRouteRsRsp)
}

void ChangeRouteRsRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ChangeRouteRsRsp::~ChangeRouteRsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ChangeRouteRsRsp)
  SharedDtor();
}

void ChangeRouteRsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ChangeRouteRsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRouteRsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[128].descriptor;
}

const ChangeRouteRsRsp& ChangeRouteRsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeRouteRsRsp* ChangeRouteRsRsp::New(::google::protobuf::Arena* arena) const {
  ChangeRouteRsRsp* n = new ChangeRouteRsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeRouteRsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ChangeRouteRsRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ChangeRouteRsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ChangeRouteRsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ChangeRouteRsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ChangeRouteRsRsp)
  return false;
#undef DO_
}

void ChangeRouteRsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ChangeRouteRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ChangeRouteRsRsp)
}

::google::protobuf::uint8* ChangeRouteRsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ChangeRouteRsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ChangeRouteRsRsp)
  return target;
}

size_t ChangeRouteRsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ChangeRouteRsRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRouteRsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ChangeRouteRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRouteRsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeRouteRsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ChangeRouteRsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ChangeRouteRsRsp)
    MergeFrom(*source);
  }
}

void ChangeRouteRsRsp::MergeFrom(const ChangeRouteRsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ChangeRouteRsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ChangeRouteRsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ChangeRouteRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRouteRsRsp::CopyFrom(const ChangeRouteRsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ChangeRouteRsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRouteRsRsp::IsInitialized() const {
  return true;
}

void ChangeRouteRsRsp::Swap(ChangeRouteRsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeRouteRsRsp::InternalSwap(ChangeRouteRsRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeRouteRsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[128];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeRouteRsRsp

// .cmongoproto.ResHeader header = 1;
bool ChangeRouteRsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ChangeRouteRsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ChangeRouteRsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ChangeRouteRsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ChangeRouteRsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ChangeRouteRsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ChangeRouteRsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ChangeRouteRsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ChangeRouteRsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ChangeRouteRsRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRoutesReq::kHeaderFieldNumber;
const int GetClusterRoutesReq::kClusterIdFieldNumber;
const int GetClusterRoutesReq::kTimeNanoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRoutesReq::GetClusterRoutesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterRoutesReq)
}
GetClusterRoutesReq::GetClusterRoutesReq(const GetClusterRoutesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  time_nano_ = from.time_nano_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterRoutesReq)
}

void GetClusterRoutesReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&time_nano_) -
    reinterpret_cast<char*>(&header_) + sizeof(time_nano_));
  _cached_size_ = 0;
}

GetClusterRoutesReq::~GetClusterRoutesReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterRoutesReq)
  SharedDtor();
}

void GetClusterRoutesReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterRoutesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRoutesReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[129].descriptor;
}

const GetClusterRoutesReq& GetClusterRoutesReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRoutesReq* GetClusterRoutesReq::New(::google::protobuf::Arena* arena) const {
  GetClusterRoutesReq* n = new GetClusterRoutesReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRoutesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterRoutesReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  time_nano_ = GOOGLE_LONGLONG(0);
}

bool GetClusterRoutesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterRoutesReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetClusterRoutesReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_nano = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterRoutesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterRoutesReq)
  return false;
#undef DO_
}

void GetClusterRoutesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterRoutesReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterRoutesReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_nano(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterRoutesReq)
}

::google::protobuf::uint8* GetClusterRoutesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterRoutesReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterRoutesReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_nano(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterRoutesReq)
  return target;
}

size_t GetClusterRoutesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterRoutesReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_nano());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRoutesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterRoutesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRoutesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRoutesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterRoutesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterRoutesReq)
    MergeFrom(*source);
  }
}

void GetClusterRoutesReq::MergeFrom(const GetClusterRoutesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterRoutesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.time_nano() != 0) {
    set_time_nano(from.time_nano());
  }
}

void GetClusterRoutesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterRoutesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRoutesReq::CopyFrom(const GetClusterRoutesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterRoutesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRoutesReq::IsInitialized() const {
  return true;
}

void GetClusterRoutesReq::Swap(GetClusterRoutesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRoutesReq::InternalSwap(GetClusterRoutesReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(time_nano_, other->time_nano_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRoutesReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[129];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRoutesReq

// .cmongoproto.ReqHeader header = 1;
bool GetClusterRoutesReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterRoutesReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetClusterRoutesReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetClusterRoutesReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetClusterRoutesReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterRoutesReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesReq.header)
}

// string cluster_id = 2;
void GetClusterRoutesReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRoutesReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterRoutesReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetClusterRoutesReq.cluster_id)
}
#if LANG_CXX11
void GetClusterRoutesReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetClusterRoutesReq.cluster_id)
}
#endif
void GetClusterRoutesReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetClusterRoutesReq.cluster_id)
}
void GetClusterRoutesReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetClusterRoutesReq.cluster_id)
}
::std::string* GetClusterRoutesReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRoutesReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRoutesReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesReq.cluster_id)
}

// int64 time_nano = 3;
void GetClusterRoutesReq::clear_time_nano() {
  time_nano_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetClusterRoutesReq::time_nano() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesReq.time_nano)
  return time_nano_;
}
void GetClusterRoutesReq::set_time_nano(::google::protobuf::int64 value) {
  
  time_nano_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterRoutesReq.time_nano)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteChunk::kShardNameFieldNumber;
const int RouteChunk::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteChunk::RouteChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RouteChunk)
}
RouteChunk::RouteChunk(const RouteChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shard_name().size() > 0) {
    shard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shard_name_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:masterproto.RouteChunk)
}

void RouteChunk::SharedCtor() {
  shard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _cached_size_ = 0;
}

RouteChunk::~RouteChunk() {
  // @@protoc_insertion_point(destructor:masterproto.RouteChunk)
  SharedDtor();
}

void RouteChunk::SharedDtor() {
  shard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RouteChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteChunk::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[130].descriptor;
}

const RouteChunk& RouteChunk::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteChunk* RouteChunk::New(::google::protobuf::Arena* arena) const {
  RouteChunk* n = new RouteChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RouteChunk)
  shard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

bool RouteChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RouteChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string shard_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_name().data(), this->shard_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RouteChunk.shard_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RouteChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RouteChunk)
  return false;
#undef DO_
}

void RouteChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RouteChunk)
  // string shard_name = 1;
  if (this->shard_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_name().data(), this->shard_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RouteChunk.shard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shard_name(), output);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RouteChunk)
}

::google::protobuf::uint8* RouteChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RouteChunk)
  // string shard_name = 1;
  if (this->shard_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_name().data(), this->shard_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RouteChunk.shard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shard_name(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RouteChunk)
  return target;
}

size_t RouteChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RouteChunk)
  size_t total_size = 0;

  // string shard_name = 1;
  if (this->shard_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shard_name());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RouteChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RouteChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RouteChunk)
    MergeFrom(*source);
  }
}

void RouteChunk::MergeFrom(const RouteChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RouteChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.shard_name().size() > 0) {

    shard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shard_name_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void RouteChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RouteChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteChunk::CopyFrom(const RouteChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RouteChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteChunk::IsInitialized() const {
  return true;
}

void RouteChunk::Swap(RouteChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteChunk::InternalSwap(RouteChunk* other) {
  shard_name_.Swap(&other->shard_name_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteChunk::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[130];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteChunk

// string shard_name = 1;
void RouteChunk::clear_shard_name() {
  shard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteChunk::shard_name() const {
  // @@protoc_insertion_point(field_get:masterproto.RouteChunk.shard_name)
  return shard_name_.GetNoArena();
}
void RouteChunk::set_shard_name(const ::std::string& value) {
  
  shard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RouteChunk.shard_name)
}
#if LANG_CXX11
void RouteChunk::set_shard_name(::std::string&& value) {
  
  shard_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RouteChunk.shard_name)
}
#endif
void RouteChunk::set_shard_name(const char* value) {
  
  shard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RouteChunk.shard_name)
}
void RouteChunk::set_shard_name(const char* value, size_t size) {
  
  shard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RouteChunk.shard_name)
}
::std::string* RouteChunk::mutable_shard_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RouteChunk.shard_name)
  return shard_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteChunk::release_shard_name() {
  // @@protoc_insertion_point(field_release:masterproto.RouteChunk.shard_name)
  
  return shard_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteChunk::set_allocated_shard_name(::std::string* shard_name) {
  if (shard_name != NULL) {
    
  } else {
    
  }
  shard_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shard_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RouteChunk.shard_name)
}

// int32 state = 2;
void RouteChunk::clear_state() {
  state_ = 0;
}
::google::protobuf::int32 RouteChunk::state() const {
  // @@protoc_insertion_point(field_get:masterproto.RouteChunk.state)
  return state_;
}
void RouteChunk::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RouteChunk.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableRoutesRaw::kNsFieldNumber;
const int TableRoutesRaw::kRawRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRoutesRaw::TableRoutesRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.TableRoutesRaw)
}
TableRoutesRaw::TableRoutesRaw(const TableRoutesRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  raw_route_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_route().size() > 0) {
    raw_route_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_route_);
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.TableRoutesRaw)
}

void TableRoutesRaw::SharedCtor() {
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_route_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableRoutesRaw::~TableRoutesRaw() {
  // @@protoc_insertion_point(destructor:masterproto.TableRoutesRaw)
  SharedDtor();
}

void TableRoutesRaw::SharedDtor() {
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_route_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableRoutesRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRoutesRaw::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[131].descriptor;
}

const TableRoutesRaw& TableRoutesRaw::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableRoutesRaw* TableRoutesRaw::New(::google::protobuf::Arena* arena) const {
  TableRoutesRaw* n = new TableRoutesRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableRoutesRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.TableRoutesRaw)
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableRoutesRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.TableRoutesRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ns = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutesRaw.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raw_route = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_route()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raw_route().data(), this->raw_route().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutesRaw.raw_route"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.TableRoutesRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.TableRoutesRaw)
  return false;
#undef DO_
}

void TableRoutesRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.TableRoutesRaw)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutesRaw.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ns(), output);
  }

  // string raw_route = 2;
  if (this->raw_route().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw_route().data(), this->raw_route().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutesRaw.raw_route");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->raw_route(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.TableRoutesRaw)
}

::google::protobuf::uint8* TableRoutesRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.TableRoutesRaw)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutesRaw.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ns(), target);
  }

  // string raw_route = 2;
  if (this->raw_route().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raw_route().data(), this->raw_route().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutesRaw.raw_route");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_route(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.TableRoutesRaw)
  return target;
}

size_t TableRoutesRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.TableRoutesRaw)
  size_t total_size = 0;

  // string ns = 1;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string raw_route = 2;
  if (this->raw_route().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raw_route());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRoutesRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.TableRoutesRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const TableRoutesRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableRoutesRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.TableRoutesRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.TableRoutesRaw)
    MergeFrom(*source);
  }
}

void TableRoutesRaw::MergeFrom(const TableRoutesRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.TableRoutesRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.raw_route().size() > 0) {

    raw_route_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_route_);
  }
}

void TableRoutesRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.TableRoutesRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRoutesRaw::CopyFrom(const TableRoutesRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.TableRoutesRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRoutesRaw::IsInitialized() const {
  return true;
}

void TableRoutesRaw::Swap(TableRoutesRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRoutesRaw::InternalSwap(TableRoutesRaw* other) {
  ns_.Swap(&other->ns_);
  raw_route_.Swap(&other->raw_route_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableRoutesRaw::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[131];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableRoutesRaw

// string ns = 1;
void TableRoutesRaw::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutesRaw::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutesRaw.ns)
  return ns_.GetNoArena();
}
void TableRoutesRaw::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutesRaw.ns)
}
#if LANG_CXX11
void TableRoutesRaw::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutesRaw.ns)
}
#endif
void TableRoutesRaw::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutesRaw.ns)
}
void TableRoutesRaw::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutesRaw.ns)
}
::std::string* TableRoutesRaw::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutesRaw.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutesRaw::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutesRaw.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutesRaw::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutesRaw.ns)
}

// string raw_route = 2;
void TableRoutesRaw::clear_raw_route() {
  raw_route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutesRaw::raw_route() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutesRaw.raw_route)
  return raw_route_.GetNoArena();
}
void TableRoutesRaw::set_raw_route(const ::std::string& value) {
  
  raw_route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutesRaw.raw_route)
}
#if LANG_CXX11
void TableRoutesRaw::set_raw_route(::std::string&& value) {
  
  raw_route_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutesRaw.raw_route)
}
#endif
void TableRoutesRaw::set_raw_route(const char* value) {
  
  raw_route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutesRaw.raw_route)
}
void TableRoutesRaw::set_raw_route(const char* value, size_t size) {
  
  raw_route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutesRaw.raw_route)
}
::std::string* TableRoutesRaw::mutable_raw_route() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutesRaw.raw_route)
  return raw_route_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutesRaw::release_raw_route() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutesRaw.raw_route)
  
  return raw_route_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutesRaw::set_allocated_raw_route(::std::string* raw_route) {
  if (raw_route != NULL) {
    
  } else {
    
  }
  raw_route_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_route);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutesRaw.raw_route)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableRoutes::kNsFieldNumber;
const int TableRoutes::kShardKeyFieldNumber;
const int TableRoutes::kRoutesFieldNumber;
const int TableRoutes::kRouteDataFieldNumber;
const int TableRoutes::kVersionFieldNumber;
const int TableRoutes::kMd5FieldNumber;
const int TableRoutes::kRouteTypeFieldNumber;
const int TableRoutes::kTableTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRoutes::TableRoutes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.TableRoutes)
}
TableRoutes::TableRoutes(const TableRoutes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shard_key_(from.shard_key_),
      routes_(from.routes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  route_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_data().size() > 0) {
    route_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_data_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5().size() > 0) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  route_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_type().size() > 0) {
    route_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_type_);
  }
  table_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_type().size() > 0) {
    table_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_type_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:masterproto.TableRoutes)
}

void TableRoutes::SharedCtor() {
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  _cached_size_ = 0;
}

TableRoutes::~TableRoutes() {
  // @@protoc_insertion_point(destructor:masterproto.TableRoutes)
  SharedDtor();
}

void TableRoutes::SharedDtor() {
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRoutes::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[132].descriptor;
}

const TableRoutes& TableRoutes::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableRoutes* TableRoutes::New(::google::protobuf::Arena* arena) const {
  TableRoutes* n = new TableRoutes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.TableRoutes)
  shard_key_.Clear();
  routes_.Clear();
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

bool TableRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.TableRoutes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ns = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shard_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shard_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shard_key(this->shard_key_size() - 1).data(),
            this->shard_key(this->shard_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.shard_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.RouteChunk routes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string route_data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_data().data(), this->route_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.route_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5 = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.md5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_type = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_type().data(), this->route_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.route_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_type = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_type().data(), this->table_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.TableRoutes.table_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.TableRoutes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.TableRoutes)
  return false;
#undef DO_
}

void TableRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.TableRoutes)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ns(), output);
  }

  // repeated string shard_key = 2;
  for (int i = 0; i < this->shard_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_key(i).data(), this->shard_key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.shard_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shard_key(i), output);
  }

  // repeated .masterproto.RouteChunk routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(i), output);
  }

  // string route_data = 4;
  if (this->route_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_data().data(), this->route_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.route_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->route_data(), output);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // string md5 = 6;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->md5(), output);
  }

  // string route_type = 7;
  if (this->route_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_type().data(), this->route_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.route_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->route_type(), output);
  }

  // string table_type = 8;
  if (this->table_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_type().data(), this->table_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.table_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->table_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.TableRoutes)
}

::google::protobuf::uint8* TableRoutes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.TableRoutes)
  // string ns = 1;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ns(), target);
  }

  // repeated string shard_key = 2;
  for (int i = 0; i < this->shard_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shard_key(i).data(), this->shard_key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.shard_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->shard_key(i), target);
  }

  // repeated .masterproto.RouteChunk routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->routes(i), false, target);
  }

  // string route_data = 4;
  if (this->route_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_data().data(), this->route_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.route_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->route_data(), target);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // string md5 = 6;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->md5(), target);
  }

  // string route_type = 7;
  if (this->route_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_type().data(), this->route_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.route_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->route_type(), target);
  }

  // string table_type = 8;
  if (this->table_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_type().data(), this->table_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.TableRoutes.table_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->table_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.TableRoutes)
  return target;
}

size_t TableRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.TableRoutes)
  size_t total_size = 0;

  // repeated string shard_key = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->shard_key_size());
  for (int i = 0; i < this->shard_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shard_key(i));
  }

  // repeated .masterproto.RouteChunk routes = 3;
  {
    unsigned int count = this->routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(i));
    }
  }

  // string ns = 1;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // string route_data = 4;
  if (this->route_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_data());
  }

  // string md5 = 6;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // string route_type = 7;
  if (this->route_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_type());
  }

  // string table_type = 8;
  if (this->table_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_type());
  }

  // int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRoutes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.TableRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  const TableRoutes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableRoutes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.TableRoutes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.TableRoutes)
    MergeFrom(*source);
  }
}

void TableRoutes::MergeFrom(const TableRoutes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.TableRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shard_key_.MergeFrom(from.shard_key_);
  routes_.MergeFrom(from.routes_);
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.route_data().size() > 0) {

    route_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_data_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.route_type().size() > 0) {

    route_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_type_);
  }
  if (from.table_type().size() > 0) {

    table_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_type_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void TableRoutes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.TableRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRoutes::CopyFrom(const TableRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.TableRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRoutes::IsInitialized() const {
  return true;
}

void TableRoutes::Swap(TableRoutes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRoutes::InternalSwap(TableRoutes* other) {
  shard_key_.UnsafeArenaSwap(&other->shard_key_);
  routes_.UnsafeArenaSwap(&other->routes_);
  ns_.Swap(&other->ns_);
  route_data_.Swap(&other->route_data_);
  md5_.Swap(&other->md5_);
  route_type_.Swap(&other->route_type_);
  table_type_.Swap(&other->table_type_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableRoutes::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[132];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableRoutes

// string ns = 1;
void TableRoutes::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutes::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.ns)
  return ns_.GetNoArena();
}
void TableRoutes::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.ns)
}
#if LANG_CXX11
void TableRoutes::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutes.ns)
}
#endif
void TableRoutes::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.ns)
}
void TableRoutes::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.ns)
}
::std::string* TableRoutes::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutes::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutes.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutes::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutes.ns)
}

// repeated string shard_key = 2;
int TableRoutes::shard_key_size() const {
  return shard_key_.size();
}
void TableRoutes::clear_shard_key() {
  shard_key_.Clear();
}
const ::std::string& TableRoutes::shard_key(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.shard_key)
  return shard_key_.Get(index);
}
::std::string* TableRoutes::mutable_shard_key(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.shard_key)
  return shard_key_.Mutable(index);
}
void TableRoutes::set_shard_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.shard_key)
  shard_key_.Mutable(index)->assign(value);
}
void TableRoutes::set_shard_key(int index, const char* value) {
  shard_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.shard_key)
}
void TableRoutes::set_shard_key(int index, const char* value, size_t size) {
  shard_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.shard_key)
}
::std::string* TableRoutes::add_shard_key() {
  // @@protoc_insertion_point(field_add_mutable:masterproto.TableRoutes.shard_key)
  return shard_key_.Add();
}
void TableRoutes::add_shard_key(const ::std::string& value) {
  shard_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterproto.TableRoutes.shard_key)
}
void TableRoutes::add_shard_key(const char* value) {
  shard_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterproto.TableRoutes.shard_key)
}
void TableRoutes::add_shard_key(const char* value, size_t size) {
  shard_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterproto.TableRoutes.shard_key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableRoutes::shard_key() const {
  // @@protoc_insertion_point(field_list:masterproto.TableRoutes.shard_key)
  return shard_key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TableRoutes::mutable_shard_key() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.TableRoutes.shard_key)
  return &shard_key_;
}

// repeated .masterproto.RouteChunk routes = 3;
int TableRoutes::routes_size() const {
  return routes_.size();
}
void TableRoutes::clear_routes() {
  routes_.Clear();
}
const ::masterproto::RouteChunk& TableRoutes::routes(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.routes)
  return routes_.Get(index);
}
::masterproto::RouteChunk* TableRoutes::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.routes)
  return routes_.Mutable(index);
}
::masterproto::RouteChunk* TableRoutes::add_routes() {
  // @@protoc_insertion_point(field_add:masterproto.TableRoutes.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::RouteChunk >*
TableRoutes::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.TableRoutes.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::RouteChunk >&
TableRoutes::routes() const {
  // @@protoc_insertion_point(field_list:masterproto.TableRoutes.routes)
  return routes_;
}

// string route_data = 4;
void TableRoutes::clear_route_data() {
  route_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutes::route_data() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.route_data)
  return route_data_.GetNoArena();
}
void TableRoutes::set_route_data(const ::std::string& value) {
  
  route_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.route_data)
}
#if LANG_CXX11
void TableRoutes::set_route_data(::std::string&& value) {
  
  route_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutes.route_data)
}
#endif
void TableRoutes::set_route_data(const char* value) {
  
  route_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.route_data)
}
void TableRoutes::set_route_data(const char* value, size_t size) {
  
  route_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.route_data)
}
::std::string* TableRoutes::mutable_route_data() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.route_data)
  return route_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutes::release_route_data() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutes.route_data)
  
  return route_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutes::set_allocated_route_data(::std::string* route_data) {
  if (route_data != NULL) {
    
  } else {
    
  }
  route_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_data);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutes.route_data)
}

// int32 version = 5;
void TableRoutes::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 TableRoutes::version() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.version)
  return version_;
}
void TableRoutes::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.version)
}

// string md5 = 6;
void TableRoutes::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutes::md5() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.md5)
  return md5_.GetNoArena();
}
void TableRoutes::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.md5)
}
#if LANG_CXX11
void TableRoutes::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutes.md5)
}
#endif
void TableRoutes::set_md5(const char* value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.md5)
}
void TableRoutes::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.md5)
}
::std::string* TableRoutes::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutes::release_md5() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutes.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutes::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutes.md5)
}

// string route_type = 7;
void TableRoutes::clear_route_type() {
  route_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutes::route_type() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.route_type)
  return route_type_.GetNoArena();
}
void TableRoutes::set_route_type(const ::std::string& value) {
  
  route_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.route_type)
}
#if LANG_CXX11
void TableRoutes::set_route_type(::std::string&& value) {
  
  route_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutes.route_type)
}
#endif
void TableRoutes::set_route_type(const char* value) {
  
  route_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.route_type)
}
void TableRoutes::set_route_type(const char* value, size_t size) {
  
  route_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.route_type)
}
::std::string* TableRoutes::mutable_route_type() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.route_type)
  return route_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutes::release_route_type() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutes.route_type)
  
  return route_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutes::set_allocated_route_type(::std::string* route_type) {
  if (route_type != NULL) {
    
  } else {
    
  }
  route_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_type);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutes.route_type)
}

// string table_type = 8;
void TableRoutes::clear_table_type() {
  table_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableRoutes::table_type() const {
  // @@protoc_insertion_point(field_get:masterproto.TableRoutes.table_type)
  return table_type_.GetNoArena();
}
void TableRoutes::set_table_type(const ::std::string& value) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.TableRoutes.table_type)
}
#if LANG_CXX11
void TableRoutes::set_table_type(::std::string&& value) {
  
  table_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.TableRoutes.table_type)
}
#endif
void TableRoutes::set_table_type(const char* value) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.TableRoutes.table_type)
}
void TableRoutes::set_table_type(const char* value, size_t size) {
  
  table_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.TableRoutes.table_type)
}
::std::string* TableRoutes::mutable_table_type() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.TableRoutes.table_type)
  return table_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableRoutes::release_table_type() {
  // @@protoc_insertion_point(field_release:masterproto.TableRoutes.table_type)
  
  return table_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableRoutes::set_allocated_table_type(::std::string* table_type) {
  if (table_type != NULL) {
    
  } else {
    
  }
  table_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_type);
  // @@protoc_insertion_point(field_set_allocated:masterproto.TableRoutes.table_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRoutesRsp::kHeaderFieldNumber;
const int GetClusterRoutesRsp::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRoutesRsp::GetClusterRoutesRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterRoutesRsp)
}
GetClusterRoutesRsp::GetClusterRoutesRsp(const GetClusterRoutesRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      routes_(from.routes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterRoutesRsp)
}

void GetClusterRoutesRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetClusterRoutesRsp::~GetClusterRoutesRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterRoutesRsp)
  SharedDtor();
}

void GetClusterRoutesRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterRoutesRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRoutesRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[133].descriptor;
}

const GetClusterRoutesRsp& GetClusterRoutesRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRoutesRsp* GetClusterRoutesRsp::New(::google::protobuf::Arena* arena) const {
  GetClusterRoutesRsp* n = new GetClusterRoutesRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRoutesRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterRoutesRsp)
  routes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetClusterRoutesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterRoutesRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.TableRoutes routes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterRoutesRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterRoutesRsp)
  return false;
#undef DO_
}

void GetClusterRoutesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterRoutesRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.TableRoutes routes = 2;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterRoutesRsp)
}

::google::protobuf::uint8* GetClusterRoutesRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterRoutesRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.TableRoutes routes = 2;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterRoutesRsp)
  return target;
}

size_t GetClusterRoutesRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterRoutesRsp)
  size_t total_size = 0;

  // repeated .masterproto.TableRoutes routes = 2;
  {
    unsigned int count = this->routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRoutesRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterRoutesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRoutesRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRoutesRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterRoutesRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterRoutesRsp)
    MergeFrom(*source);
  }
}

void GetClusterRoutesRsp::MergeFrom(const GetClusterRoutesRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterRoutesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  routes_.MergeFrom(from.routes_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GetClusterRoutesRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterRoutesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRoutesRsp::CopyFrom(const GetClusterRoutesRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterRoutesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRoutesRsp::IsInitialized() const {
  return true;
}

void GetClusterRoutesRsp::Swap(GetClusterRoutesRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRoutesRsp::InternalSwap(GetClusterRoutesRsp* other) {
  routes_.UnsafeArenaSwap(&other->routes_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRoutesRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[133];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRoutesRsp

// .cmongoproto.ResHeader header = 1;
bool GetClusterRoutesRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterRoutesRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetClusterRoutesRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetClusterRoutesRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetClusterRoutesRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterRoutesRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesRsp.header)
}

// repeated .masterproto.TableRoutes routes = 2;
int GetClusterRoutesRsp::routes_size() const {
  return routes_.size();
}
void GetClusterRoutesRsp::clear_routes() {
  routes_.Clear();
}
const ::masterproto::TableRoutes& GetClusterRoutesRsp::routes(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRsp.routes)
  return routes_.Get(index);
}
::masterproto::TableRoutes* GetClusterRoutesRsp::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRsp.routes)
  return routes_.Mutable(index);
}
::masterproto::TableRoutes* GetClusterRoutesRsp::add_routes() {
  // @@protoc_insertion_point(field_add:masterproto.GetClusterRoutesRsp.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::TableRoutes >*
GetClusterRoutesRsp::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GetClusterRoutesRsp.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::TableRoutes >&
GetClusterRoutesRsp::routes() const {
  // @@protoc_insertion_point(field_list:masterproto.GetClusterRoutesRsp.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIntersectMigrateJobsReq::kHeaderFieldNumber;
const int GetIntersectMigrateJobsReq::kClusterIdFieldNumber;
const int GetIntersectMigrateJobsReq::kTimeNanoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIntersectMigrateJobsReq::GetIntersectMigrateJobsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetIntersectMigrateJobsReq)
}
GetIntersectMigrateJobsReq::GetIntersectMigrateJobsReq(const GetIntersectMigrateJobsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  time_nano_ = from.time_nano_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetIntersectMigrateJobsReq)
}

void GetIntersectMigrateJobsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&time_nano_) -
    reinterpret_cast<char*>(&header_) + sizeof(time_nano_));
  _cached_size_ = 0;
}

GetIntersectMigrateJobsReq::~GetIntersectMigrateJobsReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetIntersectMigrateJobsReq)
  SharedDtor();
}

void GetIntersectMigrateJobsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetIntersectMigrateJobsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIntersectMigrateJobsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[134].descriptor;
}

const GetIntersectMigrateJobsReq& GetIntersectMigrateJobsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetIntersectMigrateJobsReq* GetIntersectMigrateJobsReq::New(::google::protobuf::Arena* arena) const {
  GetIntersectMigrateJobsReq* n = new GetIntersectMigrateJobsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetIntersectMigrateJobsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetIntersectMigrateJobsReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  time_nano_ = GOOGLE_LONGLONG(0);
}

bool GetIntersectMigrateJobsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetIntersectMigrateJobsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetIntersectMigrateJobsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_nano = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetIntersectMigrateJobsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetIntersectMigrateJobsReq)
  return false;
#undef DO_
}

void GetIntersectMigrateJobsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetIntersectMigrateJobsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetIntersectMigrateJobsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_nano(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetIntersectMigrateJobsReq)
}

::google::protobuf::uint8* GetIntersectMigrateJobsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetIntersectMigrateJobsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetIntersectMigrateJobsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_nano(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetIntersectMigrateJobsReq)
  return target;
}

size_t GetIntersectMigrateJobsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetIntersectMigrateJobsReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_nano());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIntersectMigrateJobsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetIntersectMigrateJobsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIntersectMigrateJobsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIntersectMigrateJobsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetIntersectMigrateJobsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetIntersectMigrateJobsReq)
    MergeFrom(*source);
  }
}

void GetIntersectMigrateJobsReq::MergeFrom(const GetIntersectMigrateJobsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetIntersectMigrateJobsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.time_nano() != 0) {
    set_time_nano(from.time_nano());
  }
}

void GetIntersectMigrateJobsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetIntersectMigrateJobsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIntersectMigrateJobsReq::CopyFrom(const GetIntersectMigrateJobsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetIntersectMigrateJobsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIntersectMigrateJobsReq::IsInitialized() const {
  return true;
}

void GetIntersectMigrateJobsReq::Swap(GetIntersectMigrateJobsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIntersectMigrateJobsReq::InternalSwap(GetIntersectMigrateJobsReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(time_nano_, other->time_nano_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIntersectMigrateJobsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[134];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetIntersectMigrateJobsReq

// .cmongoproto.ReqHeader header = 1;
bool GetIntersectMigrateJobsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetIntersectMigrateJobsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetIntersectMigrateJobsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetIntersectMigrateJobsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetIntersectMigrateJobsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetIntersectMigrateJobsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetIntersectMigrateJobsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetIntersectMigrateJobsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetIntersectMigrateJobsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetIntersectMigrateJobsReq.header)
}

// string cluster_id = 2;
void GetIntersectMigrateJobsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetIntersectMigrateJobsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetIntersectMigrateJobsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetIntersectMigrateJobsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetIntersectMigrateJobsReq.cluster_id)
}
#if LANG_CXX11
void GetIntersectMigrateJobsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetIntersectMigrateJobsReq.cluster_id)
}
#endif
void GetIntersectMigrateJobsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetIntersectMigrateJobsReq.cluster_id)
}
void GetIntersectMigrateJobsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetIntersectMigrateJobsReq.cluster_id)
}
::std::string* GetIntersectMigrateJobsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetIntersectMigrateJobsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetIntersectMigrateJobsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetIntersectMigrateJobsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetIntersectMigrateJobsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetIntersectMigrateJobsReq.cluster_id)
}

// int64 time_nano = 3;
void GetIntersectMigrateJobsReq::clear_time_nano() {
  time_nano_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetIntersectMigrateJobsReq::time_nano() const {
  // @@protoc_insertion_point(field_get:masterproto.GetIntersectMigrateJobsReq.time_nano)
  return time_nano_;
}
void GetIntersectMigrateJobsReq::set_time_nano(::google::protobuf::int64 value) {
  
  time_nano_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetIntersectMigrateJobsReq.time_nano)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MigrateInterval::kSrcShardFieldNumber;
const int MigrateInterval::kDstShardFieldNumber;
const int MigrateInterval::kNsFieldNumber;
const int MigrateInterval::kChunkListFieldNumber;
const int MigrateInterval::kBeginTimeFieldNumber;
const int MigrateInterval::kEndTimeFieldNumber;
const int MigrateInterval::kChangeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MigrateInterval::MigrateInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.MigrateInterval)
}
MigrateInterval::MigrateInterval(const MigrateInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_list_(from.chunk_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_shard().size() > 0) {
    src_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_shard_);
  }
  dst_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_shard().size() > 0) {
    dst_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_shard_);
  }
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ns().size() > 0) {
    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  ::memcpy(&begin_time_, &from.begin_time_,
    reinterpret_cast<char*>(&change_time_) -
    reinterpret_cast<char*>(&begin_time_) + sizeof(change_time_));
  // @@protoc_insertion_point(copy_constructor:masterproto.MigrateInterval)
}

void MigrateInterval::SharedCtor() {
  src_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, reinterpret_cast<char*>(&change_time_) -
    reinterpret_cast<char*>(&begin_time_) + sizeof(change_time_));
  _cached_size_ = 0;
}

MigrateInterval::~MigrateInterval() {
  // @@protoc_insertion_point(destructor:masterproto.MigrateInterval)
  SharedDtor();
}

void MigrateInterval::SharedDtor() {
  src_shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MigrateInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MigrateInterval::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[135].descriptor;
}

const MigrateInterval& MigrateInterval::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

MigrateInterval* MigrateInterval::New(::google::protobuf::Arena* arena) const {
  MigrateInterval* n = new MigrateInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MigrateInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.MigrateInterval)
  chunk_list_.Clear();
  src_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, reinterpret_cast<char*>(&change_time_) -
    reinterpret_cast<char*>(&begin_time_) + sizeof(change_time_));
}

bool MigrateInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.MigrateInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string src_shard = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_shard().data(), this->src_shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateInterval.src_shard"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_shard = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_shard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_shard().data(), this->dst_shard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateInterval.dst_shard"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ns = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ns().data(), this->ns().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.MigrateInterval.ns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunk_list = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunk_list())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_chunk_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 begin_time = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_time = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 change_time = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &change_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.MigrateInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.MigrateInterval)
  return false;
#undef DO_
}

void MigrateInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.MigrateInterval)
  // string src_shard = 3;
  if (this->src_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_shard().data(), this->src_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.src_shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->src_shard(), output);
  }

  // string dst_shard = 4;
  if (this->dst_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_shard().data(), this->dst_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.dst_shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dst_shard(), output);
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.ns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ns(), output);
  }

  // repeated int32 chunk_list = 6;
  if (this->chunk_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_list_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->chunk_list(i), output);
  }

  // int64 begin_time = 7;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->begin_time(), output);
  }

  // int64 end_time = 8;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->end_time(), output);
  }

  // int64 change_time = 9;
  if (this->change_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->change_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.MigrateInterval)
}

::google::protobuf::uint8* MigrateInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.MigrateInterval)
  // string src_shard = 3;
  if (this->src_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_shard().data(), this->src_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.src_shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src_shard(), target);
  }

  // string dst_shard = 4;
  if (this->dst_shard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_shard().data(), this->dst_shard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.dst_shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dst_shard(), target);
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ns().data(), this->ns().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.MigrateInterval.ns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ns(), target);
  }

  // repeated int32 chunk_list = 6;
  if (this->chunk_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->chunk_list(i), target);
  }

  // int64 begin_time = 7;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->begin_time(), target);
  }

  // int64 end_time = 8;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->end_time(), target);
  }

  // int64 change_time = 9;
  if (this->change_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->change_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.MigrateInterval)
  return target;
}

size_t MigrateInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.MigrateInterval)
  size_t total_size = 0;

  // repeated int32 chunk_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunk_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string src_shard = 3;
  if (this->src_shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_shard());
  }

  // string dst_shard = 4;
  if (this->dst_shard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_shard());
  }

  // string ns = 5;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ns());
  }

  // int64 begin_time = 7;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin_time());
  }

  // int64 end_time = 8;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  // int64 change_time = 9;
  if (this->change_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->change_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MigrateInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.MigrateInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const MigrateInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MigrateInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.MigrateInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.MigrateInterval)
    MergeFrom(*source);
  }
}

void MigrateInterval::MergeFrom(const MigrateInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.MigrateInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_list_.MergeFrom(from.chunk_list_);
  if (from.src_shard().size() > 0) {

    src_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_shard_);
  }
  if (from.dst_shard().size() > 0) {

    dst_shard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_shard_);
  }
  if (from.ns().size() > 0) {

    ns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ns_);
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.change_time() != 0) {
    set_change_time(from.change_time());
  }
}

void MigrateInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.MigrateInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MigrateInterval::CopyFrom(const MigrateInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.MigrateInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateInterval::IsInitialized() const {
  return true;
}

void MigrateInterval::Swap(MigrateInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MigrateInterval::InternalSwap(MigrateInterval* other) {
  chunk_list_.UnsafeArenaSwap(&other->chunk_list_);
  src_shard_.Swap(&other->src_shard_);
  dst_shard_.Swap(&other->dst_shard_);
  ns_.Swap(&other->ns_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(change_time_, other->change_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MigrateInterval::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[135];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MigrateInterval

// string src_shard = 3;
void MigrateInterval::clear_src_shard() {
  src_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateInterval::src_shard() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.src_shard)
  return src_shard_.GetNoArena();
}
void MigrateInterval::set_src_shard(const ::std::string& value) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.src_shard)
}
#if LANG_CXX11
void MigrateInterval::set_src_shard(::std::string&& value) {
  
  src_shard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateInterval.src_shard)
}
#endif
void MigrateInterval::set_src_shard(const char* value) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateInterval.src_shard)
}
void MigrateInterval::set_src_shard(const char* value, size_t size) {
  
  src_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateInterval.src_shard)
}
::std::string* MigrateInterval::mutable_src_shard() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateInterval.src_shard)
  return src_shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateInterval::release_src_shard() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateInterval.src_shard)
  
  return src_shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateInterval::set_allocated_src_shard(::std::string* src_shard) {
  if (src_shard != NULL) {
    
  } else {
    
  }
  src_shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_shard);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateInterval.src_shard)
}

// string dst_shard = 4;
void MigrateInterval::clear_dst_shard() {
  dst_shard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateInterval::dst_shard() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.dst_shard)
  return dst_shard_.GetNoArena();
}
void MigrateInterval::set_dst_shard(const ::std::string& value) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.dst_shard)
}
#if LANG_CXX11
void MigrateInterval::set_dst_shard(::std::string&& value) {
  
  dst_shard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateInterval.dst_shard)
}
#endif
void MigrateInterval::set_dst_shard(const char* value) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateInterval.dst_shard)
}
void MigrateInterval::set_dst_shard(const char* value, size_t size) {
  
  dst_shard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateInterval.dst_shard)
}
::std::string* MigrateInterval::mutable_dst_shard() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateInterval.dst_shard)
  return dst_shard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateInterval::release_dst_shard() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateInterval.dst_shard)
  
  return dst_shard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateInterval::set_allocated_dst_shard(::std::string* dst_shard) {
  if (dst_shard != NULL) {
    
  } else {
    
  }
  dst_shard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_shard);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateInterval.dst_shard)
}

// string ns = 5;
void MigrateInterval::clear_ns() {
  ns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MigrateInterval::ns() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.ns)
  return ns_.GetNoArena();
}
void MigrateInterval::set_ns(const ::std::string& value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.ns)
}
#if LANG_CXX11
void MigrateInterval::set_ns(::std::string&& value) {
  
  ns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.MigrateInterval.ns)
}
#endif
void MigrateInterval::set_ns(const char* value) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.MigrateInterval.ns)
}
void MigrateInterval::set_ns(const char* value, size_t size) {
  
  ns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.MigrateInterval.ns)
}
::std::string* MigrateInterval::mutable_ns() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.MigrateInterval.ns)
  return ns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MigrateInterval::release_ns() {
  // @@protoc_insertion_point(field_release:masterproto.MigrateInterval.ns)
  
  return ns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MigrateInterval::set_allocated_ns(::std::string* ns) {
  if (ns != NULL) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:masterproto.MigrateInterval.ns)
}

// repeated int32 chunk_list = 6;
int MigrateInterval::chunk_list_size() const {
  return chunk_list_.size();
}
void MigrateInterval::clear_chunk_list() {
  chunk_list_.Clear();
}
::google::protobuf::int32 MigrateInterval::chunk_list(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.chunk_list)
  return chunk_list_.Get(index);
}
void MigrateInterval::set_chunk_list(int index, ::google::protobuf::int32 value) {
  chunk_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.chunk_list)
}
void MigrateInterval::add_chunk_list(::google::protobuf::int32 value) {
  chunk_list_.Add(value);
  // @@protoc_insertion_point(field_add:masterproto.MigrateInterval.chunk_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MigrateInterval::chunk_list() const {
  // @@protoc_insertion_point(field_list:masterproto.MigrateInterval.chunk_list)
  return chunk_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MigrateInterval::mutable_chunk_list() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.MigrateInterval.chunk_list)
  return &chunk_list_;
}

// int64 begin_time = 7;
void MigrateInterval::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MigrateInterval::begin_time() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.begin_time)
  return begin_time_;
}
void MigrateInterval::set_begin_time(::google::protobuf::int64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.begin_time)
}

// int64 end_time = 8;
void MigrateInterval::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MigrateInterval::end_time() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.end_time)
  return end_time_;
}
void MigrateInterval::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.end_time)
}

// int64 change_time = 9;
void MigrateInterval::clear_change_time() {
  change_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MigrateInterval::change_time() const {
  // @@protoc_insertion_point(field_get:masterproto.MigrateInterval.change_time)
  return change_time_;
}
void MigrateInterval::set_change_time(::google::protobuf::int64 value) {
  
  change_time_ = value;
  // @@protoc_insertion_point(field_set:masterproto.MigrateInterval.change_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIntersectMigrateJobsRsp::kHeaderFieldNumber;
const int GetIntersectMigrateJobsRsp::kJobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIntersectMigrateJobsRsp::GetIntersectMigrateJobsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetIntersectMigrateJobsRsp)
}
GetIntersectMigrateJobsRsp::GetIntersectMigrateJobsRsp(const GetIntersectMigrateJobsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      jobs_(from.jobs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetIntersectMigrateJobsRsp)
}

void GetIntersectMigrateJobsRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetIntersectMigrateJobsRsp::~GetIntersectMigrateJobsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetIntersectMigrateJobsRsp)
  SharedDtor();
}

void GetIntersectMigrateJobsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetIntersectMigrateJobsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIntersectMigrateJobsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[136].descriptor;
}

const GetIntersectMigrateJobsRsp& GetIntersectMigrateJobsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetIntersectMigrateJobsRsp* GetIntersectMigrateJobsRsp::New(::google::protobuf::Arena* arena) const {
  GetIntersectMigrateJobsRsp* n = new GetIntersectMigrateJobsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetIntersectMigrateJobsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetIntersectMigrateJobsRsp)
  jobs_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetIntersectMigrateJobsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetIntersectMigrateJobsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.MigrateInterval jobs = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetIntersectMigrateJobsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetIntersectMigrateJobsRsp)
  return false;
#undef DO_
}

void GetIntersectMigrateJobsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetIntersectMigrateJobsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.MigrateInterval jobs = 2;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jobs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetIntersectMigrateJobsRsp)
}

::google::protobuf::uint8* GetIntersectMigrateJobsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetIntersectMigrateJobsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.MigrateInterval jobs = 2;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->jobs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetIntersectMigrateJobsRsp)
  return target;
}

size_t GetIntersectMigrateJobsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetIntersectMigrateJobsRsp)
  size_t total_size = 0;

  // repeated .masterproto.MigrateInterval jobs = 2;
  {
    unsigned int count = this->jobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jobs(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIntersectMigrateJobsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetIntersectMigrateJobsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIntersectMigrateJobsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIntersectMigrateJobsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetIntersectMigrateJobsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetIntersectMigrateJobsRsp)
    MergeFrom(*source);
  }
}

void GetIntersectMigrateJobsRsp::MergeFrom(const GetIntersectMigrateJobsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetIntersectMigrateJobsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jobs_.MergeFrom(from.jobs_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GetIntersectMigrateJobsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetIntersectMigrateJobsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIntersectMigrateJobsRsp::CopyFrom(const GetIntersectMigrateJobsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetIntersectMigrateJobsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIntersectMigrateJobsRsp::IsInitialized() const {
  return true;
}

void GetIntersectMigrateJobsRsp::Swap(GetIntersectMigrateJobsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIntersectMigrateJobsRsp::InternalSwap(GetIntersectMigrateJobsRsp* other) {
  jobs_.UnsafeArenaSwap(&other->jobs_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIntersectMigrateJobsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[136];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetIntersectMigrateJobsRsp

// .cmongoproto.ResHeader header = 1;
bool GetIntersectMigrateJobsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetIntersectMigrateJobsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetIntersectMigrateJobsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetIntersectMigrateJobsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetIntersectMigrateJobsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetIntersectMigrateJobsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetIntersectMigrateJobsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetIntersectMigrateJobsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetIntersectMigrateJobsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetIntersectMigrateJobsRsp.header)
}

// repeated .masterproto.MigrateInterval jobs = 2;
int GetIntersectMigrateJobsRsp::jobs_size() const {
  return jobs_.size();
}
void GetIntersectMigrateJobsRsp::clear_jobs() {
  jobs_.Clear();
}
const ::masterproto::MigrateInterval& GetIntersectMigrateJobsRsp::jobs(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GetIntersectMigrateJobsRsp.jobs)
  return jobs_.Get(index);
}
::masterproto::MigrateInterval* GetIntersectMigrateJobsRsp::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GetIntersectMigrateJobsRsp.jobs)
  return jobs_.Mutable(index);
}
::masterproto::MigrateInterval* GetIntersectMigrateJobsRsp::add_jobs() {
  // @@protoc_insertion_point(field_add:masterproto.GetIntersectMigrateJobsRsp.jobs)
  return jobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::MigrateInterval >*
GetIntersectMigrateJobsRsp::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GetIntersectMigrateJobsRsp.jobs)
  return &jobs_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::MigrateInterval >&
GetIntersectMigrateJobsRsp::jobs() const {
  // @@protoc_insertion_point(field_list:masterproto.GetIntersectMigrateJobsRsp.jobs)
  return jobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterInfoReq::kHeaderFieldNumber;
const int GetClusterInfoReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterInfoReq::GetClusterInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterInfoReq)
}
GetClusterInfoReq::GetClusterInfoReq(const GetClusterInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterInfoReq)
}

void GetClusterInfoReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetClusterInfoReq::~GetClusterInfoReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterInfoReq)
  SharedDtor();
}

void GetClusterInfoReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterInfoReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[137].descriptor;
}

const GetClusterInfoReq& GetClusterInfoReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterInfoReq* GetClusterInfoReq::New(::google::protobuf::Arena* arena) const {
  GetClusterInfoReq* n = new GetClusterInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterInfoReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetClusterInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetClusterInfoReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterInfoReq)
  return false;
#undef DO_
}

void GetClusterInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterInfoReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterInfoReq)
}

::google::protobuf::uint8* GetClusterInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterInfoReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterInfoReq)
  return target;
}

size_t GetClusterInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterInfoReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterInfoReq)
    MergeFrom(*source);
  }
}

void GetClusterInfoReq::MergeFrom(const GetClusterInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void GetClusterInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterInfoReq::CopyFrom(const GetClusterInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterInfoReq::IsInitialized() const {
  return true;
}

void GetClusterInfoReq::Swap(GetClusterInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterInfoReq::InternalSwap(GetClusterInfoReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterInfoReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[137];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterInfoReq

// .cmongoproto.ReqHeader header = 1;
bool GetClusterInfoReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterInfoReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetClusterInfoReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterInfoReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetClusterInfoReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterInfoReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetClusterInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterInfoReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterInfoReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterInfoReq.header)
}

// string cluster_id = 2;
void GetClusterInfoReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterInfoReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterInfoReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterInfoReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetClusterInfoReq.cluster_id)
}
#if LANG_CXX11
void GetClusterInfoReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetClusterInfoReq.cluster_id)
}
#endif
void GetClusterInfoReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetClusterInfoReq.cluster_id)
}
void GetClusterInfoReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetClusterInfoReq.cluster_id)
}
::std::string* GetClusterInfoReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterInfoReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterInfoReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterInfoReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterInfoReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterInfoReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterInfoRsp::kHeaderFieldNumber;
const int GetClusterInfoRsp::kClusterInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterInfoRsp::GetClusterInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterInfoRsp)
}
GetClusterInfoRsp::GetClusterInfoRsp(const GetClusterInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_cluster_info()) {
    cluster_info_ = new ::masterproto::ClusterInfo(*from.cluster_info_);
  } else {
    cluster_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterInfoRsp)
}

void GetClusterInfoRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&cluster_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(cluster_info_));
  _cached_size_ = 0;
}

GetClusterInfoRsp::~GetClusterInfoRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterInfoRsp)
  SharedDtor();
}

void GetClusterInfoRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete cluster_info_;
  }
}

void GetClusterInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterInfoRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[138].descriptor;
}

const GetClusterInfoRsp& GetClusterInfoRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterInfoRsp* GetClusterInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetClusterInfoRsp* n = new GetClusterInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterInfoRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_info_ != NULL) {
    delete cluster_info_;
  }
  cluster_info_ = NULL;
}

bool GetClusterInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.ClusterInfo cluster_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterInfoRsp)
  return false;
#undef DO_
}

void GetClusterInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cluster_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterInfoRsp)
}

::google::protobuf::uint8* GetClusterInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cluster_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterInfoRsp)
  return target;
}

size_t GetClusterInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterInfoRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.ClusterInfo cluster_info = 2;
  if (this->has_cluster_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterInfoRsp)
    MergeFrom(*source);
  }
}

void GetClusterInfoRsp::MergeFrom(const GetClusterInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.has_cluster_info()) {
    mutable_cluster_info()->::masterproto::ClusterInfo::MergeFrom(from.cluster_info());
  }
}

void GetClusterInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterInfoRsp::CopyFrom(const GetClusterInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterInfoRsp::IsInitialized() const {
  return true;
}

void GetClusterInfoRsp::Swap(GetClusterInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterInfoRsp::InternalSwap(GetClusterInfoRsp* other) {
  std::swap(header_, other->header_);
  std::swap(cluster_info_, other->cluster_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterInfoRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[138];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterInfoRsp

// .cmongoproto.ResHeader header = 1;
bool GetClusterInfoRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterInfoRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetClusterInfoRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterInfoRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetClusterInfoRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterInfoRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetClusterInfoRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterInfoRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterInfoRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterInfoRsp.header)
}

// .masterproto.ClusterInfo cluster_info = 2;
bool GetClusterInfoRsp::has_cluster_info() const {
  return this != internal_default_instance() && cluster_info_ != NULL;
}
void GetClusterInfoRsp::clear_cluster_info() {
  if (GetArenaNoVirtual() == NULL && cluster_info_ != NULL) delete cluster_info_;
  cluster_info_ = NULL;
}
const ::masterproto::ClusterInfo& GetClusterInfoRsp::cluster_info() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterInfoRsp.cluster_info)
  return cluster_info_ != NULL ? *cluster_info_
                         : *::masterproto::ClusterInfo::internal_default_instance();
}
::masterproto::ClusterInfo* GetClusterInfoRsp::mutable_cluster_info() {
  
  if (cluster_info_ == NULL) {
    cluster_info_ = new ::masterproto::ClusterInfo;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterInfoRsp.cluster_info)
  return cluster_info_;
}
::masterproto::ClusterInfo* GetClusterInfoRsp::release_cluster_info() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterInfoRsp.cluster_info)
  
  ::masterproto::ClusterInfo* temp = cluster_info_;
  cluster_info_ = NULL;
  return temp;
}
void GetClusterInfoRsp::set_allocated_cluster_info(::masterproto::ClusterInfo* cluster_info) {
  delete cluster_info_;
  cluster_info_ = cluster_info;
  if (cluster_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterInfoRsp.cluster_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetProxyNotifyInfoReq::kHeaderFieldNumber;
const int SetProxyNotifyInfoReq::kRegionIdFieldNumber;
const int SetProxyNotifyInfoReq::kSetIdFieldNumber;
const int SetProxyNotifyInfoReq::kMethodFieldNumber;
const int SetProxyNotifyInfoReq::kNotifyUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetProxyNotifyInfoReq::SetProxyNotifyInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetProxyNotifyInfoReq)
}
SetProxyNotifyInfoReq::SetProxyNotifyInfoReq(const SetProxyNotifyInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notify_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.notify_url().size() > 0) {
    notify_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_url_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetProxyNotifyInfoReq)
}

void SetProxyNotifyInfoReq::SharedCtor() {
  notify_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&header_) + sizeof(method_));
  _cached_size_ = 0;
}

SetProxyNotifyInfoReq::~SetProxyNotifyInfoReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetProxyNotifyInfoReq)
  SharedDtor();
}

void SetProxyNotifyInfoReq::SharedDtor() {
  notify_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetProxyNotifyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetProxyNotifyInfoReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[139].descriptor;
}

const SetProxyNotifyInfoReq& SetProxyNotifyInfoReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetProxyNotifyInfoReq* SetProxyNotifyInfoReq::New(::google::protobuf::Arena* arena) const {
  SetProxyNotifyInfoReq* n = new SetProxyNotifyInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetProxyNotifyInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetProxyNotifyInfoReq)
  notify_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(method_));
}

bool SetProxyNotifyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetProxyNotifyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.EnumProxyNotifyType method = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::masterproto::EnumProxyNotifyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notify_url = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notify_url().data(), this->notify_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetProxyNotifyInfoReq.notify_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetProxyNotifyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetProxyNotifyInfoReq)
  return false;
#undef DO_
}

void SetProxyNotifyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetProxyNotifyInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // .masterproto.EnumProxyNotifyType method = 4;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->method(), output);
  }

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetProxyNotifyInfoReq.notify_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->notify_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetProxyNotifyInfoReq)
}

::google::protobuf::uint8* SetProxyNotifyInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetProxyNotifyInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // .masterproto.EnumProxyNotifyType method = 4;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->method(), target);
  }

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetProxyNotifyInfoReq.notify_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notify_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetProxyNotifyInfoReq)
  return target;
}

size_t SetProxyNotifyInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetProxyNotifyInfoReq)
  size_t total_size = 0;

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notify_url());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .masterproto.EnumProxyNotifyType method = 4;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetProxyNotifyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetProxyNotifyInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProxyNotifyInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetProxyNotifyInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetProxyNotifyInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetProxyNotifyInfoReq)
    MergeFrom(*source);
  }
}

void SetProxyNotifyInfoReq::MergeFrom(const SetProxyNotifyInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetProxyNotifyInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.notify_url().size() > 0) {

    notify_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_url_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void SetProxyNotifyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetProxyNotifyInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProxyNotifyInfoReq::CopyFrom(const SetProxyNotifyInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetProxyNotifyInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProxyNotifyInfoReq::IsInitialized() const {
  return true;
}

void SetProxyNotifyInfoReq::Swap(SetProxyNotifyInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetProxyNotifyInfoReq::InternalSwap(SetProxyNotifyInfoReq* other) {
  notify_url_.Swap(&other->notify_url_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(method_, other->method_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetProxyNotifyInfoReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[139];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetProxyNotifyInfoReq

// .cmongoproto.ReqHeader header = 1;
bool SetProxyNotifyInfoReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetProxyNotifyInfoReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetProxyNotifyInfoReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetProxyNotifyInfoReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetProxyNotifyInfoReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetProxyNotifyInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetProxyNotifyInfoReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetProxyNotifyInfoReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetProxyNotifyInfoReq.header)
}

// int32 region_id = 2;
void SetProxyNotifyInfoReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 SetProxyNotifyInfoReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoReq.region_id)
  return region_id_;
}
void SetProxyNotifyInfoReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetProxyNotifyInfoReq.region_id)
}

// int32 set_id = 3;
void SetProxyNotifyInfoReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 SetProxyNotifyInfoReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoReq.set_id)
  return set_id_;
}
void SetProxyNotifyInfoReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetProxyNotifyInfoReq.set_id)
}

// .masterproto.EnumProxyNotifyType method = 4;
void SetProxyNotifyInfoReq::clear_method() {
  method_ = 0;
}
::masterproto::EnumProxyNotifyType SetProxyNotifyInfoReq::method() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoReq.method)
  return static_cast< ::masterproto::EnumProxyNotifyType >(method_);
}
void SetProxyNotifyInfoReq::set_method(::masterproto::EnumProxyNotifyType value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetProxyNotifyInfoReq.method)
}

// string notify_url = 5;
void SetProxyNotifyInfoReq::clear_notify_url() {
  notify_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetProxyNotifyInfoReq::notify_url() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoReq.notify_url)
  return notify_url_.GetNoArena();
}
void SetProxyNotifyInfoReq::set_notify_url(const ::std::string& value) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetProxyNotifyInfoReq.notify_url)
}
#if LANG_CXX11
void SetProxyNotifyInfoReq::set_notify_url(::std::string&& value) {
  
  notify_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetProxyNotifyInfoReq.notify_url)
}
#endif
void SetProxyNotifyInfoReq::set_notify_url(const char* value) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetProxyNotifyInfoReq.notify_url)
}
void SetProxyNotifyInfoReq::set_notify_url(const char* value, size_t size) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetProxyNotifyInfoReq.notify_url)
}
::std::string* SetProxyNotifyInfoReq::mutable_notify_url() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetProxyNotifyInfoReq.notify_url)
  return notify_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetProxyNotifyInfoReq::release_notify_url() {
  // @@protoc_insertion_point(field_release:masterproto.SetProxyNotifyInfoReq.notify_url)
  
  return notify_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetProxyNotifyInfoReq::set_allocated_notify_url(::std::string* notify_url) {
  if (notify_url != NULL) {
    
  } else {
    
  }
  notify_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notify_url);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetProxyNotifyInfoReq.notify_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetProxyNotifyInfoRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetProxyNotifyInfoRsp::SetProxyNotifyInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetProxyNotifyInfoRsp)
}
SetProxyNotifyInfoRsp::SetProxyNotifyInfoRsp(const SetProxyNotifyInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetProxyNotifyInfoRsp)
}

void SetProxyNotifyInfoRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetProxyNotifyInfoRsp::~SetProxyNotifyInfoRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetProxyNotifyInfoRsp)
  SharedDtor();
}

void SetProxyNotifyInfoRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetProxyNotifyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetProxyNotifyInfoRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[140].descriptor;
}

const SetProxyNotifyInfoRsp& SetProxyNotifyInfoRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetProxyNotifyInfoRsp* SetProxyNotifyInfoRsp::New(::google::protobuf::Arena* arena) const {
  SetProxyNotifyInfoRsp* n = new SetProxyNotifyInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetProxyNotifyInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetProxyNotifyInfoRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetProxyNotifyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetProxyNotifyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetProxyNotifyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetProxyNotifyInfoRsp)
  return false;
#undef DO_
}

void SetProxyNotifyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetProxyNotifyInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetProxyNotifyInfoRsp)
}

::google::protobuf::uint8* SetProxyNotifyInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetProxyNotifyInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetProxyNotifyInfoRsp)
  return target;
}

size_t SetProxyNotifyInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetProxyNotifyInfoRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetProxyNotifyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetProxyNotifyInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProxyNotifyInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetProxyNotifyInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetProxyNotifyInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetProxyNotifyInfoRsp)
    MergeFrom(*source);
  }
}

void SetProxyNotifyInfoRsp::MergeFrom(const SetProxyNotifyInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetProxyNotifyInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetProxyNotifyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetProxyNotifyInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProxyNotifyInfoRsp::CopyFrom(const SetProxyNotifyInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetProxyNotifyInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProxyNotifyInfoRsp::IsInitialized() const {
  return true;
}

void SetProxyNotifyInfoRsp::Swap(SetProxyNotifyInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetProxyNotifyInfoRsp::InternalSwap(SetProxyNotifyInfoRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetProxyNotifyInfoRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[140];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetProxyNotifyInfoRsp

// .cmongoproto.ResHeader header = 1;
bool SetProxyNotifyInfoRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetProxyNotifyInfoRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetProxyNotifyInfoRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetProxyNotifyInfoRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetProxyNotifyInfoRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetProxyNotifyInfoRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetProxyNotifyInfoRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetProxyNotifyInfoRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetProxyNotifyInfoRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetProxyNotifyInfoRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProxyNotifyInfoReq::kHeaderFieldNumber;
const int GetProxyNotifyInfoReq::kRegionIdFieldNumber;
const int GetProxyNotifyInfoReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProxyNotifyInfoReq::GetProxyNotifyInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetProxyNotifyInfoReq)
}
GetProxyNotifyInfoReq::GetProxyNotifyInfoReq(const GetProxyNotifyInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetProxyNotifyInfoReq)
}

void GetProxyNotifyInfoReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

GetProxyNotifyInfoReq::~GetProxyNotifyInfoReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetProxyNotifyInfoReq)
  SharedDtor();
}

void GetProxyNotifyInfoReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetProxyNotifyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProxyNotifyInfoReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[141].descriptor;
}

const GetProxyNotifyInfoReq& GetProxyNotifyInfoReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetProxyNotifyInfoReq* GetProxyNotifyInfoReq::New(::google::protobuf::Arena* arena) const {
  GetProxyNotifyInfoReq* n = new GetProxyNotifyInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetProxyNotifyInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetProxyNotifyInfoReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool GetProxyNotifyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetProxyNotifyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetProxyNotifyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetProxyNotifyInfoReq)
  return false;
#undef DO_
}

void GetProxyNotifyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetProxyNotifyInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetProxyNotifyInfoReq)
}

::google::protobuf::uint8* GetProxyNotifyInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetProxyNotifyInfoReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetProxyNotifyInfoReq)
  return target;
}

size_t GetProxyNotifyInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetProxyNotifyInfoReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProxyNotifyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetProxyNotifyInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProxyNotifyInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetProxyNotifyInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetProxyNotifyInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetProxyNotifyInfoReq)
    MergeFrom(*source);
  }
}

void GetProxyNotifyInfoReq::MergeFrom(const GetProxyNotifyInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetProxyNotifyInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void GetProxyNotifyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetProxyNotifyInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProxyNotifyInfoReq::CopyFrom(const GetProxyNotifyInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetProxyNotifyInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProxyNotifyInfoReq::IsInitialized() const {
  return true;
}

void GetProxyNotifyInfoReq::Swap(GetProxyNotifyInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProxyNotifyInfoReq::InternalSwap(GetProxyNotifyInfoReq* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetProxyNotifyInfoReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[141];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetProxyNotifyInfoReq

// .cmongoproto.ReqHeader header = 1;
bool GetProxyNotifyInfoReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetProxyNotifyInfoReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetProxyNotifyInfoReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetProxyNotifyInfoReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetProxyNotifyInfoReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetProxyNotifyInfoReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetProxyNotifyInfoReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetProxyNotifyInfoReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetProxyNotifyInfoReq.header)
}

// int32 region_id = 2;
void GetProxyNotifyInfoReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 GetProxyNotifyInfoReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoReq.region_id)
  return region_id_;
}
void GetProxyNotifyInfoReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetProxyNotifyInfoReq.region_id)
}

// int32 set_id = 3;
void GetProxyNotifyInfoReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 GetProxyNotifyInfoReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoReq.set_id)
  return set_id_;
}
void GetProxyNotifyInfoReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetProxyNotifyInfoReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProxyNotifyInfoRsp::kHeaderFieldNumber;
const int GetProxyNotifyInfoRsp::kMethodFieldNumber;
const int GetProxyNotifyInfoRsp::kNotifyUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProxyNotifyInfoRsp::GetProxyNotifyInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetProxyNotifyInfoRsp)
}
GetProxyNotifyInfoRsp::GetProxyNotifyInfoRsp(const GetProxyNotifyInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notify_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.notify_url().size() > 0) {
    notify_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_url_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetProxyNotifyInfoRsp)
}

void GetProxyNotifyInfoRsp::SharedCtor() {
  notify_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&header_) + sizeof(method_));
  _cached_size_ = 0;
}

GetProxyNotifyInfoRsp::~GetProxyNotifyInfoRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetProxyNotifyInfoRsp)
  SharedDtor();
}

void GetProxyNotifyInfoRsp::SharedDtor() {
  notify_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetProxyNotifyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProxyNotifyInfoRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[142].descriptor;
}

const GetProxyNotifyInfoRsp& GetProxyNotifyInfoRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetProxyNotifyInfoRsp* GetProxyNotifyInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetProxyNotifyInfoRsp* n = new GetProxyNotifyInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetProxyNotifyInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetProxyNotifyInfoRsp)
  notify_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  method_ = 0;
}

bool GetProxyNotifyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetProxyNotifyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.EnumProxyNotifyType method = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::masterproto::EnumProxyNotifyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string notify_url = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notify_url().data(), this->notify_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetProxyNotifyInfoRsp.notify_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetProxyNotifyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetProxyNotifyInfoRsp)
  return false;
#undef DO_
}

void GetProxyNotifyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetProxyNotifyInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.EnumProxyNotifyType method = 2;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetProxyNotifyInfoRsp.notify_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->notify_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetProxyNotifyInfoRsp)
}

::google::protobuf::uint8* GetProxyNotifyInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetProxyNotifyInfoRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.EnumProxyNotifyType method = 2;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->method(), target);
  }

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetProxyNotifyInfoRsp.notify_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notify_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetProxyNotifyInfoRsp)
  return target;
}

size_t GetProxyNotifyInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetProxyNotifyInfoRsp)
  size_t total_size = 0;

  // string notify_url = 5;
  if (this->notify_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notify_url());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.EnumProxyNotifyType method = 2;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProxyNotifyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetProxyNotifyInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProxyNotifyInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetProxyNotifyInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetProxyNotifyInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetProxyNotifyInfoRsp)
    MergeFrom(*source);
  }
}

void GetProxyNotifyInfoRsp::MergeFrom(const GetProxyNotifyInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetProxyNotifyInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.notify_url().size() > 0) {

    notify_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_url_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void GetProxyNotifyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetProxyNotifyInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProxyNotifyInfoRsp::CopyFrom(const GetProxyNotifyInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetProxyNotifyInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProxyNotifyInfoRsp::IsInitialized() const {
  return true;
}

void GetProxyNotifyInfoRsp::Swap(GetProxyNotifyInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProxyNotifyInfoRsp::InternalSwap(GetProxyNotifyInfoRsp* other) {
  notify_url_.Swap(&other->notify_url_);
  std::swap(header_, other->header_);
  std::swap(method_, other->method_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetProxyNotifyInfoRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[142];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetProxyNotifyInfoRsp

// .cmongoproto.ResHeader header = 1;
bool GetProxyNotifyInfoRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetProxyNotifyInfoRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetProxyNotifyInfoRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetProxyNotifyInfoRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetProxyNotifyInfoRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetProxyNotifyInfoRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetProxyNotifyInfoRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetProxyNotifyInfoRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetProxyNotifyInfoRsp.header)
}

// .masterproto.EnumProxyNotifyType method = 2;
void GetProxyNotifyInfoRsp::clear_method() {
  method_ = 0;
}
::masterproto::EnumProxyNotifyType GetProxyNotifyInfoRsp::method() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoRsp.method)
  return static_cast< ::masterproto::EnumProxyNotifyType >(method_);
}
void GetProxyNotifyInfoRsp::set_method(::masterproto::EnumProxyNotifyType value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetProxyNotifyInfoRsp.method)
}

// string notify_url = 5;
void GetProxyNotifyInfoRsp::clear_notify_url() {
  notify_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetProxyNotifyInfoRsp::notify_url() const {
  // @@protoc_insertion_point(field_get:masterproto.GetProxyNotifyInfoRsp.notify_url)
  return notify_url_.GetNoArena();
}
void GetProxyNotifyInfoRsp::set_notify_url(const ::std::string& value) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetProxyNotifyInfoRsp.notify_url)
}
#if LANG_CXX11
void GetProxyNotifyInfoRsp::set_notify_url(::std::string&& value) {
  
  notify_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetProxyNotifyInfoRsp.notify_url)
}
#endif
void GetProxyNotifyInfoRsp::set_notify_url(const char* value) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetProxyNotifyInfoRsp.notify_url)
}
void GetProxyNotifyInfoRsp::set_notify_url(const char* value, size_t size) {
  
  notify_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetProxyNotifyInfoRsp.notify_url)
}
::std::string* GetProxyNotifyInfoRsp::mutable_notify_url() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetProxyNotifyInfoRsp.notify_url)
  return notify_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetProxyNotifyInfoRsp::release_notify_url() {
  // @@protoc_insertion_point(field_release:masterproto.GetProxyNotifyInfoRsp.notify_url)
  
  return notify_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetProxyNotifyInfoRsp::set_allocated_notify_url(::std::string* notify_url) {
  if (notify_url != NULL) {
    
  } else {
    
  }
  notify_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notify_url);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetProxyNotifyInfoRsp.notify_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterBanReq::kHeaderFieldNumber;
const int SetClusterBanReq::kClusterIdFieldNumber;
const int SetClusterBanReq::kBanReadFieldNumber;
const int SetClusterBanReq::kBanWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterBanReq::SetClusterBanReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterBanReq)
}
SetClusterBanReq::SetClusterBanReq(const SetClusterBanReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ban_read_, &from.ban_read_,
    reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&ban_read_) + sizeof(ban_write_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterBanReq)
}

void SetClusterBanReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&header_) + sizeof(ban_write_));
  _cached_size_ = 0;
}

SetClusterBanReq::~SetClusterBanReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterBanReq)
  SharedDtor();
}

void SetClusterBanReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterBanReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterBanReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[143].descriptor;
}

const SetClusterBanReq& SetClusterBanReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterBanReq* SetClusterBanReq::New(::google::protobuf::Arena* arena) const {
  SetClusterBanReq* n = new SetClusterBanReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterBanReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterBanReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&ban_read_, 0, reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&ban_read_) + sizeof(ban_write_));
}

bool SetClusterBanReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterBanReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetClusterBanReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ban_read = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ban_write = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_write_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterBanReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterBanReq)
  return false;
#undef DO_
}

void SetClusterBanReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterBanReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterBanReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // bool ban_read = 3;
  if (this->ban_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ban_read(), output);
  }

  // bool ban_write = 4;
  if (this->ban_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ban_write(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterBanReq)
}

::google::protobuf::uint8* SetClusterBanReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterBanReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterBanReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // bool ban_read = 3;
  if (this->ban_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ban_read(), target);
  }

  // bool ban_write = 4;
  if (this->ban_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ban_write(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterBanReq)
  return target;
}

size_t SetClusterBanReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterBanReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool ban_read = 3;
  if (this->ban_read() != 0) {
    total_size += 1 + 1;
  }

  // bool ban_write = 4;
  if (this->ban_write() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterBanReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterBanReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterBanReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterBanReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterBanReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterBanReq)
    MergeFrom(*source);
  }
}

void SetClusterBanReq::MergeFrom(const SetClusterBanReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterBanReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.ban_read() != 0) {
    set_ban_read(from.ban_read());
  }
  if (from.ban_write() != 0) {
    set_ban_write(from.ban_write());
  }
}

void SetClusterBanReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterBanReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterBanReq::CopyFrom(const SetClusterBanReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterBanReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterBanReq::IsInitialized() const {
  return true;
}

void SetClusterBanReq::Swap(SetClusterBanReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterBanReq::InternalSwap(SetClusterBanReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(ban_read_, other->ban_read_);
  std::swap(ban_write_, other->ban_write_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterBanReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[143];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterBanReq

// .cmongoproto.ReqHeader header = 1;
bool SetClusterBanReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterBanReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetClusterBanReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBanReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetClusterBanReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBanReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetClusterBanReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBanReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterBanReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBanReq.header)
}

// string cluster_id = 2;
void SetClusterBanReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetClusterBanReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBanReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetClusterBanReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBanReq.cluster_id)
}
#if LANG_CXX11
void SetClusterBanReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetClusterBanReq.cluster_id)
}
#endif
void SetClusterBanReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetClusterBanReq.cluster_id)
}
void SetClusterBanReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetClusterBanReq.cluster_id)
}
::std::string* SetClusterBanReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBanReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetClusterBanReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBanReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetClusterBanReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBanReq.cluster_id)
}

// bool ban_read = 3;
void SetClusterBanReq::clear_ban_read() {
  ban_read_ = false;
}
bool SetClusterBanReq::ban_read() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBanReq.ban_read)
  return ban_read_;
}
void SetClusterBanReq::set_ban_read(bool value) {
  
  ban_read_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBanReq.ban_read)
}

// bool ban_write = 4;
void SetClusterBanReq::clear_ban_write() {
  ban_write_ = false;
}
bool SetClusterBanReq::ban_write() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBanReq.ban_write)
  return ban_write_;
}
void SetClusterBanReq::set_ban_write(bool value) {
  
  ban_write_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBanReq.ban_write)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterBanRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterBanRsp::SetClusterBanRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterBanRsp)
}
SetClusterBanRsp::SetClusterBanRsp(const SetClusterBanRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterBanRsp)
}

void SetClusterBanRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetClusterBanRsp::~SetClusterBanRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterBanRsp)
  SharedDtor();
}

void SetClusterBanRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterBanRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterBanRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[144].descriptor;
}

const SetClusterBanRsp& SetClusterBanRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterBanRsp* SetClusterBanRsp::New(::google::protobuf::Arena* arena) const {
  SetClusterBanRsp* n = new SetClusterBanRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterBanRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterBanRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetClusterBanRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterBanRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterBanRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterBanRsp)
  return false;
#undef DO_
}

void SetClusterBanRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterBanRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterBanRsp)
}

::google::protobuf::uint8* SetClusterBanRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterBanRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterBanRsp)
  return target;
}

size_t SetClusterBanRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterBanRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterBanRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterBanRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterBanRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterBanRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterBanRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterBanRsp)
    MergeFrom(*source);
  }
}

void SetClusterBanRsp::MergeFrom(const SetClusterBanRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterBanRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetClusterBanRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterBanRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterBanRsp::CopyFrom(const SetClusterBanRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterBanRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterBanRsp::IsInitialized() const {
  return true;
}

void SetClusterBanRsp::Swap(SetClusterBanRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterBanRsp::InternalSwap(SetClusterBanRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterBanRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[144];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterBanRsp

// .cmongoproto.ResHeader header = 1;
bool SetClusterBanRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterBanRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetClusterBanRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBanRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetClusterBanRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBanRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetClusterBanRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBanRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterBanRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBanRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterBanReq::kHeaderFieldNumber;
const int GetClusterBanReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterBanReq::GetClusterBanReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterBanReq)
}
GetClusterBanReq::GetClusterBanReq(const GetClusterBanReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterBanReq)
}

void GetClusterBanReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetClusterBanReq::~GetClusterBanReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterBanReq)
  SharedDtor();
}

void GetClusterBanReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterBanReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterBanReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[145].descriptor;
}

const GetClusterBanReq& GetClusterBanReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterBanReq* GetClusterBanReq::New(::google::protobuf::Arena* arena) const {
  GetClusterBanReq* n = new GetClusterBanReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterBanReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterBanReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetClusterBanReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterBanReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetClusterBanReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterBanReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterBanReq)
  return false;
#undef DO_
}

void GetClusterBanReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterBanReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterBanReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterBanReq)
}

::google::protobuf::uint8* GetClusterBanReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterBanReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterBanReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterBanReq)
  return target;
}

size_t GetClusterBanReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterBanReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterBanReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterBanReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterBanReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterBanReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterBanReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterBanReq)
    MergeFrom(*source);
  }
}

void GetClusterBanReq::MergeFrom(const GetClusterBanReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterBanReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
}

void GetClusterBanReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterBanReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterBanReq::CopyFrom(const GetClusterBanReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterBanReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterBanReq::IsInitialized() const {
  return true;
}

void GetClusterBanReq::Swap(GetClusterBanReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterBanReq::InternalSwap(GetClusterBanReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterBanReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[145];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterBanReq

// .cmongoproto.ReqHeader header = 1;
bool GetClusterBanReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterBanReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetClusterBanReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBanReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetClusterBanReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBanReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetClusterBanReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBanReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterBanReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBanReq.header)
}

// string cluster_id = 2;
void GetClusterBanReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterBanReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBanReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterBanReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBanReq.cluster_id)
}
#if LANG_CXX11
void GetClusterBanReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetClusterBanReq.cluster_id)
}
#endif
void GetClusterBanReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetClusterBanReq.cluster_id)
}
void GetClusterBanReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetClusterBanReq.cluster_id)
}
::std::string* GetClusterBanReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBanReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterBanReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBanReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterBanReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBanReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterBanRsp::kHeaderFieldNumber;
const int GetClusterBanRsp::kBanReadFieldNumber;
const int GetClusterBanRsp::kBanWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterBanRsp::GetClusterBanRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterBanRsp)
}
GetClusterBanRsp::GetClusterBanRsp(const GetClusterBanRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ban_read_, &from.ban_read_,
    reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&ban_read_) + sizeof(ban_write_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterBanRsp)
}

void GetClusterBanRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&header_) + sizeof(ban_write_));
  _cached_size_ = 0;
}

GetClusterBanRsp::~GetClusterBanRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterBanRsp)
  SharedDtor();
}

void GetClusterBanRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterBanRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterBanRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[146].descriptor;
}

const GetClusterBanRsp& GetClusterBanRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterBanRsp* GetClusterBanRsp::New(::google::protobuf::Arena* arena) const {
  GetClusterBanRsp* n = new GetClusterBanRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterBanRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterBanRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&ban_read_, 0, reinterpret_cast<char*>(&ban_write_) -
    reinterpret_cast<char*>(&ban_read_) + sizeof(ban_write_));
}

bool GetClusterBanRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterBanRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ban_read = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ban_write = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_write_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterBanRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterBanRsp)
  return false;
#undef DO_
}

void GetClusterBanRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterBanRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool ban_read = 2;
  if (this->ban_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ban_read(), output);
  }

  // bool ban_write = 3;
  if (this->ban_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ban_write(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterBanRsp)
}

::google::protobuf::uint8* GetClusterBanRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterBanRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // bool ban_read = 2;
  if (this->ban_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ban_read(), target);
  }

  // bool ban_write = 3;
  if (this->ban_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ban_write(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterBanRsp)
  return target;
}

size_t GetClusterBanRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterBanRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // bool ban_read = 2;
  if (this->ban_read() != 0) {
    total_size += 1 + 1;
  }

  // bool ban_write = 3;
  if (this->ban_write() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterBanRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterBanRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterBanRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterBanRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterBanRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterBanRsp)
    MergeFrom(*source);
  }
}

void GetClusterBanRsp::MergeFrom(const GetClusterBanRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterBanRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.ban_read() != 0) {
    set_ban_read(from.ban_read());
  }
  if (from.ban_write() != 0) {
    set_ban_write(from.ban_write());
  }
}

void GetClusterBanRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterBanRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterBanRsp::CopyFrom(const GetClusterBanRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterBanRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterBanRsp::IsInitialized() const {
  return true;
}

void GetClusterBanRsp::Swap(GetClusterBanRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterBanRsp::InternalSwap(GetClusterBanRsp* other) {
  std::swap(header_, other->header_);
  std::swap(ban_read_, other->ban_read_);
  std::swap(ban_write_, other->ban_write_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterBanRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[146];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterBanRsp

// .cmongoproto.ResHeader header = 1;
bool GetClusterBanRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterBanRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetClusterBanRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBanRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetClusterBanRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBanRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetClusterBanRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBanRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterBanRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBanRsp.header)
}

// bool ban_read = 2;
void GetClusterBanRsp::clear_ban_read() {
  ban_read_ = false;
}
bool GetClusterBanRsp::ban_read() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBanRsp.ban_read)
  return ban_read_;
}
void GetClusterBanRsp::set_ban_read(bool value) {
  
  ban_read_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBanRsp.ban_read)
}

// bool ban_write = 3;
void GetClusterBanRsp::clear_ban_write() {
  ban_write_ = false;
}
bool GetClusterBanRsp::ban_write() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBanRsp.ban_write)
  return ban_write_;
}
void GetClusterBanRsp::set_ban_write(bool value) {
  
  ban_write_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBanRsp.ban_write)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetVersionReq::kHeaderFieldNumber;
const int SetVersionReq::kRegionIdFieldNumber;
const int SetVersionReq::kSetIdFieldNumber;
const int SetVersionReq::kMongodSubversionFieldNumber;
const int SetVersionReq::kProxyVersionFieldNumber;
const int SetVersionReq::kDynamoProxyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetVersionReq::SetVersionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetVersionReq)
}
SetVersionReq::SetVersionReq(const SetVersionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetVersionReq)
}

void SetVersionReq::SharedCtor() {
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

SetVersionReq::~SetVersionReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetVersionReq)
  SharedDtor();
}

void SetVersionReq::SharedDtor() {
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetVersionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetVersionReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[147].descriptor;
}

const SetVersionReq& SetVersionReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetVersionReq* SetVersionReq::New(::google::protobuf::Arena* arena) const {
  SetVersionReq* n = new SetVersionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetVersionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetVersionReq)
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool SetVersionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetVersionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetVersionReq.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetVersionReq.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetVersionReq.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetVersionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetVersionReq)
  return false;
#undef DO_
}

void SetVersionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetVersionReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string mongod_subversion = 4;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mongod_subversion(), output);
  }

  // string proxy_version = 5;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->proxy_version(), output);
  }

  // string dynamo_proxy_version = 6;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dynamo_proxy_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetVersionReq)
}

::google::protobuf::uint8* SetVersionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetVersionReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string mongod_subversion = 4;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mongod_subversion(), target);
  }

  // string proxy_version = 5;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->proxy_version(), target);
  }

  // string dynamo_proxy_version = 6;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetVersionReq.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dynamo_proxy_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetVersionReq)
  return target;
}

size_t SetVersionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetVersionReq)
  size_t total_size = 0;

  // string mongod_subversion = 4;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string proxy_version = 5;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string dynamo_proxy_version = 6;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetVersionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVersionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetVersionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetVersionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetVersionReq)
    MergeFrom(*source);
  }
}

void SetVersionReq::MergeFrom(const SetVersionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void SetVersionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVersionReq::CopyFrom(const SetVersionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVersionReq::IsInitialized() const {
  return true;
}

void SetVersionReq::Swap(SetVersionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetVersionReq::InternalSwap(SetVersionReq* other) {
  mongod_subversion_.Swap(&other->mongod_subversion_);
  proxy_version_.Swap(&other->proxy_version_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetVersionReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[147];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetVersionReq

// .cmongoproto.ReqHeader header = 1;
bool SetVersionReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetVersionReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetVersionReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetVersionReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetVersionReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetVersionReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetVersionReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetVersionReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetVersionReq.header)
}

// int32 region_id = 2;
void SetVersionReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 SetVersionReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.region_id)
  return region_id_;
}
void SetVersionReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetVersionReq.region_id)
}

// int32 set_id = 3;
void SetVersionReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 SetVersionReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.set_id)
  return set_id_;
}
void SetVersionReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetVersionReq.set_id)
}

// string mongod_subversion = 4;
void SetVersionReq::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetVersionReq::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void SetVersionReq::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetVersionReq.mongod_subversion)
}
#if LANG_CXX11
void SetVersionReq::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetVersionReq.mongod_subversion)
}
#endif
void SetVersionReq::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetVersionReq.mongod_subversion)
}
void SetVersionReq::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetVersionReq.mongod_subversion)
}
::std::string* SetVersionReq::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetVersionReq.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetVersionReq::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.SetVersionReq.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetVersionReq::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetVersionReq.mongod_subversion)
}

// string proxy_version = 5;
void SetVersionReq::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetVersionReq::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.proxy_version)
  return proxy_version_.GetNoArena();
}
void SetVersionReq::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetVersionReq.proxy_version)
}
#if LANG_CXX11
void SetVersionReq::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetVersionReq.proxy_version)
}
#endif
void SetVersionReq::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetVersionReq.proxy_version)
}
void SetVersionReq::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetVersionReq.proxy_version)
}
::std::string* SetVersionReq::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetVersionReq.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetVersionReq::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.SetVersionReq.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetVersionReq::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetVersionReq.proxy_version)
}

// string dynamo_proxy_version = 6;
void SetVersionReq::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetVersionReq::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionReq.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void SetVersionReq::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetVersionReq.dynamo_proxy_version)
}
#if LANG_CXX11
void SetVersionReq::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetVersionReq.dynamo_proxy_version)
}
#endif
void SetVersionReq::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetVersionReq.dynamo_proxy_version)
}
void SetVersionReq::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetVersionReq.dynamo_proxy_version)
}
::std::string* SetVersionReq::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetVersionReq.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetVersionReq::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.SetVersionReq.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetVersionReq::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetVersionReq.dynamo_proxy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetVersionRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetVersionRsp::SetVersionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetVersionRsp)
}
SetVersionRsp::SetVersionRsp(const SetVersionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetVersionRsp)
}

void SetVersionRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetVersionRsp::~SetVersionRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetVersionRsp)
  SharedDtor();
}

void SetVersionRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetVersionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetVersionRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[148].descriptor;
}

const SetVersionRsp& SetVersionRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetVersionRsp* SetVersionRsp::New(::google::protobuf::Arena* arena) const {
  SetVersionRsp* n = new SetVersionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetVersionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetVersionRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetVersionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetVersionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetVersionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetVersionRsp)
  return false;
#undef DO_
}

void SetVersionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetVersionRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetVersionRsp)
}

::google::protobuf::uint8* SetVersionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetVersionRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetVersionRsp)
  return target;
}

size_t SetVersionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetVersionRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetVersionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetVersionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVersionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetVersionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetVersionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetVersionRsp)
    MergeFrom(*source);
  }
}

void SetVersionRsp::MergeFrom(const SetVersionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetVersionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetVersionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetVersionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVersionRsp::CopyFrom(const SetVersionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetVersionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVersionRsp::IsInitialized() const {
  return true;
}

void SetVersionRsp::Swap(SetVersionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetVersionRsp::InternalSwap(SetVersionRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetVersionRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[148];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetVersionRsp

// .cmongoproto.ResHeader header = 1;
bool SetVersionRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetVersionRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetVersionRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetVersionRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetVersionRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetVersionRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetVersionRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetVersionRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetVersionRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetVersionRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVersionReq::kHeaderFieldNumber;
const int GetVersionReq::kRegionIdFieldNumber;
const int GetVersionReq::kSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVersionReq::GetVersionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetVersionReq)
}
GetVersionReq::GetVersionReq(const GetVersionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetVersionReq)
}

void GetVersionReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

GetVersionReq::~GetVersionReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetVersionReq)
  SharedDtor();
}

void GetVersionReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetVersionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVersionReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[149].descriptor;
}

const GetVersionReq& GetVersionReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetVersionReq* GetVersionReq::New(::google::protobuf::Arena* arena) const {
  GetVersionReq* n = new GetVersionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVersionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetVersionReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool GetVersionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetVersionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetVersionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetVersionReq)
  return false;
#undef DO_
}

void GetVersionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetVersionReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetVersionReq)
}

::google::protobuf::uint8* GetVersionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetVersionReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetVersionReq)
  return target;
}

size_t GetVersionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetVersionReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVersionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVersionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVersionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetVersionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetVersionReq)
    MergeFrom(*source);
  }
}

void GetVersionReq::MergeFrom(const GetVersionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void GetVersionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVersionReq::CopyFrom(const GetVersionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionReq::IsInitialized() const {
  return true;
}

void GetVersionReq::Swap(GetVersionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVersionReq::InternalSwap(GetVersionReq* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVersionReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[149];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetVersionReq

// .cmongoproto.ReqHeader header = 1;
bool GetVersionReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetVersionReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetVersionReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetVersionReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetVersionReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetVersionReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetVersionReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetVersionReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetVersionReq.header)
}

// int32 region_id = 2;
void GetVersionReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 GetVersionReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionReq.region_id)
  return region_id_;
}
void GetVersionReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetVersionReq.region_id)
}

// int32 set_id = 3;
void GetVersionReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 GetVersionReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionReq.set_id)
  return set_id_;
}
void GetVersionReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetVersionReq.set_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVersionRsp::kHeaderFieldNumber;
const int GetVersionRsp::kMongodSubversionFieldNumber;
const int GetVersionRsp::kProxyVersionFieldNumber;
const int GetVersionRsp::kDynamoProxyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVersionRsp::GetVersionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetVersionRsp)
}
GetVersionRsp::GetVersionRsp(const GetVersionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mongod_subversion().size() > 0) {
    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_version().size() > 0) {
    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynamo_proxy_version().size() > 0) {
    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetVersionRsp)
}

void GetVersionRsp::SharedCtor() {
  mongod_subversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetVersionRsp::~GetVersionRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetVersionRsp)
  SharedDtor();
}

void GetVersionRsp::SharedDtor() {
  mongod_subversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetVersionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVersionRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[150].descriptor;
}

const GetVersionRsp& GetVersionRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetVersionRsp* GetVersionRsp::New(::google::protobuf::Arena* arena) const {
  GetVersionRsp* n = new GetVersionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetVersionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetVersionRsp)
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetVersionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetVersionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mongod_subversion = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongod_subversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mongod_subversion().data(), this->mongod_subversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetVersionRsp.mongod_subversion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_version = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_version().data(), this->proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetVersionRsp.proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dynamo_proxy_version = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamo_proxy_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetVersionRsp.dynamo_proxy_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetVersionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetVersionRsp)
  return false;
#undef DO_
}

void GetVersionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetVersionRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string mongod_subversion = 2;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.mongod_subversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mongod_subversion(), output);
  }

  // string proxy_version = 3;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxy_version(), output);
  }

  // string dynamo_proxy_version = 4;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.dynamo_proxy_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dynamo_proxy_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetVersionRsp)
}

::google::protobuf::uint8* GetVersionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetVersionRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string mongod_subversion = 2;
  if (this->mongod_subversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mongod_subversion().data(), this->mongod_subversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.mongod_subversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mongod_subversion(), target);
  }

  // string proxy_version = 3;
  if (this->proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_version().data(), this->proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxy_version(), target);
  }

  // string dynamo_proxy_version = 4;
  if (this->dynamo_proxy_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynamo_proxy_version().data(), this->dynamo_proxy_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetVersionRsp.dynamo_proxy_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dynamo_proxy_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetVersionRsp)
  return target;
}

size_t GetVersionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetVersionRsp)
  size_t total_size = 0;

  // string mongod_subversion = 2;
  if (this->mongod_subversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mongod_subversion());
  }

  // string proxy_version = 3;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_version());
  }

  // string dynamo_proxy_version = 4;
  if (this->dynamo_proxy_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dynamo_proxy_version());
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVersionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetVersionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVersionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVersionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetVersionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetVersionRsp)
    MergeFrom(*source);
  }
}

void GetVersionRsp::MergeFrom(const GetVersionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetVersionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mongod_subversion().size() > 0) {

    mongod_subversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongod_subversion_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.dynamo_proxy_version().size() > 0) {

    dynamo_proxy_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamo_proxy_version_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GetVersionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetVersionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVersionRsp::CopyFrom(const GetVersionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetVersionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionRsp::IsInitialized() const {
  return true;
}

void GetVersionRsp::Swap(GetVersionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVersionRsp::InternalSwap(GetVersionRsp* other) {
  mongod_subversion_.Swap(&other->mongod_subversion_);
  proxy_version_.Swap(&other->proxy_version_);
  dynamo_proxy_version_.Swap(&other->dynamo_proxy_version_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVersionRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[150];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetVersionRsp

// .cmongoproto.ResHeader header = 1;
bool GetVersionRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetVersionRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetVersionRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetVersionRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetVersionRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetVersionRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetVersionRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetVersionRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetVersionRsp.header)
}

// string mongod_subversion = 2;
void GetVersionRsp::clear_mongod_subversion() {
  mongod_subversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetVersionRsp::mongod_subversion() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionRsp.mongod_subversion)
  return mongod_subversion_.GetNoArena();
}
void GetVersionRsp::set_mongod_subversion(const ::std::string& value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetVersionRsp.mongod_subversion)
}
#if LANG_CXX11
void GetVersionRsp::set_mongod_subversion(::std::string&& value) {
  
  mongod_subversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetVersionRsp.mongod_subversion)
}
#endif
void GetVersionRsp::set_mongod_subversion(const char* value) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetVersionRsp.mongod_subversion)
}
void GetVersionRsp::set_mongod_subversion(const char* value, size_t size) {
  
  mongod_subversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetVersionRsp.mongod_subversion)
}
::std::string* GetVersionRsp::mutable_mongod_subversion() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetVersionRsp.mongod_subversion)
  return mongod_subversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetVersionRsp::release_mongod_subversion() {
  // @@protoc_insertion_point(field_release:masterproto.GetVersionRsp.mongod_subversion)
  
  return mongod_subversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetVersionRsp::set_allocated_mongod_subversion(::std::string* mongod_subversion) {
  if (mongod_subversion != NULL) {
    
  } else {
    
  }
  mongod_subversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongod_subversion);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetVersionRsp.mongod_subversion)
}

// string proxy_version = 3;
void GetVersionRsp::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetVersionRsp::proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionRsp.proxy_version)
  return proxy_version_.GetNoArena();
}
void GetVersionRsp::set_proxy_version(const ::std::string& value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetVersionRsp.proxy_version)
}
#if LANG_CXX11
void GetVersionRsp::set_proxy_version(::std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetVersionRsp.proxy_version)
}
#endif
void GetVersionRsp::set_proxy_version(const char* value) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetVersionRsp.proxy_version)
}
void GetVersionRsp::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetVersionRsp.proxy_version)
}
::std::string* GetVersionRsp::mutable_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetVersionRsp.proxy_version)
  return proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetVersionRsp::release_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.GetVersionRsp.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetVersionRsp::set_allocated_proxy_version(::std::string* proxy_version) {
  if (proxy_version != NULL) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetVersionRsp.proxy_version)
}

// string dynamo_proxy_version = 4;
void GetVersionRsp::clear_dynamo_proxy_version() {
  dynamo_proxy_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetVersionRsp::dynamo_proxy_version() const {
  // @@protoc_insertion_point(field_get:masterproto.GetVersionRsp.dynamo_proxy_version)
  return dynamo_proxy_version_.GetNoArena();
}
void GetVersionRsp::set_dynamo_proxy_version(const ::std::string& value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetVersionRsp.dynamo_proxy_version)
}
#if LANG_CXX11
void GetVersionRsp::set_dynamo_proxy_version(::std::string&& value) {
  
  dynamo_proxy_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetVersionRsp.dynamo_proxy_version)
}
#endif
void GetVersionRsp::set_dynamo_proxy_version(const char* value) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetVersionRsp.dynamo_proxy_version)
}
void GetVersionRsp::set_dynamo_proxy_version(const char* value, size_t size) {
  
  dynamo_proxy_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetVersionRsp.dynamo_proxy_version)
}
::std::string* GetVersionRsp::mutable_dynamo_proxy_version() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetVersionRsp.dynamo_proxy_version)
  return dynamo_proxy_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetVersionRsp::release_dynamo_proxy_version() {
  // @@protoc_insertion_point(field_release:masterproto.GetVersionRsp.dynamo_proxy_version)
  
  return dynamo_proxy_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetVersionRsp::set_allocated_dynamo_proxy_version(::std::string* dynamo_proxy_version) {
  if (dynamo_proxy_version != NULL) {
    
  } else {
    
  }
  dynamo_proxy_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamo_proxy_version);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetVersionRsp.dynamo_proxy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeOplogReq::kHeaderFieldNumber;
const int ResizeOplogReq::kRegionIdFieldNumber;
const int ResizeOplogReq::kSetIdFieldNumber;
const int ResizeOplogReq::kClusterIdFieldNumber;
const int ResizeOplogReq::kSizeMBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeOplogReq::ResizeOplogReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ResizeOplogReq)
}
ResizeOplogReq::ResizeOplogReq(const ResizeOplogReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&size_mb_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(size_mb_));
  // @@protoc_insertion_point(copy_constructor:masterproto.ResizeOplogReq)
}

void ResizeOplogReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&size_mb_) -
    reinterpret_cast<char*>(&header_) + sizeof(size_mb_));
  _cached_size_ = 0;
}

ResizeOplogReq::~ResizeOplogReq() {
  // @@protoc_insertion_point(destructor:masterproto.ResizeOplogReq)
  SharedDtor();
}

void ResizeOplogReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ResizeOplogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeOplogReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[151].descriptor;
}

const ResizeOplogReq& ResizeOplogReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeOplogReq* ResizeOplogReq::New(::google::protobuf::Arena* arena) const {
  ResizeOplogReq* n = new ResizeOplogReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeOplogReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ResizeOplogReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&size_mb_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(size_mb_));
}

bool ResizeOplogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ResizeOplogReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.ResizeOplogReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size_mB = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ResizeOplogReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ResizeOplogReq)
  return false;
#undef DO_
}

void ResizeOplogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ResizeOplogReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ResizeOplogReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // int32 size_mB = 5;
  if (this->size_mb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->size_mb(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ResizeOplogReq)
}

::google::protobuf::uint8* ResizeOplogReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ResizeOplogReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.ResizeOplogReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // int32 size_mB = 5;
  if (this->size_mb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->size_mb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ResizeOplogReq)
  return target;
}

size_t ResizeOplogReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ResizeOplogReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // int32 size_mB = 5;
  if (this->size_mb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_mb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeOplogReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ResizeOplogReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeOplogReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeOplogReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ResizeOplogReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ResizeOplogReq)
    MergeFrom(*source);
  }
}

void ResizeOplogReq::MergeFrom(const ResizeOplogReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ResizeOplogReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.size_mb() != 0) {
    set_size_mb(from.size_mb());
  }
}

void ResizeOplogReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ResizeOplogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeOplogReq::CopyFrom(const ResizeOplogReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ResizeOplogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeOplogReq::IsInitialized() const {
  return true;
}

void ResizeOplogReq::Swap(ResizeOplogReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeOplogReq::InternalSwap(ResizeOplogReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(size_mb_, other->size_mb_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeOplogReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[151];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeOplogReq

// .cmongoproto.ReqHeader header = 1;
bool ResizeOplogReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeOplogReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& ResizeOplogReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* ResizeOplogReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeOplogReq.header)
  return header_;
}
::cmongoproto::ReqHeader* ResizeOplogReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeOplogReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeOplogReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeOplogReq.header)
}

// int32 region_id = 2;
void ResizeOplogReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 ResizeOplogReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogReq.region_id)
  return region_id_;
}
void ResizeOplogReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeOplogReq.region_id)
}

// int32 set_id = 3;
void ResizeOplogReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 ResizeOplogReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogReq.set_id)
  return set_id_;
}
void ResizeOplogReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeOplogReq.set_id)
}

// string cluster_id = 4;
void ResizeOplogReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResizeOplogReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void ResizeOplogReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.ResizeOplogReq.cluster_id)
}
#if LANG_CXX11
void ResizeOplogReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.ResizeOplogReq.cluster_id)
}
#endif
void ResizeOplogReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.ResizeOplogReq.cluster_id)
}
void ResizeOplogReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.ResizeOplogReq.cluster_id)
}
::std::string* ResizeOplogReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeOplogReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResizeOplogReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeOplogReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResizeOplogReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeOplogReq.cluster_id)
}

// int32 size_mB = 5;
void ResizeOplogReq::clear_size_mb() {
  size_mb_ = 0;
}
::google::protobuf::int32 ResizeOplogReq::size_mb() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogReq.size_mB)
  return size_mb_;
}
void ResizeOplogReq::set_size_mb(::google::protobuf::int32 value) {
  
  size_mb_ = value;
  // @@protoc_insertion_point(field_set:masterproto.ResizeOplogReq.size_mB)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeOplogRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeOplogRsp::ResizeOplogRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.ResizeOplogRsp)
}
ResizeOplogRsp::ResizeOplogRsp(const ResizeOplogRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.ResizeOplogRsp)
}

void ResizeOplogRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ResizeOplogRsp::~ResizeOplogRsp() {
  // @@protoc_insertion_point(destructor:masterproto.ResizeOplogRsp)
  SharedDtor();
}

void ResizeOplogRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ResizeOplogRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeOplogRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[152].descriptor;
}

const ResizeOplogRsp& ResizeOplogRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeOplogRsp* ResizeOplogRsp::New(::google::protobuf::Arena* arena) const {
  ResizeOplogRsp* n = new ResizeOplogRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeOplogRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.ResizeOplogRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool ResizeOplogRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.ResizeOplogRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.ResizeOplogRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.ResizeOplogRsp)
  return false;
#undef DO_
}

void ResizeOplogRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.ResizeOplogRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.ResizeOplogRsp)
}

::google::protobuf::uint8* ResizeOplogRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.ResizeOplogRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.ResizeOplogRsp)
  return target;
}

size_t ResizeOplogRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.ResizeOplogRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeOplogRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.ResizeOplogRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeOplogRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeOplogRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.ResizeOplogRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.ResizeOplogRsp)
    MergeFrom(*source);
  }
}

void ResizeOplogRsp::MergeFrom(const ResizeOplogRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.ResizeOplogRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void ResizeOplogRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.ResizeOplogRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeOplogRsp::CopyFrom(const ResizeOplogRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.ResizeOplogRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeOplogRsp::IsInitialized() const {
  return true;
}

void ResizeOplogRsp::Swap(ResizeOplogRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeOplogRsp::InternalSwap(ResizeOplogRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeOplogRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[152];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeOplogRsp

// .cmongoproto.ResHeader header = 1;
bool ResizeOplogRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ResizeOplogRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& ResizeOplogRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.ResizeOplogRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* ResizeOplogRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.ResizeOplogRsp.header)
  return header_;
}
::cmongoproto::ResHeader* ResizeOplogRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.ResizeOplogRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResizeOplogRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.ResizeOplogRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestartContainerReq::kHeaderFieldNumber;
const int RestartContainerReq::kClusterIdFieldNumber;
const int RestartContainerReq::kContainerTypeFieldNumber;
const int RestartContainerReq::kContainerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestartContainerReq::RestartContainerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestartContainerReq)
}
RestartContainerReq::RestartContainerReq(const RestartContainerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_name().size() > 0) {
    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  container_type_ = from.container_type_;
  // @@protoc_insertion_point(copy_constructor:masterproto.RestartContainerReq)
}

void RestartContainerReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&container_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(container_type_));
  _cached_size_ = 0;
}

RestartContainerReq::~RestartContainerReq() {
  // @@protoc_insertion_point(destructor:masterproto.RestartContainerReq)
  SharedDtor();
}

void RestartContainerReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestartContainerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartContainerReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[153].descriptor;
}

const RestartContainerReq& RestartContainerReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestartContainerReq* RestartContainerReq::New(::google::protobuf::Arena* arena) const {
  RestartContainerReq* n = new RestartContainerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestartContainerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestartContainerReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  container_type_ = 0;
}

bool RestartContainerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestartContainerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestartContainerReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cmongoproto.MongoType container_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_container_type(static_cast< ::cmongoproto::MongoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string container_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_name().data(), this->container_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.RestartContainerReq.container_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestartContainerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestartContainerReq)
  return false;
#undef DO_
}

void RestartContainerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestartContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestartContainerReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->container_type(), output);
  }

  // string container_name = 4;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), this->container_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestartContainerReq.container_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->container_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestartContainerReq)
}

::google::protobuf::uint8* RestartContainerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestartContainerReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestartContainerReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->container_type(), target);
  }

  // string container_name = 4;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), this->container_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.RestartContainerReq.container_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->container_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestartContainerReq)
  return target;
}

size_t RestartContainerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestartContainerReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string container_name = 4;
  if (this->container_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_name());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .cmongoproto.MongoType container_type = 3;
  if (this->container_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartContainerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestartContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartContainerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestartContainerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestartContainerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestartContainerReq)
    MergeFrom(*source);
  }
}

void RestartContainerReq::MergeFrom(const RestartContainerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestartContainerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.container_name().size() > 0) {

    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.container_type() != 0) {
    set_container_type(from.container_type());
  }
}

void RestartContainerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestartContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartContainerReq::CopyFrom(const RestartContainerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestartContainerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartContainerReq::IsInitialized() const {
  return true;
}

void RestartContainerReq::Swap(RestartContainerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestartContainerReq::InternalSwap(RestartContainerReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  container_name_.Swap(&other->container_name_);
  std::swap(header_, other->header_);
  std::swap(container_type_, other->container_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestartContainerReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[153];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestartContainerReq

// .cmongoproto.ReqHeader header = 1;
bool RestartContainerReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestartContainerReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& RestartContainerReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestartContainerReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* RestartContainerReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestartContainerReq.header)
  return header_;
}
::cmongoproto::ReqHeader* RestartContainerReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestartContainerReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestartContainerReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestartContainerReq.header)
}

// string cluster_id = 2;
void RestartContainerReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestartContainerReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.RestartContainerReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void RestartContainerReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestartContainerReq.cluster_id)
}
#if LANG_CXX11
void RestartContainerReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestartContainerReq.cluster_id)
}
#endif
void RestartContainerReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestartContainerReq.cluster_id)
}
void RestartContainerReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestartContainerReq.cluster_id)
}
::std::string* RestartContainerReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestartContainerReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestartContainerReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.RestartContainerReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestartContainerReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestartContainerReq.cluster_id)
}

// .cmongoproto.MongoType container_type = 3;
void RestartContainerReq::clear_container_type() {
  container_type_ = 0;
}
::cmongoproto::MongoType RestartContainerReq::container_type() const {
  // @@protoc_insertion_point(field_get:masterproto.RestartContainerReq.container_type)
  return static_cast< ::cmongoproto::MongoType >(container_type_);
}
void RestartContainerReq::set_container_type(::cmongoproto::MongoType value) {
  
  container_type_ = value;
  // @@protoc_insertion_point(field_set:masterproto.RestartContainerReq.container_type)
}

// string container_name = 4;
void RestartContainerReq::clear_container_name() {
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RestartContainerReq::container_name() const {
  // @@protoc_insertion_point(field_get:masterproto.RestartContainerReq.container_name)
  return container_name_.GetNoArena();
}
void RestartContainerReq::set_container_name(const ::std::string& value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.RestartContainerReq.container_name)
}
#if LANG_CXX11
void RestartContainerReq::set_container_name(::std::string&& value) {
  
  container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.RestartContainerReq.container_name)
}
#endif
void RestartContainerReq::set_container_name(const char* value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.RestartContainerReq.container_name)
}
void RestartContainerReq::set_container_name(const char* value, size_t size) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.RestartContainerReq.container_name)
}
::std::string* RestartContainerReq::mutable_container_name() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.RestartContainerReq.container_name)
  return container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestartContainerReq::release_container_name() {
  // @@protoc_insertion_point(field_release:masterproto.RestartContainerReq.container_name)
  
  return container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestartContainerReq::set_allocated_container_name(::std::string* container_name) {
  if (container_name != NULL) {
    
  } else {
    
  }
  container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_name);
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestartContainerReq.container_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestartContainerRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestartContainerRsp::RestartContainerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.RestartContainerRsp)
}
RestartContainerRsp::RestartContainerRsp(const RestartContainerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.RestartContainerRsp)
}

void RestartContainerRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

RestartContainerRsp::~RestartContainerRsp() {
  // @@protoc_insertion_point(destructor:masterproto.RestartContainerRsp)
  SharedDtor();
}

void RestartContainerRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void RestartContainerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartContainerRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[154].descriptor;
}

const RestartContainerRsp& RestartContainerRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestartContainerRsp* RestartContainerRsp::New(::google::protobuf::Arena* arena) const {
  RestartContainerRsp* n = new RestartContainerRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestartContainerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.RestartContainerRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool RestartContainerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.RestartContainerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.RestartContainerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.RestartContainerRsp)
  return false;
#undef DO_
}

void RestartContainerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.RestartContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.RestartContainerRsp)
}

::google::protobuf::uint8* RestartContainerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.RestartContainerRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.RestartContainerRsp)
  return target;
}

size_t RestartContainerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.RestartContainerRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartContainerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.RestartContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartContainerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestartContainerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.RestartContainerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.RestartContainerRsp)
    MergeFrom(*source);
  }
}

void RestartContainerRsp::MergeFrom(const RestartContainerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.RestartContainerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void RestartContainerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.RestartContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartContainerRsp::CopyFrom(const RestartContainerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.RestartContainerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartContainerRsp::IsInitialized() const {
  return true;
}

void RestartContainerRsp::Swap(RestartContainerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestartContainerRsp::InternalSwap(RestartContainerRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestartContainerRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[154];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestartContainerRsp

// .cmongoproto.ResHeader header = 1;
bool RestartContainerRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RestartContainerRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& RestartContainerRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.RestartContainerRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* RestartContainerRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.RestartContainerRsp.header)
  return header_;
}
::cmongoproto::ResHeader* RestartContainerRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.RestartContainerRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RestartContainerRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.RestartContainerRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterMaxConnsReq::kHeaderFieldNumber;
const int SetClusterMaxConnsReq::kRegionIdFieldNumber;
const int SetClusterMaxConnsReq::kSetIdFieldNumber;
const int SetClusterMaxConnsReq::kClusterIdFieldNumber;
const int SetClusterMaxConnsReq::kConnNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterMaxConnsReq::SetClusterMaxConnsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterMaxConnsReq)
}
SetClusterMaxConnsReq::SetClusterMaxConnsReq(const SetClusterMaxConnsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&conn_num_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(conn_num_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterMaxConnsReq)
}

void SetClusterMaxConnsReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&conn_num_) -
    reinterpret_cast<char*>(&header_) + sizeof(conn_num_));
  _cached_size_ = 0;
}

SetClusterMaxConnsReq::~SetClusterMaxConnsReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterMaxConnsReq)
  SharedDtor();
}

void SetClusterMaxConnsReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterMaxConnsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterMaxConnsReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[155].descriptor;
}

const SetClusterMaxConnsReq& SetClusterMaxConnsReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterMaxConnsReq* SetClusterMaxConnsReq::New(::google::protobuf::Arena* arena) const {
  SetClusterMaxConnsReq* n = new SetClusterMaxConnsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterMaxConnsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterMaxConnsReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&conn_num_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(conn_num_));
}

bool SetClusterMaxConnsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterMaxConnsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetClusterMaxConnsReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conn_num = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterMaxConnsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterMaxConnsReq)
  return false;
#undef DO_
}

void SetClusterMaxConnsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterMaxConnsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterMaxConnsReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // int32 conn_num = 5;
  if (this->conn_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->conn_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterMaxConnsReq)
}

::google::protobuf::uint8* SetClusterMaxConnsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterMaxConnsReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterMaxConnsReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // int32 conn_num = 5;
  if (this->conn_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->conn_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterMaxConnsReq)
  return target;
}

size_t SetClusterMaxConnsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterMaxConnsReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // int32 conn_num = 5;
  if (this->conn_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conn_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterMaxConnsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterMaxConnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterMaxConnsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterMaxConnsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterMaxConnsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterMaxConnsReq)
    MergeFrom(*source);
  }
}

void SetClusterMaxConnsReq::MergeFrom(const SetClusterMaxConnsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterMaxConnsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.conn_num() != 0) {
    set_conn_num(from.conn_num());
  }
}

void SetClusterMaxConnsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterMaxConnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterMaxConnsReq::CopyFrom(const SetClusterMaxConnsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterMaxConnsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterMaxConnsReq::IsInitialized() const {
  return true;
}

void SetClusterMaxConnsReq::Swap(SetClusterMaxConnsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterMaxConnsReq::InternalSwap(SetClusterMaxConnsReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(conn_num_, other->conn_num_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterMaxConnsReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[155];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterMaxConnsReq

// .cmongoproto.ReqHeader header = 1;
bool SetClusterMaxConnsReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterMaxConnsReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetClusterMaxConnsReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetClusterMaxConnsReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterMaxConnsReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetClusterMaxConnsReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterMaxConnsReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterMaxConnsReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterMaxConnsReq.header)
}

// int32 region_id = 2;
void SetClusterMaxConnsReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 SetClusterMaxConnsReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsReq.region_id)
  return region_id_;
}
void SetClusterMaxConnsReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterMaxConnsReq.region_id)
}

// int32 set_id = 3;
void SetClusterMaxConnsReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 SetClusterMaxConnsReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsReq.set_id)
  return set_id_;
}
void SetClusterMaxConnsReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterMaxConnsReq.set_id)
}

// string cluster_id = 4;
void SetClusterMaxConnsReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetClusterMaxConnsReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetClusterMaxConnsReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetClusterMaxConnsReq.cluster_id)
}
#if LANG_CXX11
void SetClusterMaxConnsReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetClusterMaxConnsReq.cluster_id)
}
#endif
void SetClusterMaxConnsReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetClusterMaxConnsReq.cluster_id)
}
void SetClusterMaxConnsReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetClusterMaxConnsReq.cluster_id)
}
::std::string* SetClusterMaxConnsReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterMaxConnsReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetClusterMaxConnsReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterMaxConnsReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetClusterMaxConnsReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterMaxConnsReq.cluster_id)
}

// int32 conn_num = 5;
void SetClusterMaxConnsReq::clear_conn_num() {
  conn_num_ = 0;
}
::google::protobuf::int32 SetClusterMaxConnsReq::conn_num() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsReq.conn_num)
  return conn_num_;
}
void SetClusterMaxConnsReq::set_conn_num(::google::protobuf::int32 value) {
  
  conn_num_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterMaxConnsReq.conn_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterMaxConnsRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterMaxConnsRsp::SetClusterMaxConnsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterMaxConnsRsp)
}
SetClusterMaxConnsRsp::SetClusterMaxConnsRsp(const SetClusterMaxConnsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterMaxConnsRsp)
}

void SetClusterMaxConnsRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetClusterMaxConnsRsp::~SetClusterMaxConnsRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterMaxConnsRsp)
  SharedDtor();
}

void SetClusterMaxConnsRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterMaxConnsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterMaxConnsRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[156].descriptor;
}

const SetClusterMaxConnsRsp& SetClusterMaxConnsRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterMaxConnsRsp* SetClusterMaxConnsRsp::New(::google::protobuf::Arena* arena) const {
  SetClusterMaxConnsRsp* n = new SetClusterMaxConnsRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterMaxConnsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterMaxConnsRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetClusterMaxConnsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterMaxConnsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterMaxConnsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterMaxConnsRsp)
  return false;
#undef DO_
}

void SetClusterMaxConnsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterMaxConnsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterMaxConnsRsp)
}

::google::protobuf::uint8* SetClusterMaxConnsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterMaxConnsRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterMaxConnsRsp)
  return target;
}

size_t SetClusterMaxConnsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterMaxConnsRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterMaxConnsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterMaxConnsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterMaxConnsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterMaxConnsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterMaxConnsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterMaxConnsRsp)
    MergeFrom(*source);
  }
}

void SetClusterMaxConnsRsp::MergeFrom(const SetClusterMaxConnsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterMaxConnsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetClusterMaxConnsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterMaxConnsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterMaxConnsRsp::CopyFrom(const SetClusterMaxConnsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterMaxConnsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterMaxConnsRsp::IsInitialized() const {
  return true;
}

void SetClusterMaxConnsRsp::Swap(SetClusterMaxConnsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterMaxConnsRsp::InternalSwap(SetClusterMaxConnsRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterMaxConnsRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[156];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterMaxConnsRsp

// .cmongoproto.ResHeader header = 1;
bool SetClusterMaxConnsRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterMaxConnsRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetClusterMaxConnsRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterMaxConnsRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetClusterMaxConnsRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterMaxConnsRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetClusterMaxConnsRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterMaxConnsRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterMaxConnsRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterMaxConnsRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionBackupConfigReq::kHeaderFieldNumber;
const int GetRegionBackupConfigReq::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionBackupConfigReq::GetRegionBackupConfigReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetRegionBackupConfigReq)
}
GetRegionBackupConfigReq::GetRegionBackupConfigReq(const GetRegionBackupConfigReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetRegionBackupConfigReq)
}

void GetRegionBackupConfigReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(region_id_));
  _cached_size_ = 0;
}

GetRegionBackupConfigReq::~GetRegionBackupConfigReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetRegionBackupConfigReq)
  SharedDtor();
}

void GetRegionBackupConfigReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetRegionBackupConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionBackupConfigReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[157].descriptor;
}

const GetRegionBackupConfigReq& GetRegionBackupConfigReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRegionBackupConfigReq* GetRegionBackupConfigReq::New(::google::protobuf::Arena* arena) const {
  GetRegionBackupConfigReq* n = new GetRegionBackupConfigReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRegionBackupConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetRegionBackupConfigReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  region_id_ = 0;
}

bool GetRegionBackupConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetRegionBackupConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetRegionBackupConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetRegionBackupConfigReq)
  return false;
#undef DO_
}

void GetRegionBackupConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetRegionBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetRegionBackupConfigReq)
}

::google::protobuf::uint8* GetRegionBackupConfigReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetRegionBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetRegionBackupConfigReq)
  return target;
}

size_t GetRegionBackupConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetRegionBackupConfigReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionBackupConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetRegionBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionBackupConfigReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRegionBackupConfigReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetRegionBackupConfigReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetRegionBackupConfigReq)
    MergeFrom(*source);
  }
}

void GetRegionBackupConfigReq::MergeFrom(const GetRegionBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetRegionBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void GetRegionBackupConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetRegionBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionBackupConfigReq::CopyFrom(const GetRegionBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetRegionBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionBackupConfigReq::IsInitialized() const {
  return true;
}

void GetRegionBackupConfigReq::Swap(GetRegionBackupConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionBackupConfigReq::InternalSwap(GetRegionBackupConfigReq* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRegionBackupConfigReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[157];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRegionBackupConfigReq

// .cmongoproto.ReqHeader header = 1;
bool GetRegionBackupConfigReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRegionBackupConfigReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetRegionBackupConfigReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetRegionBackupConfigReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetRegionBackupConfigReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetRegionBackupConfigReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetRegionBackupConfigReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetRegionBackupConfigReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRegionBackupConfigReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetRegionBackupConfigReq.header)
}

// int32 region_id = 2;
void GetRegionBackupConfigReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 GetRegionBackupConfigReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetRegionBackupConfigReq.region_id)
  return region_id_;
}
void GetRegionBackupConfigReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetRegionBackupConfigReq.region_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionBackupConfigRsp::kHeaderFieldNumber;
const int GetRegionBackupConfigRsp::kAutoBackupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionBackupConfigRsp::GetRegionBackupConfigRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetRegionBackupConfigRsp)
}
GetRegionBackupConfigRsp::GetRegionBackupConfigRsp(const GetRegionBackupConfigRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  auto_backup_ = from.auto_backup_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetRegionBackupConfigRsp)
}

void GetRegionBackupConfigRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&auto_backup_) -
    reinterpret_cast<char*>(&header_) + sizeof(auto_backup_));
  _cached_size_ = 0;
}

GetRegionBackupConfigRsp::~GetRegionBackupConfigRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetRegionBackupConfigRsp)
  SharedDtor();
}

void GetRegionBackupConfigRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetRegionBackupConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionBackupConfigRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[158].descriptor;
}

const GetRegionBackupConfigRsp& GetRegionBackupConfigRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRegionBackupConfigRsp* GetRegionBackupConfigRsp::New(::google::protobuf::Arena* arena) const {
  GetRegionBackupConfigRsp* n = new GetRegionBackupConfigRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRegionBackupConfigRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetRegionBackupConfigRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  auto_backup_ = 0;
}

bool GetRegionBackupConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetRegionBackupConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.AutoBackup auto_backup = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_backup(static_cast< ::masterproto::AutoBackup >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetRegionBackupConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetRegionBackupConfigRsp)
  return false;
#undef DO_
}

void GetRegionBackupConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetRegionBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->auto_backup(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetRegionBackupConfigRsp)
}

::google::protobuf::uint8* GetRegionBackupConfigRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetRegionBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->auto_backup(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetRegionBackupConfigRsp)
  return target;
}

size_t GetRegionBackupConfigRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetRegionBackupConfigRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_backup());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionBackupConfigRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetRegionBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionBackupConfigRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRegionBackupConfigRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetRegionBackupConfigRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetRegionBackupConfigRsp)
    MergeFrom(*source);
  }
}

void GetRegionBackupConfigRsp::MergeFrom(const GetRegionBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetRegionBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.auto_backup() != 0) {
    set_auto_backup(from.auto_backup());
  }
}

void GetRegionBackupConfigRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetRegionBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionBackupConfigRsp::CopyFrom(const GetRegionBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetRegionBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionBackupConfigRsp::IsInitialized() const {
  return true;
}

void GetRegionBackupConfigRsp::Swap(GetRegionBackupConfigRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionBackupConfigRsp::InternalSwap(GetRegionBackupConfigRsp* other) {
  std::swap(header_, other->header_);
  std::swap(auto_backup_, other->auto_backup_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRegionBackupConfigRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[158];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRegionBackupConfigRsp

// .cmongoproto.ResHeader header = 1;
bool GetRegionBackupConfigRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRegionBackupConfigRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetRegionBackupConfigRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetRegionBackupConfigRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetRegionBackupConfigRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetRegionBackupConfigRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetRegionBackupConfigRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetRegionBackupConfigRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRegionBackupConfigRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetRegionBackupConfigRsp.header)
}

// .masterproto.AutoBackup auto_backup = 2;
void GetRegionBackupConfigRsp::clear_auto_backup() {
  auto_backup_ = 0;
}
::masterproto::AutoBackup GetRegionBackupConfigRsp::auto_backup() const {
  // @@protoc_insertion_point(field_get:masterproto.GetRegionBackupConfigRsp.auto_backup)
  return static_cast< ::masterproto::AutoBackup >(auto_backup_);
}
void GetRegionBackupConfigRsp::set_auto_backup(::masterproto::AutoBackup value) {
  
  auto_backup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetRegionBackupConfigRsp.auto_backup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRegionBackupConfigReq::kHeaderFieldNumber;
const int SetRegionBackupConfigReq::kRegionIdFieldNumber;
const int SetRegionBackupConfigReq::kAutoBackupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRegionBackupConfigReq::SetRegionBackupConfigReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetRegionBackupConfigReq)
}
SetRegionBackupConfigReq::SetRegionBackupConfigReq(const SetRegionBackupConfigReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&auto_backup_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(auto_backup_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetRegionBackupConfigReq)
}

void SetRegionBackupConfigReq::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&auto_backup_) -
    reinterpret_cast<char*>(&header_) + sizeof(auto_backup_));
  _cached_size_ = 0;
}

SetRegionBackupConfigReq::~SetRegionBackupConfigReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetRegionBackupConfigReq)
  SharedDtor();
}

void SetRegionBackupConfigReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetRegionBackupConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRegionBackupConfigReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[159].descriptor;
}

const SetRegionBackupConfigReq& SetRegionBackupConfigReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetRegionBackupConfigReq* SetRegionBackupConfigReq::New(::google::protobuf::Arena* arena) const {
  SetRegionBackupConfigReq* n = new SetRegionBackupConfigReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRegionBackupConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetRegionBackupConfigReq)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&auto_backup_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(auto_backup_));
}

bool SetRegionBackupConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetRegionBackupConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.AutoBackup auto_backup = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_backup(static_cast< ::masterproto::AutoBackup >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetRegionBackupConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetRegionBackupConfigReq)
  return false;
#undef DO_
}

void SetRegionBackupConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetRegionBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // .masterproto.AutoBackup auto_backup = 4;
  if (this->auto_backup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->auto_backup(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetRegionBackupConfigReq)
}

::google::protobuf::uint8* SetRegionBackupConfigReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetRegionBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // .masterproto.AutoBackup auto_backup = 4;
  if (this->auto_backup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->auto_backup(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetRegionBackupConfigReq)
  return target;
}

size_t SetRegionBackupConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetRegionBackupConfigReq)
  size_t total_size = 0;

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // .masterproto.AutoBackup auto_backup = 4;
  if (this->auto_backup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_backup());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRegionBackupConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetRegionBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRegionBackupConfigReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRegionBackupConfigReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetRegionBackupConfigReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetRegionBackupConfigReq)
    MergeFrom(*source);
  }
}

void SetRegionBackupConfigReq::MergeFrom(const SetRegionBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetRegionBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.auto_backup() != 0) {
    set_auto_backup(from.auto_backup());
  }
}

void SetRegionBackupConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetRegionBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRegionBackupConfigReq::CopyFrom(const SetRegionBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetRegionBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRegionBackupConfigReq::IsInitialized() const {
  return true;
}

void SetRegionBackupConfigReq::Swap(SetRegionBackupConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRegionBackupConfigReq::InternalSwap(SetRegionBackupConfigReq* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(auto_backup_, other->auto_backup_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRegionBackupConfigReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[159];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRegionBackupConfigReq

// .cmongoproto.ReqHeader header = 1;
bool SetRegionBackupConfigReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetRegionBackupConfigReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetRegionBackupConfigReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetRegionBackupConfigReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetRegionBackupConfigReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetRegionBackupConfigReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetRegionBackupConfigReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetRegionBackupConfigReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetRegionBackupConfigReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetRegionBackupConfigReq.header)
}

// int32 region_id = 2;
void SetRegionBackupConfigReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 SetRegionBackupConfigReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetRegionBackupConfigReq.region_id)
  return region_id_;
}
void SetRegionBackupConfigReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetRegionBackupConfigReq.region_id)
}

// .masterproto.AutoBackup auto_backup = 4;
void SetRegionBackupConfigReq::clear_auto_backup() {
  auto_backup_ = 0;
}
::masterproto::AutoBackup SetRegionBackupConfigReq::auto_backup() const {
  // @@protoc_insertion_point(field_get:masterproto.SetRegionBackupConfigReq.auto_backup)
  return static_cast< ::masterproto::AutoBackup >(auto_backup_);
}
void SetRegionBackupConfigReq::set_auto_backup(::masterproto::AutoBackup value) {
  
  auto_backup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetRegionBackupConfigReq.auto_backup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRegionBackupConfigRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRegionBackupConfigRsp::SetRegionBackupConfigRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetRegionBackupConfigRsp)
}
SetRegionBackupConfigRsp::SetRegionBackupConfigRsp(const SetRegionBackupConfigRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetRegionBackupConfigRsp)
}

void SetRegionBackupConfigRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetRegionBackupConfigRsp::~SetRegionBackupConfigRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetRegionBackupConfigRsp)
  SharedDtor();
}

void SetRegionBackupConfigRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetRegionBackupConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRegionBackupConfigRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[160].descriptor;
}

const SetRegionBackupConfigRsp& SetRegionBackupConfigRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetRegionBackupConfigRsp* SetRegionBackupConfigRsp::New(::google::protobuf::Arena* arena) const {
  SetRegionBackupConfigRsp* n = new SetRegionBackupConfigRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRegionBackupConfigRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetRegionBackupConfigRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetRegionBackupConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetRegionBackupConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetRegionBackupConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetRegionBackupConfigRsp)
  return false;
#undef DO_
}

void SetRegionBackupConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetRegionBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetRegionBackupConfigRsp)
}

::google::protobuf::uint8* SetRegionBackupConfigRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetRegionBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetRegionBackupConfigRsp)
  return target;
}

size_t SetRegionBackupConfigRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetRegionBackupConfigRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRegionBackupConfigRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetRegionBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRegionBackupConfigRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRegionBackupConfigRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetRegionBackupConfigRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetRegionBackupConfigRsp)
    MergeFrom(*source);
  }
}

void SetRegionBackupConfigRsp::MergeFrom(const SetRegionBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetRegionBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetRegionBackupConfigRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetRegionBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRegionBackupConfigRsp::CopyFrom(const SetRegionBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetRegionBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRegionBackupConfigRsp::IsInitialized() const {
  return true;
}

void SetRegionBackupConfigRsp::Swap(SetRegionBackupConfigRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRegionBackupConfigRsp::InternalSwap(SetRegionBackupConfigRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRegionBackupConfigRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[160];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRegionBackupConfigRsp

// .cmongoproto.ResHeader header = 1;
bool SetRegionBackupConfigRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetRegionBackupConfigRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetRegionBackupConfigRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetRegionBackupConfigRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetRegionBackupConfigRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetRegionBackupConfigRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetRegionBackupConfigRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetRegionBackupConfigRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetRegionBackupConfigRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetRegionBackupConfigRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterBackupConfigReq::kHeaderFieldNumber;
const int GetClusterBackupConfigReq::kRegionIdFieldNumber;
const int GetClusterBackupConfigReq::kSetIdFieldNumber;
const int GetClusterBackupConfigReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterBackupConfigReq::GetClusterBackupConfigReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterBackupConfigReq)
}
GetClusterBackupConfigReq::GetClusterBackupConfigReq(const GetClusterBackupConfigReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterBackupConfigReq)
}

void GetClusterBackupConfigReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

GetClusterBackupConfigReq::~GetClusterBackupConfigReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterBackupConfigReq)
  SharedDtor();
}

void GetClusterBackupConfigReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterBackupConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterBackupConfigReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[161].descriptor;
}

const GetClusterBackupConfigReq& GetClusterBackupConfigReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterBackupConfigReq* GetClusterBackupConfigReq::New(::google::protobuf::Arena* arena) const {
  GetClusterBackupConfigReq* n = new GetClusterBackupConfigReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterBackupConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterBackupConfigReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool GetClusterBackupConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterBackupConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetClusterBackupConfigReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterBackupConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterBackupConfigReq)
  return false;
#undef DO_
}

void GetClusterBackupConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterBackupConfigReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterBackupConfigReq)
}

::google::protobuf::uint8* GetClusterBackupConfigReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterBackupConfigReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterBackupConfigReq)
  return target;
}

size_t GetClusterBackupConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterBackupConfigReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterBackupConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterBackupConfigReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterBackupConfigReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterBackupConfigReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterBackupConfigReq)
    MergeFrom(*source);
  }
}

void GetClusterBackupConfigReq::MergeFrom(const GetClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void GetClusterBackupConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterBackupConfigReq::CopyFrom(const GetClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterBackupConfigReq::IsInitialized() const {
  return true;
}

void GetClusterBackupConfigReq::Swap(GetClusterBackupConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterBackupConfigReq::InternalSwap(GetClusterBackupConfigReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterBackupConfigReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[161];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterBackupConfigReq

// .cmongoproto.ReqHeader header = 1;
bool GetClusterBackupConfigReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterBackupConfigReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetClusterBackupConfigReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetClusterBackupConfigReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBackupConfigReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetClusterBackupConfigReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBackupConfigReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterBackupConfigReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBackupConfigReq.header)
}

// int32 region_id = 2;
void GetClusterBackupConfigReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 GetClusterBackupConfigReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigReq.region_id)
  return region_id_;
}
void GetClusterBackupConfigReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBackupConfigReq.region_id)
}

// int32 set_id = 3;
void GetClusterBackupConfigReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 GetClusterBackupConfigReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigReq.set_id)
  return set_id_;
}
void GetClusterBackupConfigReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBackupConfigReq.set_id)
}

// string cluster_id = 4;
void GetClusterBackupConfigReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterBackupConfigReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterBackupConfigReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBackupConfigReq.cluster_id)
}
#if LANG_CXX11
void GetClusterBackupConfigReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetClusterBackupConfigReq.cluster_id)
}
#endif
void GetClusterBackupConfigReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetClusterBackupConfigReq.cluster_id)
}
void GetClusterBackupConfigReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetClusterBackupConfigReq.cluster_id)
}
::std::string* GetClusterBackupConfigReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBackupConfigReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterBackupConfigReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBackupConfigReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterBackupConfigReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBackupConfigReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterBackupConfigRsp::kHeaderFieldNumber;
const int GetClusterBackupConfigRsp::kAutoBackupFieldNumber;
const int GetClusterBackupConfigRsp::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterBackupConfigRsp::GetClusterBackupConfigRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterBackupConfigRsp)
}
GetClusterBackupConfigRsp::GetClusterBackupConfigRsp(const GetClusterBackupConfigRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&auto_backup_, &from.auto_backup_,
    reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&auto_backup_) + sizeof(time_interval_));
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterBackupConfigRsp)
}

void GetClusterBackupConfigRsp::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&header_) + sizeof(time_interval_));
  _cached_size_ = 0;
}

GetClusterBackupConfigRsp::~GetClusterBackupConfigRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterBackupConfigRsp)
  SharedDtor();
}

void GetClusterBackupConfigRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterBackupConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterBackupConfigRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[162].descriptor;
}

const GetClusterBackupConfigRsp& GetClusterBackupConfigRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterBackupConfigRsp* GetClusterBackupConfigRsp::New(::google::protobuf::Arena* arena) const {
  GetClusterBackupConfigRsp* n = new GetClusterBackupConfigRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterBackupConfigRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterBackupConfigRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&auto_backup_, 0, reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&auto_backup_) + sizeof(time_interval_));
}

bool GetClusterBackupConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterBackupConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.AutoBackup auto_backup = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_backup(static_cast< ::masterproto::AutoBackup >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_interval = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterBackupConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterBackupConfigRsp)
  return false;
#undef DO_
}

void GetClusterBackupConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->auto_backup(), output);
  }

  // int32 time_interval = 3;
  if (this->time_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterBackupConfigRsp)
}

::google::protobuf::uint8* GetClusterBackupConfigRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->auto_backup(), target);
  }

  // int32 time_interval = 3;
  if (this->time_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterBackupConfigRsp)
  return target;
}

size_t GetClusterBackupConfigRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterBackupConfigRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .masterproto.AutoBackup auto_backup = 2;
  if (this->auto_backup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_backup());
  }

  // int32 time_interval = 3;
  if (this->time_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterBackupConfigRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterBackupConfigRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterBackupConfigRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterBackupConfigRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterBackupConfigRsp)
    MergeFrom(*source);
  }
}

void GetClusterBackupConfigRsp::MergeFrom(const GetClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
  if (from.auto_backup() != 0) {
    set_auto_backup(from.auto_backup());
  }
  if (from.time_interval() != 0) {
    set_time_interval(from.time_interval());
  }
}

void GetClusterBackupConfigRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterBackupConfigRsp::CopyFrom(const GetClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterBackupConfigRsp::IsInitialized() const {
  return true;
}

void GetClusterBackupConfigRsp::Swap(GetClusterBackupConfigRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterBackupConfigRsp::InternalSwap(GetClusterBackupConfigRsp* other) {
  std::swap(header_, other->header_);
  std::swap(auto_backup_, other->auto_backup_);
  std::swap(time_interval_, other->time_interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterBackupConfigRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[162];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterBackupConfigRsp

// .cmongoproto.ResHeader header = 1;
bool GetClusterBackupConfigRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterBackupConfigRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetClusterBackupConfigRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetClusterBackupConfigRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterBackupConfigRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetClusterBackupConfigRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterBackupConfigRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterBackupConfigRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterBackupConfigRsp.header)
}

// .masterproto.AutoBackup auto_backup = 2;
void GetClusterBackupConfigRsp::clear_auto_backup() {
  auto_backup_ = 0;
}
::masterproto::AutoBackup GetClusterBackupConfigRsp::auto_backup() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigRsp.auto_backup)
  return static_cast< ::masterproto::AutoBackup >(auto_backup_);
}
void GetClusterBackupConfigRsp::set_auto_backup(::masterproto::AutoBackup value) {
  
  auto_backup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBackupConfigRsp.auto_backup)
}

// int32 time_interval = 3;
void GetClusterBackupConfigRsp::clear_time_interval() {
  time_interval_ = 0;
}
::google::protobuf::int32 GetClusterBackupConfigRsp::time_interval() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterBackupConfigRsp.time_interval)
  return time_interval_;
}
void GetClusterBackupConfigRsp::set_time_interval(::google::protobuf::int32 value) {
  
  time_interval_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterBackupConfigRsp.time_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterBackupConfigReq::kHeaderFieldNumber;
const int SetClusterBackupConfigReq::kRegionIdFieldNumber;
const int SetClusterBackupConfigReq::kSetIdFieldNumber;
const int SetClusterBackupConfigReq::kClusterIdFieldNumber;
const int SetClusterBackupConfigReq::kAutoBackupFieldNumber;
const int SetClusterBackupConfigReq::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterBackupConfigReq::SetClusterBackupConfigReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterBackupConfigReq)
}
SetClusterBackupConfigReq::SetClusterBackupConfigReq(const SetClusterBackupConfigReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(time_interval_));
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterBackupConfigReq)
}

void SetClusterBackupConfigReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&header_) + sizeof(time_interval_));
  _cached_size_ = 0;
}

SetClusterBackupConfigReq::~SetClusterBackupConfigReq() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterBackupConfigReq)
  SharedDtor();
}

void SetClusterBackupConfigReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterBackupConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterBackupConfigReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[163].descriptor;
}

const SetClusterBackupConfigReq& SetClusterBackupConfigReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterBackupConfigReq* SetClusterBackupConfigReq::New(::google::protobuf::Arena* arena) const {
  SetClusterBackupConfigReq* n = new SetClusterBackupConfigReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterBackupConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterBackupConfigReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(time_interval_));
}

bool SetClusterBackupConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterBackupConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.SetClusterBackupConfigReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .masterproto.AutoBackup auto_backup = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_backup(static_cast< ::masterproto::AutoBackup >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_interval = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterBackupConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterBackupConfigReq)
  return false;
#undef DO_
}

void SetClusterBackupConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterBackupConfigReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // .masterproto.AutoBackup auto_backup = 5;
  if (this->auto_backup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->auto_backup(), output);
  }

  // int32 time_interval = 6;
  if (this->time_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterBackupConfigReq)
}

::google::protobuf::uint8* SetClusterBackupConfigReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.SetClusterBackupConfigReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // .masterproto.AutoBackup auto_backup = 5;
  if (this->auto_backup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->auto_backup(), target);
  }

  // int32 time_interval = 6;
  if (this->time_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterBackupConfigReq)
  return target;
}

size_t SetClusterBackupConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterBackupConfigReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  // .masterproto.AutoBackup auto_backup = 5;
  if (this->auto_backup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_backup());
  }

  // int32 time_interval = 6;
  if (this->time_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterBackupConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterBackupConfigReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterBackupConfigReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterBackupConfigReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterBackupConfigReq)
    MergeFrom(*source);
  }
}

void SetClusterBackupConfigReq::MergeFrom(const SetClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
  if (from.auto_backup() != 0) {
    set_auto_backup(from.auto_backup());
  }
  if (from.time_interval() != 0) {
    set_time_interval(from.time_interval());
  }
}

void SetClusterBackupConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterBackupConfigReq::CopyFrom(const SetClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterBackupConfigReq::IsInitialized() const {
  return true;
}

void SetClusterBackupConfigReq::Swap(SetClusterBackupConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterBackupConfigReq::InternalSwap(SetClusterBackupConfigReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(auto_backup_, other->auto_backup_);
  std::swap(time_interval_, other->time_interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterBackupConfigReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[163];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterBackupConfigReq

// .cmongoproto.ReqHeader header = 1;
bool SetClusterBackupConfigReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterBackupConfigReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& SetClusterBackupConfigReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* SetClusterBackupConfigReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBackupConfigReq.header)
  return header_;
}
::cmongoproto::ReqHeader* SetClusterBackupConfigReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBackupConfigReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterBackupConfigReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBackupConfigReq.header)
}

// int32 region_id = 2;
void SetClusterBackupConfigReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 SetClusterBackupConfigReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.region_id)
  return region_id_;
}
void SetClusterBackupConfigReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBackupConfigReq.region_id)
}

// int32 set_id = 3;
void SetClusterBackupConfigReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 SetClusterBackupConfigReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.set_id)
  return set_id_;
}
void SetClusterBackupConfigReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBackupConfigReq.set_id)
}

// string cluster_id = 4;
void SetClusterBackupConfigReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetClusterBackupConfigReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetClusterBackupConfigReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBackupConfigReq.cluster_id)
}
#if LANG_CXX11
void SetClusterBackupConfigReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.SetClusterBackupConfigReq.cluster_id)
}
#endif
void SetClusterBackupConfigReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.SetClusterBackupConfigReq.cluster_id)
}
void SetClusterBackupConfigReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.SetClusterBackupConfigReq.cluster_id)
}
::std::string* SetClusterBackupConfigReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBackupConfigReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetClusterBackupConfigReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBackupConfigReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetClusterBackupConfigReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBackupConfigReq.cluster_id)
}

// .masterproto.AutoBackup auto_backup = 5;
void SetClusterBackupConfigReq::clear_auto_backup() {
  auto_backup_ = 0;
}
::masterproto::AutoBackup SetClusterBackupConfigReq::auto_backup() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.auto_backup)
  return static_cast< ::masterproto::AutoBackup >(auto_backup_);
}
void SetClusterBackupConfigReq::set_auto_backup(::masterproto::AutoBackup value) {
  
  auto_backup_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBackupConfigReq.auto_backup)
}

// int32 time_interval = 6;
void SetClusterBackupConfigReq::clear_time_interval() {
  time_interval_ = 0;
}
::google::protobuf::int32 SetClusterBackupConfigReq::time_interval() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigReq.time_interval)
  return time_interval_;
}
void SetClusterBackupConfigReq::set_time_interval(::google::protobuf::int32 value) {
  
  time_interval_ = value;
  // @@protoc_insertion_point(field_set:masterproto.SetClusterBackupConfigReq.time_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClusterBackupConfigRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClusterBackupConfigRsp::SetClusterBackupConfigRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.SetClusterBackupConfigRsp)
}
SetClusterBackupConfigRsp::SetClusterBackupConfigRsp(const SetClusterBackupConfigRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.SetClusterBackupConfigRsp)
}

void SetClusterBackupConfigRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetClusterBackupConfigRsp::~SetClusterBackupConfigRsp() {
  // @@protoc_insertion_point(destructor:masterproto.SetClusterBackupConfigRsp)
  SharedDtor();
}

void SetClusterBackupConfigRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SetClusterBackupConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClusterBackupConfigRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[164].descriptor;
}

const SetClusterBackupConfigRsp& SetClusterBackupConfigRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetClusterBackupConfigRsp* SetClusterBackupConfigRsp::New(::google::protobuf::Arena* arena) const {
  SetClusterBackupConfigRsp* n = new SetClusterBackupConfigRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClusterBackupConfigRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.SetClusterBackupConfigRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool SetClusterBackupConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.SetClusterBackupConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.SetClusterBackupConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.SetClusterBackupConfigRsp)
  return false;
#undef DO_
}

void SetClusterBackupConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.SetClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.SetClusterBackupConfigRsp)
}

::google::protobuf::uint8* SetClusterBackupConfigRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.SetClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.SetClusterBackupConfigRsp)
  return target;
}

size_t SetClusterBackupConfigRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.SetClusterBackupConfigRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClusterBackupConfigRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.SetClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetClusterBackupConfigRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClusterBackupConfigRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.SetClusterBackupConfigRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.SetClusterBackupConfigRsp)
    MergeFrom(*source);
  }
}

void SetClusterBackupConfigRsp::MergeFrom(const SetClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.SetClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void SetClusterBackupConfigRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.SetClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClusterBackupConfigRsp::CopyFrom(const SetClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.SetClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClusterBackupConfigRsp::IsInitialized() const {
  return true;
}

void SetClusterBackupConfigRsp::Swap(SetClusterBackupConfigRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClusterBackupConfigRsp::InternalSwap(SetClusterBackupConfigRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClusterBackupConfigRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[164];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClusterBackupConfigRsp

// .cmongoproto.ResHeader header = 1;
bool SetClusterBackupConfigRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetClusterBackupConfigRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& SetClusterBackupConfigRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.SetClusterBackupConfigRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* SetClusterBackupConfigRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.SetClusterBackupConfigRsp.header)
  return header_;
}
::cmongoproto::ResHeader* SetClusterBackupConfigRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.SetClusterBackupConfigRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetClusterBackupConfigRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.SetClusterBackupConfigRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelClusterBackupConfigReq::kHeaderFieldNumber;
const int DelClusterBackupConfigReq::kRegionIdFieldNumber;
const int DelClusterBackupConfigReq::kSetIdFieldNumber;
const int DelClusterBackupConfigReq::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelClusterBackupConfigReq::DelClusterBackupConfigReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelClusterBackupConfigReq)
}
DelClusterBackupConfigReq::DelClusterBackupConfigReq(const DelClusterBackupConfigReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
  // @@protoc_insertion_point(copy_constructor:masterproto.DelClusterBackupConfigReq)
}

void DelClusterBackupConfigReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(set_id_));
  _cached_size_ = 0;
}

DelClusterBackupConfigReq::~DelClusterBackupConfigReq() {
  // @@protoc_insertion_point(destructor:masterproto.DelClusterBackupConfigReq)
  SharedDtor();
}

void DelClusterBackupConfigReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelClusterBackupConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelClusterBackupConfigReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[165].descriptor;
}

const DelClusterBackupConfigReq& DelClusterBackupConfigReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelClusterBackupConfigReq* DelClusterBackupConfigReq::New(::google::protobuf::Arena* arena) const {
  DelClusterBackupConfigReq* n = new DelClusterBackupConfigReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelClusterBackupConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelClusterBackupConfigReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&set_id_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(set_id_));
}

bool DelClusterBackupConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelClusterBackupConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 set_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.DelClusterBackupConfigReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelClusterBackupConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelClusterBackupConfigReq)
  return false;
#undef DO_
}

void DelClusterBackupConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_id(), output);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelClusterBackupConfigReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelClusterBackupConfigReq)
}

::google::protobuf::uint8* DelClusterBackupConfigReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelClusterBackupConfigReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_id(), target);
  }

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.DelClusterBackupConfigReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelClusterBackupConfigReq)
  return target;
}

size_t DelClusterBackupConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelClusterBackupConfigReq)
  size_t total_size = 0;

  // string cluster_id = 4;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 set_id = 3;
  if (this->set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelClusterBackupConfigReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelClusterBackupConfigReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelClusterBackupConfigReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelClusterBackupConfigReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelClusterBackupConfigReq)
    MergeFrom(*source);
  }
}

void DelClusterBackupConfigReq::MergeFrom(const DelClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelClusterBackupConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.set_id() != 0) {
    set_set_id(from.set_id());
  }
}

void DelClusterBackupConfigReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelClusterBackupConfigReq::CopyFrom(const DelClusterBackupConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelClusterBackupConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelClusterBackupConfigReq::IsInitialized() const {
  return true;
}

void DelClusterBackupConfigReq::Swap(DelClusterBackupConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelClusterBackupConfigReq::InternalSwap(DelClusterBackupConfigReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(set_id_, other->set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelClusterBackupConfigReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[165];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelClusterBackupConfigReq

// .cmongoproto.ReqHeader header = 1;
bool DelClusterBackupConfigReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelClusterBackupConfigReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& DelClusterBackupConfigReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterBackupConfigReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* DelClusterBackupConfigReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterBackupConfigReq.header)
  return header_;
}
::cmongoproto::ReqHeader* DelClusterBackupConfigReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterBackupConfigReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelClusterBackupConfigReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterBackupConfigReq.header)
}

// int32 region_id = 2;
void DelClusterBackupConfigReq::clear_region_id() {
  region_id_ = 0;
}
::google::protobuf::int32 DelClusterBackupConfigReq::region_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterBackupConfigReq.region_id)
  return region_id_;
}
void DelClusterBackupConfigReq::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterBackupConfigReq.region_id)
}

// int32 set_id = 3;
void DelClusterBackupConfigReq::clear_set_id() {
  set_id_ = 0;
}
::google::protobuf::int32 DelClusterBackupConfigReq::set_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterBackupConfigReq.set_id)
  return set_id_;
}
void DelClusterBackupConfigReq::set_set_id(::google::protobuf::int32 value) {
  
  set_id_ = value;
  // @@protoc_insertion_point(field_set:masterproto.DelClusterBackupConfigReq.set_id)
}

// string cluster_id = 4;
void DelClusterBackupConfigReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DelClusterBackupConfigReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterBackupConfigReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void DelClusterBackupConfigReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.DelClusterBackupConfigReq.cluster_id)
}
#if LANG_CXX11
void DelClusterBackupConfigReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.DelClusterBackupConfigReq.cluster_id)
}
#endif
void DelClusterBackupConfigReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.DelClusterBackupConfigReq.cluster_id)
}
void DelClusterBackupConfigReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.DelClusterBackupConfigReq.cluster_id)
}
::std::string* DelClusterBackupConfigReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterBackupConfigReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelClusterBackupConfigReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterBackupConfigReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelClusterBackupConfigReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterBackupConfigReq.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelClusterBackupConfigRsp::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelClusterBackupConfigRsp::DelClusterBackupConfigRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.DelClusterBackupConfigRsp)
}
DelClusterBackupConfigRsp::DelClusterBackupConfigRsp(const DelClusterBackupConfigRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.DelClusterBackupConfigRsp)
}

void DelClusterBackupConfigRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DelClusterBackupConfigRsp::~DelClusterBackupConfigRsp() {
  // @@protoc_insertion_point(destructor:masterproto.DelClusterBackupConfigRsp)
  SharedDtor();
}

void DelClusterBackupConfigRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DelClusterBackupConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelClusterBackupConfigRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[166].descriptor;
}

const DelClusterBackupConfigRsp& DelClusterBackupConfigRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelClusterBackupConfigRsp* DelClusterBackupConfigRsp::New(::google::protobuf::Arena* arena) const {
  DelClusterBackupConfigRsp* n = new DelClusterBackupConfigRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelClusterBackupConfigRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.DelClusterBackupConfigRsp)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DelClusterBackupConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.DelClusterBackupConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.DelClusterBackupConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.DelClusterBackupConfigRsp)
  return false;
#undef DO_
}

void DelClusterBackupConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.DelClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.DelClusterBackupConfigRsp)
}

::google::protobuf::uint8* DelClusterBackupConfigRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.DelClusterBackupConfigRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.DelClusterBackupConfigRsp)
  return target;
}

size_t DelClusterBackupConfigRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.DelClusterBackupConfigRsp)
  size_t total_size = 0;

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelClusterBackupConfigRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.DelClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelClusterBackupConfigRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelClusterBackupConfigRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.DelClusterBackupConfigRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.DelClusterBackupConfigRsp)
    MergeFrom(*source);
  }
}

void DelClusterBackupConfigRsp::MergeFrom(const DelClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.DelClusterBackupConfigRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void DelClusterBackupConfigRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.DelClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelClusterBackupConfigRsp::CopyFrom(const DelClusterBackupConfigRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.DelClusterBackupConfigRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelClusterBackupConfigRsp::IsInitialized() const {
  return true;
}

void DelClusterBackupConfigRsp::Swap(DelClusterBackupConfigRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelClusterBackupConfigRsp::InternalSwap(DelClusterBackupConfigRsp* other) {
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelClusterBackupConfigRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[166];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelClusterBackupConfigRsp

// .cmongoproto.ResHeader header = 1;
bool DelClusterBackupConfigRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DelClusterBackupConfigRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& DelClusterBackupConfigRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.DelClusterBackupConfigRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* DelClusterBackupConfigRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.DelClusterBackupConfigRsp.header)
  return header_;
}
::cmongoproto::ResHeader* DelClusterBackupConfigRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.DelClusterBackupConfigRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DelClusterBackupConfigRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.DelClusterBackupConfigRsp.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRoutesRawReq::kHeaderFieldNumber;
const int GetClusterRoutesRawReq::kClusterIdFieldNumber;
const int GetClusterRoutesRawReq::kTimeNanoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRoutesRawReq::GetClusterRoutesRawReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterRoutesRawReq)
}
GetClusterRoutesRawReq::GetClusterRoutesRawReq(const GetClusterRoutesRawReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    header_ = new ::cmongoproto::ReqHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  time_nano_ = from.time_nano_;
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterRoutesRawReq)
}

void GetClusterRoutesRawReq::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&time_nano_) -
    reinterpret_cast<char*>(&header_) + sizeof(time_nano_));
  _cached_size_ = 0;
}

GetClusterRoutesRawReq::~GetClusterRoutesRawReq() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterRoutesRawReq)
  SharedDtor();
}

void GetClusterRoutesRawReq::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterRoutesRawReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRoutesRawReq::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[167].descriptor;
}

const GetClusterRoutesRawReq& GetClusterRoutesRawReq::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRoutesRawReq* GetClusterRoutesRawReq::New(::google::protobuf::Arena* arena) const {
  GetClusterRoutesRawReq* n = new GetClusterRoutesRawReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRoutesRawReq::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterRoutesRawReq)
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  time_nano_ = GOOGLE_LONGLONG(0);
}

bool GetClusterRoutesRawReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterRoutesRawReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ReqHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "masterproto.GetClusterRoutesRawReq.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_nano = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_nano_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterRoutesRawReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterRoutesRawReq)
  return false;
#undef DO_
}

void GetClusterRoutesRawReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterRoutesRawReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterRoutesRawReq.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_id(), output);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_nano(), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterRoutesRawReq)
}

::google::protobuf::uint8* GetClusterRoutesRawReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterRoutesRawReq)
  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "masterproto.GetClusterRoutesRawReq.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_id(), target);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_nano(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterRoutesRawReq)
  return target;
}

size_t GetClusterRoutesRawReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterRoutesRawReq)
  size_t total_size = 0;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .cmongoproto.ReqHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int64 time_nano = 3;
  if (this->time_nano() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_nano());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRoutesRawReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterRoutesRawReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRoutesRawReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRoutesRawReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterRoutesRawReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterRoutesRawReq)
    MergeFrom(*source);
  }
}

void GetClusterRoutesRawReq::MergeFrom(const GetClusterRoutesRawReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterRoutesRawReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ReqHeader::MergeFrom(from.header());
  }
  if (from.time_nano() != 0) {
    set_time_nano(from.time_nano());
  }
}

void GetClusterRoutesRawReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterRoutesRawReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRoutesRawReq::CopyFrom(const GetClusterRoutesRawReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterRoutesRawReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRoutesRawReq::IsInitialized() const {
  return true;
}

void GetClusterRoutesRawReq::Swap(GetClusterRoutesRawReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRoutesRawReq::InternalSwap(GetClusterRoutesRawReq* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(header_, other->header_);
  std::swap(time_nano_, other->time_nano_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRoutesRawReq::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[167];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRoutesRawReq

// .cmongoproto.ReqHeader header = 1;
bool GetClusterRoutesRawReq::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterRoutesRawReq::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ReqHeader& GetClusterRoutesRawReq::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRawReq.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ReqHeader::internal_default_instance();
}
::cmongoproto::ReqHeader* GetClusterRoutesRawReq::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ReqHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRawReq.header)
  return header_;
}
::cmongoproto::ReqHeader* GetClusterRoutesRawReq::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesRawReq.header)
  
  ::cmongoproto::ReqHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterRoutesRawReq::set_allocated_header(::cmongoproto::ReqHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesRawReq.header)
}

// string cluster_id = 2;
void GetClusterRoutesRawReq::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRoutesRawReq::cluster_id() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRawReq.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterRoutesRawReq::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterproto.GetClusterRoutesRawReq.cluster_id)
}
#if LANG_CXX11
void GetClusterRoutesRawReq::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterproto.GetClusterRoutesRawReq.cluster_id)
}
#endif
void GetClusterRoutesRawReq::set_cluster_id(const char* value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterproto.GetClusterRoutesRawReq.cluster_id)
}
void GetClusterRoutesRawReq::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterproto.GetClusterRoutesRawReq.cluster_id)
}
::std::string* GetClusterRoutesRawReq::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRawReq.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRoutesRawReq::release_cluster_id() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesRawReq.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRoutesRawReq::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesRawReq.cluster_id)
}

// int64 time_nano = 3;
void GetClusterRoutesRawReq::clear_time_nano() {
  time_nano_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetClusterRoutesRawReq::time_nano() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRawReq.time_nano)
  return time_nano_;
}
void GetClusterRoutesRawReq::set_time_nano(::google::protobuf::int64 value) {
  
  time_nano_ = value;
  // @@protoc_insertion_point(field_set:masterproto.GetClusterRoutesRawReq.time_nano)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRoutesRawRsp::kHeaderFieldNumber;
const int GetClusterRoutesRawRsp::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRoutesRawRsp::GetClusterRoutesRawRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:masterproto.GetClusterRoutesRawRsp)
}
GetClusterRoutesRawRsp::GetClusterRoutesRawRsp(const GetClusterRoutesRawRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      routes_(from.routes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::cmongoproto::ResHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:masterproto.GetClusterRoutesRawRsp)
}

void GetClusterRoutesRawRsp::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetClusterRoutesRawRsp::~GetClusterRoutesRawRsp() {
  // @@protoc_insertion_point(destructor:masterproto.GetClusterRoutesRawRsp)
  SharedDtor();
}

void GetClusterRoutesRawRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void GetClusterRoutesRawRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRoutesRawRsp::descriptor() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[168].descriptor;
}

const GetClusterRoutesRawRsp& GetClusterRoutesRawRsp::default_instance() {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRoutesRawRsp* GetClusterRoutesRawRsp::New(::google::protobuf::Arena* arena) const {
  GetClusterRoutesRawRsp* n = new GetClusterRoutesRawRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRoutesRawRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:masterproto.GetClusterRoutesRawRsp)
  routes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool GetClusterRoutesRawRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:masterproto.GetClusterRoutesRawRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cmongoproto.ResHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .masterproto.TableRoutesRaw routes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:masterproto.GetClusterRoutesRawRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:masterproto.GetClusterRoutesRawRsp)
  return false;
#undef DO_
}

void GetClusterRoutesRawRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:masterproto.GetClusterRoutesRawRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .masterproto.TableRoutesRaw routes = 2;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:masterproto.GetClusterRoutesRawRsp)
}

::google::protobuf::uint8* GetClusterRoutesRawRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:masterproto.GetClusterRoutesRawRsp)
  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .masterproto.TableRoutesRaw routes = 2;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:masterproto.GetClusterRoutesRawRsp)
  return target;
}

size_t GetClusterRoutesRawRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterproto.GetClusterRoutesRawRsp)
  size_t total_size = 0;

  // repeated .masterproto.TableRoutesRaw routes = 2;
  {
    unsigned int count = this->routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(i));
    }
  }

  // .cmongoproto.ResHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRoutesRawRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterproto.GetClusterRoutesRawRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRoutesRawRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRoutesRawRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterproto.GetClusterRoutesRawRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterproto.GetClusterRoutesRawRsp)
    MergeFrom(*source);
  }
}

void GetClusterRoutesRawRsp::MergeFrom(const GetClusterRoutesRawRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterproto.GetClusterRoutesRawRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  routes_.MergeFrom(from.routes_);
  if (from.has_header()) {
    mutable_header()->::cmongoproto::ResHeader::MergeFrom(from.header());
  }
}

void GetClusterRoutesRawRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterproto.GetClusterRoutesRawRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRoutesRawRsp::CopyFrom(const GetClusterRoutesRawRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterproto.GetClusterRoutesRawRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRoutesRawRsp::IsInitialized() const {
  return true;
}

void GetClusterRoutesRawRsp::Swap(GetClusterRoutesRawRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRoutesRawRsp::InternalSwap(GetClusterRoutesRawRsp* other) {
  routes_.UnsafeArenaSwap(&other->routes_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRoutesRawRsp::GetMetadata() const {
  protobuf_cmongo_2fmasterproto_2fmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmongo_2fmasterproto_2fmaster_2eproto::file_level_metadata[168];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRoutesRawRsp

// .cmongoproto.ResHeader header = 1;
bool GetClusterRoutesRawRsp::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterRoutesRawRsp::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::cmongoproto::ResHeader& GetClusterRoutesRawRsp::header() const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRawRsp.header)
  return header_ != NULL ? *header_
                         : *::cmongoproto::ResHeader::internal_default_instance();
}
::cmongoproto::ResHeader* GetClusterRoutesRawRsp::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cmongoproto::ResHeader;
  }
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRawRsp.header)
  return header_;
}
::cmongoproto::ResHeader* GetClusterRoutesRawRsp::release_header() {
  // @@protoc_insertion_point(field_release:masterproto.GetClusterRoutesRawRsp.header)
  
  ::cmongoproto::ResHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterRoutesRawRsp::set_allocated_header(::cmongoproto::ResHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:masterproto.GetClusterRoutesRawRsp.header)
}

// repeated .masterproto.TableRoutesRaw routes = 2;
int GetClusterRoutesRawRsp::routes_size() const {
  return routes_.size();
}
void GetClusterRoutesRawRsp::clear_routes() {
  routes_.Clear();
}
const ::masterproto::TableRoutesRaw& GetClusterRoutesRawRsp::routes(int index) const {
  // @@protoc_insertion_point(field_get:masterproto.GetClusterRoutesRawRsp.routes)
  return routes_.Get(index);
}
::masterproto::TableRoutesRaw* GetClusterRoutesRawRsp::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:masterproto.GetClusterRoutesRawRsp.routes)
  return routes_.Mutable(index);
}
::masterproto::TableRoutesRaw* GetClusterRoutesRawRsp::add_routes() {
  // @@protoc_insertion_point(field_add:masterproto.GetClusterRoutesRawRsp.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::masterproto::TableRoutesRaw >*
GetClusterRoutesRawRsp::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:masterproto.GetClusterRoutesRawRsp.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::masterproto::TableRoutesRaw >&
GetClusterRoutesRawRsp::routes() const {
  // @@protoc_insertion_point(field_list:masterproto.GetClusterRoutesRawRsp.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace masterproto

// @@protoc_insertion_point(global_scope)
